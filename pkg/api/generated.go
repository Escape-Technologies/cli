// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for PostCreateApplicationJSONBodyType.
const (
	GRAPHQL PostCreateApplicationJSONBodyType = "GRAPHQL"
	REST    PostCreateApplicationJSONBodyType = "REST"
)

// Defines values for PostV1IntegrationsJiraJSONBodyParametersPropertiesMappingEscapeProperty.
const (
	Severity PostV1IntegrationsJiraJSONBodyParametersPropertiesMappingEscapeProperty = "severity"
)

// Defines values for PostV1IntegrationsKongKonnectJSONBodyParametersRegion.
const (
	AU PostV1IntegrationsKongKonnectJSONBodyParametersRegion = "AU"
	EU PostV1IntegrationsKongKonnectJSONBodyParametersRegion = "EU"
	US PostV1IntegrationsKongKonnectJSONBodyParametersRegion = "US"
)

// PostApplicationsIdStartScanJSONBody defines parameters for PostApplicationsIdStartScan.
type PostApplicationsIdStartScanJSONBody struct {
	CommitAuthor                   *string                  `json:"commitAuthor,omitempty"`
	CommitAuthorProfilePictureLink *string                  `json:"commitAuthorProfilePictureLink,omitempty"`
	CommitBranch                   *string                  `json:"commitBranch,omitempty"`
	CommitHash                     *string                  `json:"commitHash,omitempty"`
	CommitLink                     *string                  `json:"commitLink,omitempty"`
	ConfigurationOverride          *map[string]*interface{} `json:"configurationOverride,omitempty"`
	ForceLockBypass                *bool                    `json:"forceLockBypass,omitempty"`
	SchemaUrl                      *string                  `json:"schemaUrl,omitempty"`
}

// PostApplicationsIdUploadSchemaJSONBody defines parameters for PostApplicationsIdUploadSchema.
type PostApplicationsIdUploadSchemaJSONBody struct {
	Schema    *string `json:"schema,omitempty"`
	SchemaUrl *string `json:"schemaUrl,omitempty"`
}

// PostCreateApplicationJSONBody defines parameters for PostCreateApplication.
type PostCreateApplicationJSONBody struct {
	Authentication    *interface{}                      `json:"authentication"`
	Cron              *string                           `json:"cron,omitempty"`
	DisableScheduling *bool                             `json:"disableScheduling,omitempty"`
	FullConfiguration *interface{}                      `json:"fullConfiguration"`
	Labels            *[]string                         `json:"labels,omitempty"`
	LocationId        *openapi_types.UUID               `json:"locationId,omitempty"`
	Name              string                            `json:"name"`
	OrganizationId    openapi_types.UUID                `json:"organizationId"`
	ReadWrite         bool                              `json:"readWrite"`
	Schema            *string                           `json:"schema,omitempty"`
	SchemaUrl         *string                           `json:"schemaUrl,omitempty"`
	ServerUrl         string                            `json:"serverUrl"`
	Type              PostCreateApplicationJSONBodyType `json:"type"`
}

// PostCreateApplicationJSONBodyType defines parameters for PostCreateApplication.
type PostCreateApplicationJSONBodyType string

// GetOrganizationIdApplicationsSearchParams defines parameters for GetOrganizationIdApplicationsSearch.
type GetOrganizationIdApplicationsSearchParams struct {
	// Search Search query.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Cursor Cursor to start from. Given by the previous page.
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PostV1IntegrationsAkamaiJSONBody defines parameters for PostV1IntegrationsAkamai.
type PostV1IntegrationsAkamaiJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		AccessToken  string `json:"access_token"`
		ClientSecret string `json:"client_secret"`
		ClientToken  string `json:"client_token"`
		Host         string `json:"host"`
	} `json:"parameters"`
}

// PostV1IntegrationsApigeeJSONBody defines parameters for PostV1IntegrationsApigee.
type PostV1IntegrationsApigeeJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
		AuthUri                 string `json:"auth_uri"`
		ClientEmail             string `json:"client_email"`
		ClientId                string `json:"client_id"`
		ClientX509CertUrl       string `json:"client_x509_cert_url"`
		PrivateKey              string `json:"private_key"`
		PrivateKeyId            string `json:"private_key_id"`
		ProjectId               string `json:"project_id"`
		TokenUri                string `json:"token_uri"`
		Type                    string `json:"type"`
		UniverseDomain          string `json:"universe_domain"`
	} `json:"parameters"`
}

// PostV1IntegrationsAwsJSONBody defines parameters for PostV1IntegrationsAws.
type PostV1IntegrationsAwsJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		PrivKey string `json:"priv_key"`
		PubKey  string `json:"pub_key"`
	} `json:"parameters"`
}

// PostV1IntegrationsAzureJSONBody defines parameters for PostV1IntegrationsAzure.
type PostV1IntegrationsAzureJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ClientId       string  `json:"client_id"`
		ClientSecret   string  `json:"client_secret"`
		SubscriptionId *string `json:"subscription_id,omitempty"`
		TenantId       string  `json:"tenant_id"`
	} `json:"parameters"`
}

// PostV1IntegrationsAzureDevopsJSONBody defines parameters for PostV1IntegrationsAzureDevops.
type PostV1IntegrationsAzureDevopsJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey      string `json:"api_key"`
		InstanceUrl string `json:"instance_url"`
	} `json:"parameters"`
}

// PostV1IntegrationsBitbucketRepoJSONBody defines parameters for PostV1IntegrationsBitbucketRepo.
type PostV1IntegrationsBitbucketRepoJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey         string  `json:"api_key"`
		InstanceUrl    *string `json:"instance_url,omitempty"`
		RepositoryName string  `json:"repository_name"`
		Username       *string `json:"username,omitempty"`
		WorkspaceName  string  `json:"workspace_name"`
	} `json:"parameters"`
}

// PostV1IntegrationsCloudflareJSONBody defines parameters for PostV1IntegrationsCloudflare.
type PostV1IntegrationsCloudflareJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey string `json:"api_key"`
	} `json:"parameters"`
}

// PostV1IntegrationsDiscordWebhookJSONBody defines parameters for PostV1IntegrationsDiscordWebhook.
type PostV1IntegrationsDiscordWebhookJSONBody struct {
	LocationId *openapi_types.UUID    `json:"locationId"`
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PostV1IntegrationsEmailJSONBody defines parameters for PostV1IntegrationsEmail.
type PostV1IntegrationsEmailJSONBody struct {
	LocationId *openapi_types.UUID    `json:"locationId"`
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PostV1IntegrationsGcpJSONBody defines parameters for PostV1IntegrationsGcp.
type PostV1IntegrationsGcpJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
		AuthUri                 string `json:"auth_uri"`
		ClientEmail             string `json:"client_email"`
		ClientId                string `json:"client_id"`
		ClientX509CertUrl       string `json:"client_x509_cert_url"`
		PrivateKey              string `json:"private_key"`
		PrivateKeyId            string `json:"private_key_id"`
		ProjectId               string `json:"project_id"`
		TokenUri                string `json:"token_uri"`
		Type                    string `json:"type"`
		UniverseDomain          string `json:"universe_domain"`
	} `json:"parameters"`
}

// PostV1IntegrationsGithubApiKeyJSONBody defines parameters for PostV1IntegrationsGithubApiKey.
type PostV1IntegrationsGithubApiKeyJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey string `json:"api_key"`
	} `json:"parameters"`
}

// PostV1IntegrationsGitlabApiKeyJSONBody defines parameters for PostV1IntegrationsGitlabApiKey.
type PostV1IntegrationsGitlabApiKeyJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey      string  `json:"api_key"`
		InstanceUrl *string `json:"instance_url,omitempty"`
	} `json:"parameters"`
}

// PostV1IntegrationsJiraJSONBody defines parameters for PostV1IntegrationsJira.
type PostV1IntegrationsJiraJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		AccountId         string `json:"account_id"`
		ApiKey            string `json:"api_key"`
		Email             string `json:"email"`
		InstanceUrl       string `json:"instance_url"`
		Name              string `json:"name"`
		PropertiesMapping *[]struct {
			EscapeProperty PostV1IntegrationsJiraJSONBodyParametersPropertiesMappingEscapeProperty `json:"escape_property"`
			JiraProperty   string                                                                  `json:"jira_property"`
		} `json:"properties_mapping,omitempty"`
	} `json:"parameters"`
}

// PostV1IntegrationsJiraJSONBodyParametersPropertiesMappingEscapeProperty defines parameters for PostV1IntegrationsJira.
type PostV1IntegrationsJiraJSONBodyParametersPropertiesMappingEscapeProperty string

// PostV1IntegrationsKongGatewayJSONBody defines parameters for PostV1IntegrationsKongGateway.
type PostV1IntegrationsKongGatewayJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		AdminApiUrl string `json:"admin_api_url"`
		ApiKey      string `json:"api_key"`
	} `json:"parameters"`
}

// PostV1IntegrationsKongKonnectJSONBody defines parameters for PostV1IntegrationsKongKonnect.
type PostV1IntegrationsKongKonnectJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		Region             PostV1IntegrationsKongKonnectJSONBodyParametersRegion `json:"region"`
		SystemAccountToken string                                                `json:"system_account_token"`
	} `json:"parameters"`
}

// PostV1IntegrationsKongKonnectJSONBodyParametersRegion defines parameters for PostV1IntegrationsKongKonnect.
type PostV1IntegrationsKongKonnectJSONBodyParametersRegion string

// PostV1IntegrationsKubernetesJSONBody defines parameters for PostV1IntegrationsKubernetes.
type PostV1IntegrationsKubernetesJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		Blacklist *struct {
			Namespaces *[]string `json:"namespaces,omitempty"`
		} `json:"blacklist,omitempty"`
		Tags *struct {
			Labels     *[]string `json:"labels,omitempty"`
			Namespaces *bool     `json:"namespaces,omitempty"`
		} `json:"tags,omitempty"`
	} `json:"parameters"`
}

// PostV1IntegrationsPostmanApiKeyJSONBody defines parameters for PostV1IntegrationsPostmanApiKey.
type PostV1IntegrationsPostmanApiKeyJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiKey string `json:"api_key"`
	} `json:"parameters"`
}

// PostV1IntegrationsSlackWebhookJSONBody defines parameters for PostV1IntegrationsSlackWebhook.
type PostV1IntegrationsSlackWebhookJSONBody struct {
	LocationId *openapi_types.UUID    `json:"locationId"`
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PostV1IntegrationsTeamsWebhookJSONBody defines parameters for PostV1IntegrationsTeamsWebhook.
type PostV1IntegrationsTeamsWebhookJSONBody struct {
	LocationId *openapi_types.UUID    `json:"locationId"`
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PostV1IntegrationsWebhookJSONBody defines parameters for PostV1IntegrationsWebhook.
type PostV1IntegrationsWebhookJSONBody struct {
	LocationId *openapi_types.UUID    `json:"locationId"`
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`
}

// PostV1IntegrationsWizJSONBody defines parameters for PostV1IntegrationsWiz.
type PostV1IntegrationsWizJSONBody struct {
	LocationId *openapi_types.UUID `json:"locationId"`
	Name       string              `json:"name"`
	Parameters struct {
		ApiEndpoint  string `json:"api_endpoint"`
		ClientId     string `json:"client_id"`
		ClientSecret string `json:"client_secret"`
		TokenUri     string `json:"token_uri"`
	} `json:"parameters"`
}

// CreateLocationJSONBody defines parameters for CreateLocation.
type CreateLocationJSONBody struct {
	// Key The SSH public key to use to connect to the location.
	Key *string `json:"key,omitempty"`

	// Name The name of the location.
	Name string `json:"name"`

	// PrivateLocationV2 Opt in to the new private location feature
	PrivateLocationV2 *bool `json:"private_location_v2,omitempty"`
}

// UpsertLocationJSONBody defines parameters for UpsertLocation.
type UpsertLocationJSONBody struct {
	// Key The SSH public key to use to connect to the location.
	Key *string `json:"key,omitempty"`

	// Name The name of the location.
	Name string `json:"name"`

	// PrivateLocationV2 Opt in to the new private location feature
	PrivateLocationV2 *bool `json:"private_location_v2,omitempty"`
}

// GetV1OrganizationIdSchemasParams defines parameters for GetV1OrganizationIdSchemas.
type GetV1OrganizationIdSchemasParams struct {
	// After Cursor to start from. Given by the previous page.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// PostApplicationsIdStartScanJSONRequestBody defines body for PostApplicationsIdStartScan for application/json ContentType.
type PostApplicationsIdStartScanJSONRequestBody PostApplicationsIdStartScanJSONBody

// PostApplicationsIdUploadSchemaJSONRequestBody defines body for PostApplicationsIdUploadSchema for application/json ContentType.
type PostApplicationsIdUploadSchemaJSONRequestBody PostApplicationsIdUploadSchemaJSONBody

// PostCreateApplicationJSONRequestBody defines body for PostCreateApplication for application/json ContentType.
type PostCreateApplicationJSONRequestBody PostCreateApplicationJSONBody

// PostV1IntegrationsAkamaiJSONRequestBody defines body for PostV1IntegrationsAkamai for application/json ContentType.
type PostV1IntegrationsAkamaiJSONRequestBody PostV1IntegrationsAkamaiJSONBody

// PostV1IntegrationsApigeeJSONRequestBody defines body for PostV1IntegrationsApigee for application/json ContentType.
type PostV1IntegrationsApigeeJSONRequestBody PostV1IntegrationsApigeeJSONBody

// PostV1IntegrationsAwsJSONRequestBody defines body for PostV1IntegrationsAws for application/json ContentType.
type PostV1IntegrationsAwsJSONRequestBody PostV1IntegrationsAwsJSONBody

// PostV1IntegrationsAzureJSONRequestBody defines body for PostV1IntegrationsAzure for application/json ContentType.
type PostV1IntegrationsAzureJSONRequestBody PostV1IntegrationsAzureJSONBody

// PostV1IntegrationsAzureDevopsJSONRequestBody defines body for PostV1IntegrationsAzureDevops for application/json ContentType.
type PostV1IntegrationsAzureDevopsJSONRequestBody PostV1IntegrationsAzureDevopsJSONBody

// PostV1IntegrationsBitbucketRepoJSONRequestBody defines body for PostV1IntegrationsBitbucketRepo for application/json ContentType.
type PostV1IntegrationsBitbucketRepoJSONRequestBody PostV1IntegrationsBitbucketRepoJSONBody

// PostV1IntegrationsCloudflareJSONRequestBody defines body for PostV1IntegrationsCloudflare for application/json ContentType.
type PostV1IntegrationsCloudflareJSONRequestBody PostV1IntegrationsCloudflareJSONBody

// PostV1IntegrationsDiscordWebhookJSONRequestBody defines body for PostV1IntegrationsDiscordWebhook for application/json ContentType.
type PostV1IntegrationsDiscordWebhookJSONRequestBody PostV1IntegrationsDiscordWebhookJSONBody

// PostV1IntegrationsEmailJSONRequestBody defines body for PostV1IntegrationsEmail for application/json ContentType.
type PostV1IntegrationsEmailJSONRequestBody PostV1IntegrationsEmailJSONBody

// PostV1IntegrationsGcpJSONRequestBody defines body for PostV1IntegrationsGcp for application/json ContentType.
type PostV1IntegrationsGcpJSONRequestBody PostV1IntegrationsGcpJSONBody

// PostV1IntegrationsGithubApiKeyJSONRequestBody defines body for PostV1IntegrationsGithubApiKey for application/json ContentType.
type PostV1IntegrationsGithubApiKeyJSONRequestBody PostV1IntegrationsGithubApiKeyJSONBody

// PostV1IntegrationsGitlabApiKeyJSONRequestBody defines body for PostV1IntegrationsGitlabApiKey for application/json ContentType.
type PostV1IntegrationsGitlabApiKeyJSONRequestBody PostV1IntegrationsGitlabApiKeyJSONBody

// PostV1IntegrationsJiraJSONRequestBody defines body for PostV1IntegrationsJira for application/json ContentType.
type PostV1IntegrationsJiraJSONRequestBody PostV1IntegrationsJiraJSONBody

// PostV1IntegrationsKongGatewayJSONRequestBody defines body for PostV1IntegrationsKongGateway for application/json ContentType.
type PostV1IntegrationsKongGatewayJSONRequestBody PostV1IntegrationsKongGatewayJSONBody

// PostV1IntegrationsKongKonnectJSONRequestBody defines body for PostV1IntegrationsKongKonnect for application/json ContentType.
type PostV1IntegrationsKongKonnectJSONRequestBody PostV1IntegrationsKongKonnectJSONBody

// PostV1IntegrationsKubernetesJSONRequestBody defines body for PostV1IntegrationsKubernetes for application/json ContentType.
type PostV1IntegrationsKubernetesJSONRequestBody PostV1IntegrationsKubernetesJSONBody

// PostV1IntegrationsPostmanApiKeyJSONRequestBody defines body for PostV1IntegrationsPostmanApiKey for application/json ContentType.
type PostV1IntegrationsPostmanApiKeyJSONRequestBody PostV1IntegrationsPostmanApiKeyJSONBody

// PostV1IntegrationsSlackWebhookJSONRequestBody defines body for PostV1IntegrationsSlackWebhook for application/json ContentType.
type PostV1IntegrationsSlackWebhookJSONRequestBody PostV1IntegrationsSlackWebhookJSONBody

// PostV1IntegrationsTeamsWebhookJSONRequestBody defines body for PostV1IntegrationsTeamsWebhook for application/json ContentType.
type PostV1IntegrationsTeamsWebhookJSONRequestBody PostV1IntegrationsTeamsWebhookJSONBody

// PostV1IntegrationsWebhookJSONRequestBody defines body for PostV1IntegrationsWebhook for application/json ContentType.
type PostV1IntegrationsWebhookJSONRequestBody PostV1IntegrationsWebhookJSONBody

// PostV1IntegrationsWizJSONRequestBody defines body for PostV1IntegrationsWiz for application/json ContentType.
type PostV1IntegrationsWizJSONRequestBody PostV1IntegrationsWizJSONBody

// CreateLocationJSONRequestBody defines body for CreateLocation for application/json ContentType.
type CreateLocationJSONRequestBody CreateLocationJSONBody

// UpsertLocationJSONRequestBody defines body for UpsertLocation for application/json ContentType.
type UpsertLocationJSONRequestBody UpsertLocationJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApplicationId request
	GetApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationsIdStartScanWithBody request with any body
	PostApplicationsIdStartScanWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsIdStartScan(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationsIdUploadSchemaWithBody request with any body
	PostApplicationsIdUploadSchemaWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsIdUploadSchema(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreateApplicationWithBody request with any body
	PostCreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreateApplication(ctx context.Context, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationIdApplications request
	GetOrganizationIdApplications(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationIdApplicationsSearch request
	GetOrganizationIdApplicationsSearch(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansId request
	GetScansId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAkamai request
	GetV1IntegrationsAkamai(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsAkamaiWithBody request with any body
	PostV1IntegrationsAkamaiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsAkamai(ctx context.Context, body PostV1IntegrationsAkamaiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsAkamaiId request
	DeleteV1IntegrationsAkamaiId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAkamaiId request
	GetV1IntegrationsAkamaiId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsApigee request
	GetV1IntegrationsApigee(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsApigeeWithBody request with any body
	PostV1IntegrationsApigeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsApigee(ctx context.Context, body PostV1IntegrationsApigeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsApigeeId request
	DeleteV1IntegrationsApigeeId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsApigeeId request
	GetV1IntegrationsApigeeId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAws request
	GetV1IntegrationsAws(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsAwsWithBody request with any body
	PostV1IntegrationsAwsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsAws(ctx context.Context, body PostV1IntegrationsAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsAwsId request
	DeleteV1IntegrationsAwsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAwsId request
	GetV1IntegrationsAwsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAzure request
	GetV1IntegrationsAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsAzureWithBody request with any body
	PostV1IntegrationsAzureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsAzure(ctx context.Context, body PostV1IntegrationsAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsAzureId request
	DeleteV1IntegrationsAzureId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAzureId request
	GetV1IntegrationsAzureId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAzureDevops request
	GetV1IntegrationsAzureDevops(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsAzureDevopsWithBody request with any body
	PostV1IntegrationsAzureDevopsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsAzureDevops(ctx context.Context, body PostV1IntegrationsAzureDevopsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsAzureDevopsId request
	DeleteV1IntegrationsAzureDevopsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsAzureDevopsId request
	GetV1IntegrationsAzureDevopsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsBitbucketRepo request
	GetV1IntegrationsBitbucketRepo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsBitbucketRepoWithBody request with any body
	PostV1IntegrationsBitbucketRepoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsBitbucketRepo(ctx context.Context, body PostV1IntegrationsBitbucketRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsBitbucketRepoId request
	DeleteV1IntegrationsBitbucketRepoId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsBitbucketRepoId request
	GetV1IntegrationsBitbucketRepoId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsCloudflare request
	GetV1IntegrationsCloudflare(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsCloudflareWithBody request with any body
	PostV1IntegrationsCloudflareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsCloudflare(ctx context.Context, body PostV1IntegrationsCloudflareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsCloudflareId request
	DeleteV1IntegrationsCloudflareId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsCloudflareId request
	GetV1IntegrationsCloudflareId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsDiscordWebhook request
	GetV1IntegrationsDiscordWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsDiscordWebhookWithBody request with any body
	PostV1IntegrationsDiscordWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsDiscordWebhook(ctx context.Context, body PostV1IntegrationsDiscordWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsDiscordWebhookId request
	DeleteV1IntegrationsDiscordWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsDiscordWebhookId request
	GetV1IntegrationsDiscordWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsEmail request
	GetV1IntegrationsEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsEmailWithBody request with any body
	PostV1IntegrationsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsEmail(ctx context.Context, body PostV1IntegrationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsEmailId request
	DeleteV1IntegrationsEmailId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsEmailId request
	GetV1IntegrationsEmailId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGcp request
	GetV1IntegrationsGcp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsGcpWithBody request with any body
	PostV1IntegrationsGcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsGcp(ctx context.Context, body PostV1IntegrationsGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsGcpId request
	DeleteV1IntegrationsGcpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGcpId request
	GetV1IntegrationsGcpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGithubApiKey request
	GetV1IntegrationsGithubApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsGithubApiKeyWithBody request with any body
	PostV1IntegrationsGithubApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsGithubApiKey(ctx context.Context, body PostV1IntegrationsGithubApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsGithubApiKeyId request
	DeleteV1IntegrationsGithubApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGithubApiKeyId request
	GetV1IntegrationsGithubApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGitlabApiKey request
	GetV1IntegrationsGitlabApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsGitlabApiKeyWithBody request with any body
	PostV1IntegrationsGitlabApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsGitlabApiKey(ctx context.Context, body PostV1IntegrationsGitlabApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsGitlabApiKeyId request
	DeleteV1IntegrationsGitlabApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsGitlabApiKeyId request
	GetV1IntegrationsGitlabApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsJira request
	GetV1IntegrationsJira(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsJiraWithBody request with any body
	PostV1IntegrationsJiraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsJira(ctx context.Context, body PostV1IntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsJiraId request
	DeleteV1IntegrationsJiraId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsJiraId request
	GetV1IntegrationsJiraId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKongGateway request
	GetV1IntegrationsKongGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsKongGatewayWithBody request with any body
	PostV1IntegrationsKongGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsKongGateway(ctx context.Context, body PostV1IntegrationsKongGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsKongGatewayId request
	DeleteV1IntegrationsKongGatewayId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKongGatewayId request
	GetV1IntegrationsKongGatewayId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKongKonnect request
	GetV1IntegrationsKongKonnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsKongKonnectWithBody request with any body
	PostV1IntegrationsKongKonnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsKongKonnect(ctx context.Context, body PostV1IntegrationsKongKonnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsKongKonnectId request
	DeleteV1IntegrationsKongKonnectId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKongKonnectId request
	GetV1IntegrationsKongKonnectId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKubernetes request
	GetV1IntegrationsKubernetes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsKubernetesWithBody request with any body
	PostV1IntegrationsKubernetesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsKubernetes(ctx context.Context, body PostV1IntegrationsKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsKubernetesId request
	DeleteV1IntegrationsKubernetesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsKubernetesId request
	GetV1IntegrationsKubernetesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsPostmanApiKey request
	GetV1IntegrationsPostmanApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsPostmanApiKeyWithBody request with any body
	PostV1IntegrationsPostmanApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsPostmanApiKey(ctx context.Context, body PostV1IntegrationsPostmanApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsPostmanApiKeyId request
	DeleteV1IntegrationsPostmanApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsPostmanApiKeyId request
	GetV1IntegrationsPostmanApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsSlackWebhook request
	GetV1IntegrationsSlackWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsSlackWebhookWithBody request with any body
	PostV1IntegrationsSlackWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsSlackWebhook(ctx context.Context, body PostV1IntegrationsSlackWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsSlackWebhookId request
	DeleteV1IntegrationsSlackWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsSlackWebhookId request
	GetV1IntegrationsSlackWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsTeamsWebhook request
	GetV1IntegrationsTeamsWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsTeamsWebhookWithBody request with any body
	PostV1IntegrationsTeamsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsTeamsWebhook(ctx context.Context, body PostV1IntegrationsTeamsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsTeamsWebhookId request
	DeleteV1IntegrationsTeamsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsTeamsWebhookId request
	GetV1IntegrationsTeamsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsWebhook request
	GetV1IntegrationsWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsWebhookWithBody request with any body
	PostV1IntegrationsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsWebhook(ctx context.Context, body PostV1IntegrationsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsWebhookId request
	DeleteV1IntegrationsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsWebhookId request
	GetV1IntegrationsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsWiz request
	GetV1IntegrationsWiz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IntegrationsWizWithBody request with any body
	PostV1IntegrationsWizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IntegrationsWiz(ctx context.Context, body PostV1IntegrationsWizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1IntegrationsWizId request
	DeleteV1IntegrationsWizId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IntegrationsWizId request
	GetV1IntegrationsWizId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLocations request
	ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLocationWithBody request with any body
	CreateLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLocation(ctx context.Context, body CreateLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertLocationWithBody request with any body
	UpsertLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertLocation(ctx context.Context, body UpsertLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocation request
	DeleteLocation(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocation request
	GetLocation(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdSchemas request
	GetV1OrganizationIdSchemas(ctx context.Context, id openapi_types.UUID, params *GetV1OrganizationIdSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdSchemasSchemaId request
	GetV1OrganizationIdSchemasSchemaId(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdServices request
	GetV1OrganizationIdServices(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdStartScanWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdStartScanRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdStartScan(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdStartScanRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdUploadSchemaWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdUploadSchemaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdUploadSchema(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdUploadSchemaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateApplication(ctx context.Context, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationIdApplications(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationIdApplicationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationIdApplicationsSearch(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationIdApplicationsSearchRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAkamai(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAkamaiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAkamaiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAkamaiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAkamai(ctx context.Context, body PostV1IntegrationsAkamaiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAkamaiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsAkamaiId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsAkamaiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAkamaiId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAkamaiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsApigee(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsApigeeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsApigeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsApigeeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsApigee(ctx context.Context, body PostV1IntegrationsApigeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsApigeeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsApigeeId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsApigeeIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsApigeeId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsApigeeIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAws(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAwsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAwsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAwsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAws(ctx context.Context, body PostV1IntegrationsAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAwsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsAwsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsAwsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAwsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAwsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAzure(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAzureRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAzureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAzureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAzure(ctx context.Context, body PostV1IntegrationsAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAzureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsAzureId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsAzureIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAzureId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAzureIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAzureDevops(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAzureDevopsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAzureDevopsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAzureDevopsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsAzureDevops(ctx context.Context, body PostV1IntegrationsAzureDevopsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsAzureDevopsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsAzureDevopsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsAzureDevopsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsAzureDevopsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsAzureDevopsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsBitbucketRepo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsBitbucketRepoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsBitbucketRepoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsBitbucketRepoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsBitbucketRepo(ctx context.Context, body PostV1IntegrationsBitbucketRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsBitbucketRepoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsBitbucketRepoId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsBitbucketRepoIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsBitbucketRepoId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsBitbucketRepoIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsCloudflare(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsCloudflareRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsCloudflareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsCloudflareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsCloudflare(ctx context.Context, body PostV1IntegrationsCloudflareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsCloudflareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsCloudflareId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsCloudflareIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsCloudflareId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsCloudflareIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsDiscordWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsDiscordWebhookRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsDiscordWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsDiscordWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsDiscordWebhook(ctx context.Context, body PostV1IntegrationsDiscordWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsDiscordWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsDiscordWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsDiscordWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsDiscordWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsDiscordWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsEmail(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsEmailRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsEmail(ctx context.Context, body PostV1IntegrationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsEmailId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsEmailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsEmailId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsEmailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGcp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGcpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGcpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGcp(ctx context.Context, body PostV1IntegrationsGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGcpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsGcpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsGcpIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGcpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGcpIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGithubApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGithubApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGithubApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGithubApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGithubApiKey(ctx context.Context, body PostV1IntegrationsGithubApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGithubApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsGithubApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsGithubApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGithubApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGithubApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGitlabApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGitlabApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGitlabApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGitlabApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsGitlabApiKey(ctx context.Context, body PostV1IntegrationsGitlabApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsGitlabApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsGitlabApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsGitlabApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsGitlabApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsGitlabApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsJira(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsJiraRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsJiraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsJiraRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsJira(ctx context.Context, body PostV1IntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsJiraRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsJiraId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsJiraIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsJiraId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsJiraIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKongGateway(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKongGatewayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKongGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKongGatewayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKongGateway(ctx context.Context, body PostV1IntegrationsKongGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKongGatewayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsKongGatewayId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsKongGatewayIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKongGatewayId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKongGatewayIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKongKonnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKongKonnectRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKongKonnectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKongKonnectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKongKonnect(ctx context.Context, body PostV1IntegrationsKongKonnectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKongKonnectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsKongKonnectId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsKongKonnectIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKongKonnectId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKongKonnectIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKubernetes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKubernetesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKubernetesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKubernetesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsKubernetes(ctx context.Context, body PostV1IntegrationsKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsKubernetesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsKubernetesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsKubernetesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsKubernetesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsKubernetesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsPostmanApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsPostmanApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsPostmanApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsPostmanApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsPostmanApiKey(ctx context.Context, body PostV1IntegrationsPostmanApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsPostmanApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsPostmanApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsPostmanApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsPostmanApiKeyId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsPostmanApiKeyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsSlackWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsSlackWebhookRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsSlackWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsSlackWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsSlackWebhook(ctx context.Context, body PostV1IntegrationsSlackWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsSlackWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsSlackWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsSlackWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsSlackWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsSlackWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsTeamsWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsTeamsWebhookRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsTeamsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsTeamsWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsTeamsWebhook(ctx context.Context, body PostV1IntegrationsTeamsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsTeamsWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsTeamsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsTeamsWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsTeamsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsTeamsWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsWebhook(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsWebhookRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsWebhook(ctx context.Context, body PostV1IntegrationsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsWebhookId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsWebhookIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsWiz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsWizRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsWizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsWizRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IntegrationsWiz(ctx context.Context, body PostV1IntegrationsWizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IntegrationsWizRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1IntegrationsWizId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1IntegrationsWizIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IntegrationsWizId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IntegrationsWizIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocation(ctx context.Context, body CreateLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertLocationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertLocation(ctx context.Context, body UpsertLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocation(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocation(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdSchemas(ctx context.Context, id openapi_types.UUID, params *GetV1OrganizationIdSchemasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdSchemasRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdSchemasSchemaId(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdSchemasSchemaIdRequest(c.Server, id, schemaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdServices(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdServicesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApplicationIdRequest generates requests for GetApplicationId
func NewGetApplicationIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApplicationsIdStartScanRequest calls the generic PostApplicationsIdStartScan builder with application/json body
func NewPostApplicationsIdStartScanRequest(server string, id openapi_types.UUID, body PostApplicationsIdStartScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsIdStartScanRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApplicationsIdStartScanRequestWithBody generates requests for PostApplicationsIdStartScan with any type of body
func NewPostApplicationsIdStartScanRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/start-scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApplicationsIdUploadSchemaRequest calls the generic PostApplicationsIdUploadSchema builder with application/json body
func NewPostApplicationsIdUploadSchemaRequest(server string, id openapi_types.UUID, body PostApplicationsIdUploadSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsIdUploadSchemaRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApplicationsIdUploadSchemaRequestWithBody generates requests for PostApplicationsIdUploadSchema with any type of body
func NewPostApplicationsIdUploadSchemaRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/upload-schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCreateApplicationRequest calls the generic PostCreateApplication builder with application/json body
func NewPostCreateApplicationRequest(server string, body PostCreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreateApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCreateApplicationRequestWithBody generates requests for PostCreateApplication with any type of body
func NewPostCreateApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationIdApplicationsRequest generates requests for GetOrganizationIdApplications
func NewGetOrganizationIdApplicationsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationIdApplicationsSearchRequest generates requests for GetOrganizationIdApplicationsSearch
func NewGetOrganizationIdApplicationsSearchRequest(server string, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/%s/applications/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScansIdRequest generates requests for GetScansId
func NewGetScansIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAkamaiRequest generates requests for GetV1IntegrationsAkamai
func NewGetV1IntegrationsAkamaiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/akamai")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsAkamaiRequest calls the generic PostV1IntegrationsAkamai builder with application/json body
func NewPostV1IntegrationsAkamaiRequest(server string, body PostV1IntegrationsAkamaiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsAkamaiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsAkamaiRequestWithBody generates requests for PostV1IntegrationsAkamai with any type of body
func NewPostV1IntegrationsAkamaiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/akamai")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsAkamaiIdRequest generates requests for DeleteV1IntegrationsAkamaiId
func NewDeleteV1IntegrationsAkamaiIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/akamai/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAkamaiIdRequest generates requests for GetV1IntegrationsAkamaiId
func NewGetV1IntegrationsAkamaiIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/akamai/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsApigeeRequest generates requests for GetV1IntegrationsApigee
func NewGetV1IntegrationsApigeeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/apigee")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsApigeeRequest calls the generic PostV1IntegrationsApigee builder with application/json body
func NewPostV1IntegrationsApigeeRequest(server string, body PostV1IntegrationsApigeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsApigeeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsApigeeRequestWithBody generates requests for PostV1IntegrationsApigee with any type of body
func NewPostV1IntegrationsApigeeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/apigee")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsApigeeIdRequest generates requests for DeleteV1IntegrationsApigeeId
func NewDeleteV1IntegrationsApigeeIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/apigee/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsApigeeIdRequest generates requests for GetV1IntegrationsApigeeId
func NewGetV1IntegrationsApigeeIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/apigee/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAwsRequest generates requests for GetV1IntegrationsAws
func NewGetV1IntegrationsAwsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsAwsRequest calls the generic PostV1IntegrationsAws builder with application/json body
func NewPostV1IntegrationsAwsRequest(server string, body PostV1IntegrationsAwsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsAwsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsAwsRequestWithBody generates requests for PostV1IntegrationsAws with any type of body
func NewPostV1IntegrationsAwsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsAwsIdRequest generates requests for DeleteV1IntegrationsAwsId
func NewDeleteV1IntegrationsAwsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/aws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAwsIdRequest generates requests for GetV1IntegrationsAwsId
func NewGetV1IntegrationsAwsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/aws/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAzureRequest generates requests for GetV1IntegrationsAzure
func NewGetV1IntegrationsAzureRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsAzureRequest calls the generic PostV1IntegrationsAzure builder with application/json body
func NewPostV1IntegrationsAzureRequest(server string, body PostV1IntegrationsAzureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsAzureRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsAzureRequestWithBody generates requests for PostV1IntegrationsAzure with any type of body
func NewPostV1IntegrationsAzureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsAzureIdRequest generates requests for DeleteV1IntegrationsAzureId
func NewDeleteV1IntegrationsAzureIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAzureIdRequest generates requests for GetV1IntegrationsAzureId
func NewGetV1IntegrationsAzureIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAzureDevopsRequest generates requests for GetV1IntegrationsAzureDevops
func NewGetV1IntegrationsAzureDevopsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure_devops")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsAzureDevopsRequest calls the generic PostV1IntegrationsAzureDevops builder with application/json body
func NewPostV1IntegrationsAzureDevopsRequest(server string, body PostV1IntegrationsAzureDevopsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsAzureDevopsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsAzureDevopsRequestWithBody generates requests for PostV1IntegrationsAzureDevops with any type of body
func NewPostV1IntegrationsAzureDevopsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure_devops")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsAzureDevopsIdRequest generates requests for DeleteV1IntegrationsAzureDevopsId
func NewDeleteV1IntegrationsAzureDevopsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure_devops/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsAzureDevopsIdRequest generates requests for GetV1IntegrationsAzureDevopsId
func NewGetV1IntegrationsAzureDevopsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/azure_devops/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsBitbucketRepoRequest generates requests for GetV1IntegrationsBitbucketRepo
func NewGetV1IntegrationsBitbucketRepoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/bitbucket_repo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsBitbucketRepoRequest calls the generic PostV1IntegrationsBitbucketRepo builder with application/json body
func NewPostV1IntegrationsBitbucketRepoRequest(server string, body PostV1IntegrationsBitbucketRepoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsBitbucketRepoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsBitbucketRepoRequestWithBody generates requests for PostV1IntegrationsBitbucketRepo with any type of body
func NewPostV1IntegrationsBitbucketRepoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/bitbucket_repo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsBitbucketRepoIdRequest generates requests for DeleteV1IntegrationsBitbucketRepoId
func NewDeleteV1IntegrationsBitbucketRepoIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/bitbucket_repo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsBitbucketRepoIdRequest generates requests for GetV1IntegrationsBitbucketRepoId
func NewGetV1IntegrationsBitbucketRepoIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/bitbucket_repo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsCloudflareRequest generates requests for GetV1IntegrationsCloudflare
func NewGetV1IntegrationsCloudflareRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/cloudflare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsCloudflareRequest calls the generic PostV1IntegrationsCloudflare builder with application/json body
func NewPostV1IntegrationsCloudflareRequest(server string, body PostV1IntegrationsCloudflareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsCloudflareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsCloudflareRequestWithBody generates requests for PostV1IntegrationsCloudflare with any type of body
func NewPostV1IntegrationsCloudflareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/cloudflare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsCloudflareIdRequest generates requests for DeleteV1IntegrationsCloudflareId
func NewDeleteV1IntegrationsCloudflareIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/cloudflare/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsCloudflareIdRequest generates requests for GetV1IntegrationsCloudflareId
func NewGetV1IntegrationsCloudflareIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/cloudflare/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsDiscordWebhookRequest generates requests for GetV1IntegrationsDiscordWebhook
func NewGetV1IntegrationsDiscordWebhookRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/discord_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsDiscordWebhookRequest calls the generic PostV1IntegrationsDiscordWebhook builder with application/json body
func NewPostV1IntegrationsDiscordWebhookRequest(server string, body PostV1IntegrationsDiscordWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsDiscordWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsDiscordWebhookRequestWithBody generates requests for PostV1IntegrationsDiscordWebhook with any type of body
func NewPostV1IntegrationsDiscordWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/discord_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsDiscordWebhookIdRequest generates requests for DeleteV1IntegrationsDiscordWebhookId
func NewDeleteV1IntegrationsDiscordWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/discord_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsDiscordWebhookIdRequest generates requests for GetV1IntegrationsDiscordWebhookId
func NewGetV1IntegrationsDiscordWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/discord_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsEmailRequest generates requests for GetV1IntegrationsEmail
func NewGetV1IntegrationsEmailRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsEmailRequest calls the generic PostV1IntegrationsEmail builder with application/json body
func NewPostV1IntegrationsEmailRequest(server string, body PostV1IntegrationsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsEmailRequestWithBody generates requests for PostV1IntegrationsEmail with any type of body
func NewPostV1IntegrationsEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsEmailIdRequest generates requests for DeleteV1IntegrationsEmailId
func NewDeleteV1IntegrationsEmailIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/email/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsEmailIdRequest generates requests for GetV1IntegrationsEmailId
func NewGetV1IntegrationsEmailIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/email/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGcpRequest generates requests for GetV1IntegrationsGcp
func NewGetV1IntegrationsGcpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsGcpRequest calls the generic PostV1IntegrationsGcp builder with application/json body
func NewPostV1IntegrationsGcpRequest(server string, body PostV1IntegrationsGcpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsGcpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsGcpRequestWithBody generates requests for PostV1IntegrationsGcp with any type of body
func NewPostV1IntegrationsGcpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsGcpIdRequest generates requests for DeleteV1IntegrationsGcpId
func NewDeleteV1IntegrationsGcpIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gcp/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGcpIdRequest generates requests for GetV1IntegrationsGcpId
func NewGetV1IntegrationsGcpIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gcp/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGithubApiKeyRequest generates requests for GetV1IntegrationsGithubApiKey
func NewGetV1IntegrationsGithubApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/github_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsGithubApiKeyRequest calls the generic PostV1IntegrationsGithubApiKey builder with application/json body
func NewPostV1IntegrationsGithubApiKeyRequest(server string, body PostV1IntegrationsGithubApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsGithubApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsGithubApiKeyRequestWithBody generates requests for PostV1IntegrationsGithubApiKey with any type of body
func NewPostV1IntegrationsGithubApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/github_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsGithubApiKeyIdRequest generates requests for DeleteV1IntegrationsGithubApiKeyId
func NewDeleteV1IntegrationsGithubApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/github_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGithubApiKeyIdRequest generates requests for GetV1IntegrationsGithubApiKeyId
func NewGetV1IntegrationsGithubApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/github_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGitlabApiKeyRequest generates requests for GetV1IntegrationsGitlabApiKey
func NewGetV1IntegrationsGitlabApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gitlab_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsGitlabApiKeyRequest calls the generic PostV1IntegrationsGitlabApiKey builder with application/json body
func NewPostV1IntegrationsGitlabApiKeyRequest(server string, body PostV1IntegrationsGitlabApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsGitlabApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsGitlabApiKeyRequestWithBody generates requests for PostV1IntegrationsGitlabApiKey with any type of body
func NewPostV1IntegrationsGitlabApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gitlab_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsGitlabApiKeyIdRequest generates requests for DeleteV1IntegrationsGitlabApiKeyId
func NewDeleteV1IntegrationsGitlabApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gitlab_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsGitlabApiKeyIdRequest generates requests for GetV1IntegrationsGitlabApiKeyId
func NewGetV1IntegrationsGitlabApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/gitlab_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsJiraRequest generates requests for GetV1IntegrationsJira
func NewGetV1IntegrationsJiraRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/jira")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsJiraRequest calls the generic PostV1IntegrationsJira builder with application/json body
func NewPostV1IntegrationsJiraRequest(server string, body PostV1IntegrationsJiraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsJiraRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsJiraRequestWithBody generates requests for PostV1IntegrationsJira with any type of body
func NewPostV1IntegrationsJiraRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/jira")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsJiraIdRequest generates requests for DeleteV1IntegrationsJiraId
func NewDeleteV1IntegrationsJiraIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/jira/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsJiraIdRequest generates requests for GetV1IntegrationsJiraId
func NewGetV1IntegrationsJiraIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/jira/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKongGatewayRequest generates requests for GetV1IntegrationsKongGateway
func NewGetV1IntegrationsKongGatewayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsKongGatewayRequest calls the generic PostV1IntegrationsKongGateway builder with application/json body
func NewPostV1IntegrationsKongGatewayRequest(server string, body PostV1IntegrationsKongGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsKongGatewayRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsKongGatewayRequestWithBody generates requests for PostV1IntegrationsKongGateway with any type of body
func NewPostV1IntegrationsKongGatewayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_gateway")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsKongGatewayIdRequest generates requests for DeleteV1IntegrationsKongGatewayId
func NewDeleteV1IntegrationsKongGatewayIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_gateway/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKongGatewayIdRequest generates requests for GetV1IntegrationsKongGatewayId
func NewGetV1IntegrationsKongGatewayIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_gateway/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKongKonnectRequest generates requests for GetV1IntegrationsKongKonnect
func NewGetV1IntegrationsKongKonnectRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_konnect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsKongKonnectRequest calls the generic PostV1IntegrationsKongKonnect builder with application/json body
func NewPostV1IntegrationsKongKonnectRequest(server string, body PostV1IntegrationsKongKonnectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsKongKonnectRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsKongKonnectRequestWithBody generates requests for PostV1IntegrationsKongKonnect with any type of body
func NewPostV1IntegrationsKongKonnectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_konnect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsKongKonnectIdRequest generates requests for DeleteV1IntegrationsKongKonnectId
func NewDeleteV1IntegrationsKongKonnectIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_konnect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKongKonnectIdRequest generates requests for GetV1IntegrationsKongKonnectId
func NewGetV1IntegrationsKongKonnectIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kong_konnect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKubernetesRequest generates requests for GetV1IntegrationsKubernetes
func NewGetV1IntegrationsKubernetesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kubernetes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsKubernetesRequest calls the generic PostV1IntegrationsKubernetes builder with application/json body
func NewPostV1IntegrationsKubernetesRequest(server string, body PostV1IntegrationsKubernetesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsKubernetesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsKubernetesRequestWithBody generates requests for PostV1IntegrationsKubernetes with any type of body
func NewPostV1IntegrationsKubernetesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kubernetes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsKubernetesIdRequest generates requests for DeleteV1IntegrationsKubernetesId
func NewDeleteV1IntegrationsKubernetesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kubernetes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsKubernetesIdRequest generates requests for GetV1IntegrationsKubernetesId
func NewGetV1IntegrationsKubernetesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/kubernetes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsPostmanApiKeyRequest generates requests for GetV1IntegrationsPostmanApiKey
func NewGetV1IntegrationsPostmanApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/postman_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsPostmanApiKeyRequest calls the generic PostV1IntegrationsPostmanApiKey builder with application/json body
func NewPostV1IntegrationsPostmanApiKeyRequest(server string, body PostV1IntegrationsPostmanApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsPostmanApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsPostmanApiKeyRequestWithBody generates requests for PostV1IntegrationsPostmanApiKey with any type of body
func NewPostV1IntegrationsPostmanApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/postman_api_key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsPostmanApiKeyIdRequest generates requests for DeleteV1IntegrationsPostmanApiKeyId
func NewDeleteV1IntegrationsPostmanApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/postman_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsPostmanApiKeyIdRequest generates requests for GetV1IntegrationsPostmanApiKeyId
func NewGetV1IntegrationsPostmanApiKeyIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/postman_api_key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsSlackWebhookRequest generates requests for GetV1IntegrationsSlackWebhook
func NewGetV1IntegrationsSlackWebhookRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/slack_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsSlackWebhookRequest calls the generic PostV1IntegrationsSlackWebhook builder with application/json body
func NewPostV1IntegrationsSlackWebhookRequest(server string, body PostV1IntegrationsSlackWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsSlackWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsSlackWebhookRequestWithBody generates requests for PostV1IntegrationsSlackWebhook with any type of body
func NewPostV1IntegrationsSlackWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/slack_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsSlackWebhookIdRequest generates requests for DeleteV1IntegrationsSlackWebhookId
func NewDeleteV1IntegrationsSlackWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/slack_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsSlackWebhookIdRequest generates requests for GetV1IntegrationsSlackWebhookId
func NewGetV1IntegrationsSlackWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/slack_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsTeamsWebhookRequest generates requests for GetV1IntegrationsTeamsWebhook
func NewGetV1IntegrationsTeamsWebhookRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/teams_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsTeamsWebhookRequest calls the generic PostV1IntegrationsTeamsWebhook builder with application/json body
func NewPostV1IntegrationsTeamsWebhookRequest(server string, body PostV1IntegrationsTeamsWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsTeamsWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsTeamsWebhookRequestWithBody generates requests for PostV1IntegrationsTeamsWebhook with any type of body
func NewPostV1IntegrationsTeamsWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/teams_webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsTeamsWebhookIdRequest generates requests for DeleteV1IntegrationsTeamsWebhookId
func NewDeleteV1IntegrationsTeamsWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/teams_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsTeamsWebhookIdRequest generates requests for GetV1IntegrationsTeamsWebhookId
func NewGetV1IntegrationsTeamsWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/teams_webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsWebhookRequest generates requests for GetV1IntegrationsWebhook
func NewGetV1IntegrationsWebhookRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsWebhookRequest calls the generic PostV1IntegrationsWebhook builder with application/json body
func NewPostV1IntegrationsWebhookRequest(server string, body PostV1IntegrationsWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsWebhookRequestWithBody generates requests for PostV1IntegrationsWebhook with any type of body
func NewPostV1IntegrationsWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsWebhookIdRequest generates requests for DeleteV1IntegrationsWebhookId
func NewDeleteV1IntegrationsWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsWebhookIdRequest generates requests for GetV1IntegrationsWebhookId
func NewGetV1IntegrationsWebhookIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/webhook/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsWizRequest generates requests for GetV1IntegrationsWiz
func NewGetV1IntegrationsWizRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/wiz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IntegrationsWizRequest calls the generic PostV1IntegrationsWiz builder with application/json body
func NewPostV1IntegrationsWizRequest(server string, body PostV1IntegrationsWizJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IntegrationsWizRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IntegrationsWizRequestWithBody generates requests for PostV1IntegrationsWiz with any type of body
func NewPostV1IntegrationsWizRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/wiz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1IntegrationsWizIdRequest generates requests for DeleteV1IntegrationsWizId
func NewDeleteV1IntegrationsWizIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/wiz/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1IntegrationsWizIdRequest generates requests for GetV1IntegrationsWizId
func NewGetV1IntegrationsWizIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/integrations/wiz/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLocationsRequest generates requests for ListLocations
func NewListLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLocationRequest calls the generic CreateLocation builder with application/json body
func NewCreateLocationRequest(server string, body CreateLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateLocationRequestWithBody generates requests for CreateLocation with any type of body
func NewCreateLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertLocationRequest calls the generic UpsertLocation builder with application/json body
func NewUpsertLocationRequest(server string, body UpsertLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertLocationRequestWithBody generates requests for UpsertLocation with any type of body
func NewUpsertLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocationRequest generates requests for DeleteLocation
func NewDeleteLocationRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationRequest generates requests for GetLocation
func NewGetLocationRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationIdSchemasRequest generates requests for GetV1OrganizationIdSchemas
func NewGetV1OrganizationIdSchemasRequest(server string, id openapi_types.UUID, params *GetV1OrganizationIdSchemasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationIdSchemasSchemaIdRequest generates requests for GetV1OrganizationIdSchemasSchemaId
func NewGetV1OrganizationIdSchemasSchemaIdRequest(server string, id openapi_types.UUID, schemaId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schemaId", runtime.ParamLocationPath, schemaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/schemas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationIdServicesRequest generates requests for GetV1OrganizationIdServices
func NewGetV1OrganizationIdServicesRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApplicationIdWithResponse request
	GetApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error)

	// PostApplicationsIdStartScanWithBodyWithResponse request with any body
	PostApplicationsIdStartScanWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error)

	PostApplicationsIdStartScanWithResponse(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error)

	// PostApplicationsIdUploadSchemaWithBodyWithResponse request with any body
	PostApplicationsIdUploadSchemaWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error)

	PostApplicationsIdUploadSchemaWithResponse(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error)

	// PostCreateApplicationWithBodyWithResponse request with any body
	PostCreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error)

	PostCreateApplicationWithResponse(ctx context.Context, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error)

	// GetOrganizationIdApplicationsWithResponse request
	GetOrganizationIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsResponse, error)

	// GetOrganizationIdApplicationsSearchWithResponse request
	GetOrganizationIdApplicationsSearchWithResponse(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsSearchResponse, error)

	// GetScansIdWithResponse request
	GetScansIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetScansIdResponse, error)

	// GetV1IntegrationsAkamaiWithResponse request
	GetV1IntegrationsAkamaiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAkamaiResponse, error)

	// PostV1IntegrationsAkamaiWithBodyWithResponse request with any body
	PostV1IntegrationsAkamaiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAkamaiResponse, error)

	PostV1IntegrationsAkamaiWithResponse(ctx context.Context, body PostV1IntegrationsAkamaiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAkamaiResponse, error)

	// DeleteV1IntegrationsAkamaiIdWithResponse request
	DeleteV1IntegrationsAkamaiIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAkamaiIdResponse, error)

	// GetV1IntegrationsAkamaiIdWithResponse request
	GetV1IntegrationsAkamaiIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAkamaiIdResponse, error)

	// GetV1IntegrationsApigeeWithResponse request
	GetV1IntegrationsApigeeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsApigeeResponse, error)

	// PostV1IntegrationsApigeeWithBodyWithResponse request with any body
	PostV1IntegrationsApigeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsApigeeResponse, error)

	PostV1IntegrationsApigeeWithResponse(ctx context.Context, body PostV1IntegrationsApigeeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsApigeeResponse, error)

	// DeleteV1IntegrationsApigeeIdWithResponse request
	DeleteV1IntegrationsApigeeIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsApigeeIdResponse, error)

	// GetV1IntegrationsApigeeIdWithResponse request
	GetV1IntegrationsApigeeIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsApigeeIdResponse, error)

	// GetV1IntegrationsAwsWithResponse request
	GetV1IntegrationsAwsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAwsResponse, error)

	// PostV1IntegrationsAwsWithBodyWithResponse request with any body
	PostV1IntegrationsAwsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAwsResponse, error)

	PostV1IntegrationsAwsWithResponse(ctx context.Context, body PostV1IntegrationsAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAwsResponse, error)

	// DeleteV1IntegrationsAwsIdWithResponse request
	DeleteV1IntegrationsAwsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAwsIdResponse, error)

	// GetV1IntegrationsAwsIdWithResponse request
	GetV1IntegrationsAwsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAwsIdResponse, error)

	// GetV1IntegrationsAzureWithResponse request
	GetV1IntegrationsAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureResponse, error)

	// PostV1IntegrationsAzureWithBodyWithResponse request with any body
	PostV1IntegrationsAzureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureResponse, error)

	PostV1IntegrationsAzureWithResponse(ctx context.Context, body PostV1IntegrationsAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureResponse, error)

	// DeleteV1IntegrationsAzureIdWithResponse request
	DeleteV1IntegrationsAzureIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAzureIdResponse, error)

	// GetV1IntegrationsAzureIdWithResponse request
	GetV1IntegrationsAzureIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureIdResponse, error)

	// GetV1IntegrationsAzureDevopsWithResponse request
	GetV1IntegrationsAzureDevopsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureDevopsResponse, error)

	// PostV1IntegrationsAzureDevopsWithBodyWithResponse request with any body
	PostV1IntegrationsAzureDevopsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureDevopsResponse, error)

	PostV1IntegrationsAzureDevopsWithResponse(ctx context.Context, body PostV1IntegrationsAzureDevopsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureDevopsResponse, error)

	// DeleteV1IntegrationsAzureDevopsIdWithResponse request
	DeleteV1IntegrationsAzureDevopsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAzureDevopsIdResponse, error)

	// GetV1IntegrationsAzureDevopsIdWithResponse request
	GetV1IntegrationsAzureDevopsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureDevopsIdResponse, error)

	// GetV1IntegrationsBitbucketRepoWithResponse request
	GetV1IntegrationsBitbucketRepoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsBitbucketRepoResponse, error)

	// PostV1IntegrationsBitbucketRepoWithBodyWithResponse request with any body
	PostV1IntegrationsBitbucketRepoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsBitbucketRepoResponse, error)

	PostV1IntegrationsBitbucketRepoWithResponse(ctx context.Context, body PostV1IntegrationsBitbucketRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsBitbucketRepoResponse, error)

	// DeleteV1IntegrationsBitbucketRepoIdWithResponse request
	DeleteV1IntegrationsBitbucketRepoIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsBitbucketRepoIdResponse, error)

	// GetV1IntegrationsBitbucketRepoIdWithResponse request
	GetV1IntegrationsBitbucketRepoIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsBitbucketRepoIdResponse, error)

	// GetV1IntegrationsCloudflareWithResponse request
	GetV1IntegrationsCloudflareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsCloudflareResponse, error)

	// PostV1IntegrationsCloudflareWithBodyWithResponse request with any body
	PostV1IntegrationsCloudflareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsCloudflareResponse, error)

	PostV1IntegrationsCloudflareWithResponse(ctx context.Context, body PostV1IntegrationsCloudflareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsCloudflareResponse, error)

	// DeleteV1IntegrationsCloudflareIdWithResponse request
	DeleteV1IntegrationsCloudflareIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsCloudflareIdResponse, error)

	// GetV1IntegrationsCloudflareIdWithResponse request
	GetV1IntegrationsCloudflareIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsCloudflareIdResponse, error)

	// GetV1IntegrationsDiscordWebhookWithResponse request
	GetV1IntegrationsDiscordWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsDiscordWebhookResponse, error)

	// PostV1IntegrationsDiscordWebhookWithBodyWithResponse request with any body
	PostV1IntegrationsDiscordWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsDiscordWebhookResponse, error)

	PostV1IntegrationsDiscordWebhookWithResponse(ctx context.Context, body PostV1IntegrationsDiscordWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsDiscordWebhookResponse, error)

	// DeleteV1IntegrationsDiscordWebhookIdWithResponse request
	DeleteV1IntegrationsDiscordWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsDiscordWebhookIdResponse, error)

	// GetV1IntegrationsDiscordWebhookIdWithResponse request
	GetV1IntegrationsDiscordWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsDiscordWebhookIdResponse, error)

	// GetV1IntegrationsEmailWithResponse request
	GetV1IntegrationsEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsEmailResponse, error)

	// PostV1IntegrationsEmailWithBodyWithResponse request with any body
	PostV1IntegrationsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsEmailResponse, error)

	PostV1IntegrationsEmailWithResponse(ctx context.Context, body PostV1IntegrationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsEmailResponse, error)

	// DeleteV1IntegrationsEmailIdWithResponse request
	DeleteV1IntegrationsEmailIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsEmailIdResponse, error)

	// GetV1IntegrationsEmailIdWithResponse request
	GetV1IntegrationsEmailIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsEmailIdResponse, error)

	// GetV1IntegrationsGcpWithResponse request
	GetV1IntegrationsGcpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGcpResponse, error)

	// PostV1IntegrationsGcpWithBodyWithResponse request with any body
	PostV1IntegrationsGcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGcpResponse, error)

	PostV1IntegrationsGcpWithResponse(ctx context.Context, body PostV1IntegrationsGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGcpResponse, error)

	// DeleteV1IntegrationsGcpIdWithResponse request
	DeleteV1IntegrationsGcpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGcpIdResponse, error)

	// GetV1IntegrationsGcpIdWithResponse request
	GetV1IntegrationsGcpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGcpIdResponse, error)

	// GetV1IntegrationsGithubApiKeyWithResponse request
	GetV1IntegrationsGithubApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGithubApiKeyResponse, error)

	// PostV1IntegrationsGithubApiKeyWithBodyWithResponse request with any body
	PostV1IntegrationsGithubApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGithubApiKeyResponse, error)

	PostV1IntegrationsGithubApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsGithubApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGithubApiKeyResponse, error)

	// DeleteV1IntegrationsGithubApiKeyIdWithResponse request
	DeleteV1IntegrationsGithubApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGithubApiKeyIdResponse, error)

	// GetV1IntegrationsGithubApiKeyIdWithResponse request
	GetV1IntegrationsGithubApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGithubApiKeyIdResponse, error)

	// GetV1IntegrationsGitlabApiKeyWithResponse request
	GetV1IntegrationsGitlabApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGitlabApiKeyResponse, error)

	// PostV1IntegrationsGitlabApiKeyWithBodyWithResponse request with any body
	PostV1IntegrationsGitlabApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGitlabApiKeyResponse, error)

	PostV1IntegrationsGitlabApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsGitlabApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGitlabApiKeyResponse, error)

	// DeleteV1IntegrationsGitlabApiKeyIdWithResponse request
	DeleteV1IntegrationsGitlabApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGitlabApiKeyIdResponse, error)

	// GetV1IntegrationsGitlabApiKeyIdWithResponse request
	GetV1IntegrationsGitlabApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGitlabApiKeyIdResponse, error)

	// GetV1IntegrationsJiraWithResponse request
	GetV1IntegrationsJiraWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsJiraResponse, error)

	// PostV1IntegrationsJiraWithBodyWithResponse request with any body
	PostV1IntegrationsJiraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsJiraResponse, error)

	PostV1IntegrationsJiraWithResponse(ctx context.Context, body PostV1IntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsJiraResponse, error)

	// DeleteV1IntegrationsJiraIdWithResponse request
	DeleteV1IntegrationsJiraIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsJiraIdResponse, error)

	// GetV1IntegrationsJiraIdWithResponse request
	GetV1IntegrationsJiraIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsJiraIdResponse, error)

	// GetV1IntegrationsKongGatewayWithResponse request
	GetV1IntegrationsKongGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongGatewayResponse, error)

	// PostV1IntegrationsKongGatewayWithBodyWithResponse request with any body
	PostV1IntegrationsKongGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongGatewayResponse, error)

	PostV1IntegrationsKongGatewayWithResponse(ctx context.Context, body PostV1IntegrationsKongGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongGatewayResponse, error)

	// DeleteV1IntegrationsKongGatewayIdWithResponse request
	DeleteV1IntegrationsKongGatewayIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKongGatewayIdResponse, error)

	// GetV1IntegrationsKongGatewayIdWithResponse request
	GetV1IntegrationsKongGatewayIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongGatewayIdResponse, error)

	// GetV1IntegrationsKongKonnectWithResponse request
	GetV1IntegrationsKongKonnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongKonnectResponse, error)

	// PostV1IntegrationsKongKonnectWithBodyWithResponse request with any body
	PostV1IntegrationsKongKonnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongKonnectResponse, error)

	PostV1IntegrationsKongKonnectWithResponse(ctx context.Context, body PostV1IntegrationsKongKonnectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongKonnectResponse, error)

	// DeleteV1IntegrationsKongKonnectIdWithResponse request
	DeleteV1IntegrationsKongKonnectIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKongKonnectIdResponse, error)

	// GetV1IntegrationsKongKonnectIdWithResponse request
	GetV1IntegrationsKongKonnectIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongKonnectIdResponse, error)

	// GetV1IntegrationsKubernetesWithResponse request
	GetV1IntegrationsKubernetesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKubernetesResponse, error)

	// PostV1IntegrationsKubernetesWithBodyWithResponse request with any body
	PostV1IntegrationsKubernetesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKubernetesResponse, error)

	PostV1IntegrationsKubernetesWithResponse(ctx context.Context, body PostV1IntegrationsKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKubernetesResponse, error)

	// DeleteV1IntegrationsKubernetesIdWithResponse request
	DeleteV1IntegrationsKubernetesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKubernetesIdResponse, error)

	// GetV1IntegrationsKubernetesIdWithResponse request
	GetV1IntegrationsKubernetesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKubernetesIdResponse, error)

	// GetV1IntegrationsPostmanApiKeyWithResponse request
	GetV1IntegrationsPostmanApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsPostmanApiKeyResponse, error)

	// PostV1IntegrationsPostmanApiKeyWithBodyWithResponse request with any body
	PostV1IntegrationsPostmanApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsPostmanApiKeyResponse, error)

	PostV1IntegrationsPostmanApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsPostmanApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsPostmanApiKeyResponse, error)

	// DeleteV1IntegrationsPostmanApiKeyIdWithResponse request
	DeleteV1IntegrationsPostmanApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsPostmanApiKeyIdResponse, error)

	// GetV1IntegrationsPostmanApiKeyIdWithResponse request
	GetV1IntegrationsPostmanApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsPostmanApiKeyIdResponse, error)

	// GetV1IntegrationsSlackWebhookWithResponse request
	GetV1IntegrationsSlackWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsSlackWebhookResponse, error)

	// PostV1IntegrationsSlackWebhookWithBodyWithResponse request with any body
	PostV1IntegrationsSlackWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsSlackWebhookResponse, error)

	PostV1IntegrationsSlackWebhookWithResponse(ctx context.Context, body PostV1IntegrationsSlackWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsSlackWebhookResponse, error)

	// DeleteV1IntegrationsSlackWebhookIdWithResponse request
	DeleteV1IntegrationsSlackWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsSlackWebhookIdResponse, error)

	// GetV1IntegrationsSlackWebhookIdWithResponse request
	GetV1IntegrationsSlackWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsSlackWebhookIdResponse, error)

	// GetV1IntegrationsTeamsWebhookWithResponse request
	GetV1IntegrationsTeamsWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsTeamsWebhookResponse, error)

	// PostV1IntegrationsTeamsWebhookWithBodyWithResponse request with any body
	PostV1IntegrationsTeamsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsTeamsWebhookResponse, error)

	PostV1IntegrationsTeamsWebhookWithResponse(ctx context.Context, body PostV1IntegrationsTeamsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsTeamsWebhookResponse, error)

	// DeleteV1IntegrationsTeamsWebhookIdWithResponse request
	DeleteV1IntegrationsTeamsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsTeamsWebhookIdResponse, error)

	// GetV1IntegrationsTeamsWebhookIdWithResponse request
	GetV1IntegrationsTeamsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsTeamsWebhookIdResponse, error)

	// GetV1IntegrationsWebhookWithResponse request
	GetV1IntegrationsWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWebhookResponse, error)

	// PostV1IntegrationsWebhookWithBodyWithResponse request with any body
	PostV1IntegrationsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWebhookResponse, error)

	PostV1IntegrationsWebhookWithResponse(ctx context.Context, body PostV1IntegrationsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWebhookResponse, error)

	// DeleteV1IntegrationsWebhookIdWithResponse request
	DeleteV1IntegrationsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsWebhookIdResponse, error)

	// GetV1IntegrationsWebhookIdWithResponse request
	GetV1IntegrationsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWebhookIdResponse, error)

	// GetV1IntegrationsWizWithResponse request
	GetV1IntegrationsWizWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWizResponse, error)

	// PostV1IntegrationsWizWithBodyWithResponse request with any body
	PostV1IntegrationsWizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWizResponse, error)

	PostV1IntegrationsWizWithResponse(ctx context.Context, body PostV1IntegrationsWizJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWizResponse, error)

	// DeleteV1IntegrationsWizIdWithResponse request
	DeleteV1IntegrationsWizIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsWizIdResponse, error)

	// GetV1IntegrationsWizIdWithResponse request
	GetV1IntegrationsWizIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWizIdResponse, error)

	// ListLocationsWithResponse request
	ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error)

	// CreateLocationWithBodyWithResponse request with any body
	CreateLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocationResponse, error)

	CreateLocationWithResponse(ctx context.Context, body CreateLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocationResponse, error)

	// UpsertLocationWithBodyWithResponse request with any body
	UpsertLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertLocationResponse, error)

	UpsertLocationWithResponse(ctx context.Context, body UpsertLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertLocationResponse, error)

	// DeleteLocationWithResponse request
	DeleteLocationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLocationResponse, error)

	// GetLocationWithResponse request
	GetLocationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLocationResponse, error)

	// GetV1OrganizationIdSchemasWithResponse request
	GetV1OrganizationIdSchemasWithResponse(ctx context.Context, id openapi_types.UUID, params *GetV1OrganizationIdSchemasParams, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasResponse, error)

	// GetV1OrganizationIdSchemasSchemaIdWithResponse request
	GetV1OrganizationIdSchemasSchemaIdWithResponse(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasSchemaIdResponse, error)

	// GetV1OrganizationIdServicesWithResponse request
	GetV1OrganizationIdServicesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdServicesResponse, error)
}

type GetApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
		CreatedAt                  time.Time          `json:"createdAt"`
		Cron                       *string            `json:"cron"`
		HasCI                      bool               `json:"hasCI"`
		Id                         openapi_types.UUID `json:"id"`
		LastSuccessfulScan         *struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
		} `json:"lastSuccessfulScan"`
		Name  string `json:"name"`
		Scans []struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
			Status GetApplicationId200ScansStatus `json:"status"`
		} `json:"scans"`
		Service struct {
			Tags []struct {
				Color string `json:"color"`
				Name  string `json:"name"`
			} `json:"tags"`
			Url string `json:"url"`
		} `json:"service"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}
type GetApplicationId200ScansStatus string

// Status returns HTTPResponse.Status
func (r GetApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicationsIdStartScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CompletionRatio     float32                              `json:"completionRatio"`
		CreatedAt           time.Time                            `json:"createdAt"`
		CreatedSince        float32                              `json:"createdSince"`
		Duration            *float32                             `json:"duration"`
		Id                  openapi_types.UUID                   `json:"id"`
		ReadonlyAccessToken string                               `json:"readonlyAccessToken"`
		Status              PostApplicationsIdStartScan200Status `json:"status"`
	}
	JSON400 *struct {
		Error  string `json:"error"`
		Events *[]struct {
			Logline  string                                        `json:"logline"`
			Severity *PostApplicationsIdStartScan400EventsSeverity `json:"severity"`
		} `json:"events,omitempty"`
		Message string `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}
type PostApplicationsIdStartScan200Status string
type PostApplicationsIdStartScan400EventsSeverity string

// Status returns HTTPResponse.Status
func (r PostApplicationsIdStartScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationsIdStartScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicationsIdUploadSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id openapi_types.UUID `json:"id"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApplicationsIdUploadSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationsIdUploadSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Href     string             `json:"href"`
		Id       openapi_types.UUID `json:"id"`
		LastScan struct {
			ScanId openapi_types.UUID `json:"scanId"`
		} `json:"lastScan"`
		Name string `json:"name"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationIdApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
		CreatedAt                  time.Time          `json:"createdAt"`
		Cron                       *string            `json:"cron"`
		HasCI                      bool               `json:"hasCI"`
		Id                         openapi_types.UUID `json:"id"`
		LastSuccessfulScan         *struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
		} `json:"lastSuccessfulScan"`
		Name  string `json:"name"`
		Scans []struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
			Status GetOrganizationIdApplications200ScansStatus `json:"status"`
		} `json:"scans"`
		Service struct {
			Tags []struct {
				Color string `json:"color"`
				Name  string `json:"name"`
			} `json:"tags"`
			Url string `json:"url"`
		} `json:"service"`
	}
}
type GetOrganizationIdApplications200ScansStatus string

// Status returns HTTPResponse.Status
func (r GetOrganizationIdApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationIdApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationIdApplicationsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cursor *string `json:"cursor"`
		Data   []struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			Name                       string             `json:"name"`
			Service                    struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationIdApplicationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationIdApplicationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Application struct {
			ActiveSchema struct {
				ApplicationId openapi_types.UUID `json:"applicationId"`
				CreatedAt     time.Time          `json:"createdAt"`
				Id            openapi_types.UUID `json:"id"`
			} `json:"activeSchema"`
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			Name      string             `json:"name"`
			Service   struct {
				Framework string `json:"framework"`
			} `json:"service"`
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"application"`
		CommitHash      *string `json:"commitHash"`
		CompletionRatio float32 `json:"completionRatio"`
		Configuration   struct {
			AuthenticationUsers *[]struct {
				HeaderName  string `json:"headerName"`
				HeaderValue string `json:"headerValue"`
				Name        string `json:"name"`
			} `json:"authenticationUsers"`
			Content               *interface{} `json:"content"`
			CreatedAt             time.Time    `json:"createdAt"`
			IsAuthenticationValid bool         `json:"isAuthenticationValid"`
			IsConfigurationValid  bool         `json:"isConfigurationValid"`
			ReadWrite             bool         `json:"readWrite"`
			UpdatedAt             time.Time    `json:"updatedAt"`
		} `json:"configuration"`
		CreatedAt     time.Time          `json:"createdAt"`
		Id            openapi_types.UUID `json:"id"`
		SecurityTests []struct {
			Alerts []struct {
				Context   string `json:"context"`
				Exchanges []struct {
					Curl string `json:"curl"`
				} `json:"exchanges"`
				Id       openapi_types.UUID                       `json:"id"`
				Path     []string                                 `json:"path"`
				Risks    map[string]*interface{}                  `json:"risks"`
				Severity GetScansId200SecurityTestsAlertsSeverity `json:"severity"`
			} `json:"alerts"`
			Category   string `json:"category"`
			Compliance []struct {
				Name  string `json:"name"`
				Value string `json:"value"`
			} `json:"compliance"`
			Description     string                             `json:"description"`
			FailureName     string                             `json:"failureName"`
			Remediation     string                             `json:"remediation"`
			SecurityTestUid string                             `json:"securityTestUid"`
			Severity        GetScansId200SecurityTestsSeverity `json:"severity"`
		} `json:"securityTests"`
		Status GetScansId200Status `json:"status"`
	}
}
type GetScansId200SecurityTestsAlertsSeverity string
type GetScansId200SecurityTestsSeverity string
type GetScansId200Status string

// Status returns HTTPResponse.Status
func (r GetScansIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAkamaiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID             `json:"id"`
		Kind       GetV1IntegrationsAkamai200Kind `json:"kind"`
		LocationId *openapi_types.UUID            `json:"locationId"`
		Name       string                         `json:"name"`
		Parameters struct {
			AccessToken  string `json:"access_token"`
			ClientSecret string `json:"client_secret"`
			ClientToken  string `json:"client_token"`
			Host         string `json:"host"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsAkamai200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAkamaiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAkamaiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsAkamaiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID              `json:"id"`
		Kind       PostV1IntegrationsAkamai200Kind `json:"kind"`
		LocationId *openapi_types.UUID             `json:"locationId"`
		Name       string                          `json:"name"`
		Parameters struct {
			AccessToken  string `json:"access_token"`
			ClientSecret string `json:"client_secret"`
			ClientToken  string `json:"client_token"`
			Host         string `json:"host"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsAkamai200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsAkamaiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsAkamaiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsAkamaiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsAkamaiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsAkamaiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAkamaiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID               `json:"id"`
		Kind       GetV1IntegrationsAkamaiId200Kind `json:"kind"`
		LocationId *openapi_types.UUID              `json:"locationId"`
		Name       string                           `json:"name"`
		Parameters struct {
			AccessToken  string `json:"access_token"`
			ClientSecret string `json:"client_secret"`
			ClientToken  string `json:"client_token"`
			Host         string `json:"host"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsAkamaiId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAkamaiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAkamaiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsApigeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID             `json:"id"`
		Kind       GetV1IntegrationsApigee200Kind `json:"kind"`
		LocationId *openapi_types.UUID            `json:"locationId"`
		Name       string                         `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsApigee200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsApigeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsApigeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsApigeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID              `json:"id"`
		Kind       PostV1IntegrationsApigee200Kind `json:"kind"`
		LocationId *openapi_types.UUID             `json:"locationId"`
		Name       string                          `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsApigee200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsApigeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsApigeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsApigeeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsApigeeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsApigeeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsApigeeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID               `json:"id"`
		Kind       GetV1IntegrationsApigeeId200Kind `json:"kind"`
		LocationId *openapi_types.UUID              `json:"locationId"`
		Name       string                           `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsApigeeId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsApigeeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsApigeeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAwsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID          `json:"id"`
		Kind       GetV1IntegrationsAws200Kind `json:"kind"`
		LocationId *openapi_types.UUID         `json:"locationId"`
		Name       string                      `json:"name"`
		Parameters struct {
			PrivKey string `json:"priv_key"`
			PubKey  string `json:"pub_key"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsAws200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAwsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAwsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsAwsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID           `json:"id"`
		Kind       PostV1IntegrationsAws200Kind `json:"kind"`
		LocationId *openapi_types.UUID          `json:"locationId"`
		Name       string                       `json:"name"`
		Parameters struct {
			PrivKey string `json:"priv_key"`
			PubKey  string `json:"pub_key"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsAws200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsAwsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsAwsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsAwsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsAwsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsAwsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAwsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       GetV1IntegrationsAwsId200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters struct {
			PrivKey string `json:"priv_key"`
			PubKey  string `json:"pub_key"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsAwsId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAwsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAwsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       GetV1IntegrationsAzure200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters struct {
			ClientId       string  `json:"client_id"`
			ClientSecret   string  `json:"client_secret"`
			SubscriptionId *string `json:"subscription_id,omitempty"`
			TenantId       string  `json:"tenant_id"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsAzure200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID             `json:"id"`
		Kind       PostV1IntegrationsAzure200Kind `json:"kind"`
		LocationId *openapi_types.UUID            `json:"locationId"`
		Name       string                         `json:"name"`
		Parameters struct {
			ClientId       string  `json:"client_id"`
			ClientSecret   string  `json:"client_secret"`
			SubscriptionId *string `json:"subscription_id,omitempty"`
			TenantId       string  `json:"tenant_id"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsAzure200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsAzureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsAzureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsAzureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAzureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID              `json:"id"`
		Kind       GetV1IntegrationsAzureId200Kind `json:"kind"`
		LocationId *openapi_types.UUID             `json:"locationId"`
		Name       string                          `json:"name"`
		Parameters struct {
			ClientId       string  `json:"client_id"`
			ClientSecret   string  `json:"client_secret"`
			SubscriptionId *string `json:"subscription_id,omitempty"`
			TenantId       string  `json:"tenant_id"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsAzureId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAzureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAzureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAzureDevopsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                  `json:"id"`
		Kind       GetV1IntegrationsAzureDevops200Kind `json:"kind"`
		LocationId *openapi_types.UUID                 `json:"locationId"`
		Name       string                              `json:"name"`
		Parameters struct {
			ApiKey      string `json:"api_key"`
			InstanceUrl string `json:"instance_url"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsAzureDevops200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAzureDevopsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAzureDevopsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsAzureDevopsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       PostV1IntegrationsAzureDevops200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			ApiKey      string `json:"api_key"`
			InstanceUrl string `json:"instance_url"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsAzureDevops200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsAzureDevopsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsAzureDevopsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsAzureDevopsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsAzureDevopsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsAzureDevopsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsAzureDevopsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       GetV1IntegrationsAzureDevopsId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			ApiKey      string `json:"api_key"`
			InstanceUrl string `json:"instance_url"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsAzureDevopsId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsAzureDevopsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsAzureDevopsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsBitbucketRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       GetV1IntegrationsBitbucketRepo200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			ApiKey         string  `json:"api_key"`
			InstanceUrl    *string `json:"instance_url,omitempty"`
			RepositoryName string  `json:"repository_name"`
			Username       *string `json:"username,omitempty"`
			WorkspaceName  string  `json:"workspace_name"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsBitbucketRepo200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsBitbucketRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsBitbucketRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsBitbucketRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       PostV1IntegrationsBitbucketRepo200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters struct {
			ApiKey         string  `json:"api_key"`
			InstanceUrl    *string `json:"instance_url,omitempty"`
			RepositoryName string  `json:"repository_name"`
			Username       *string `json:"username,omitempty"`
			WorkspaceName  string  `json:"workspace_name"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsBitbucketRepo200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsBitbucketRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsBitbucketRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsBitbucketRepoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsBitbucketRepoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsBitbucketRepoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsBitbucketRepoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                      `json:"id"`
		Kind       GetV1IntegrationsBitbucketRepoId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                     `json:"locationId"`
		Name       string                                  `json:"name"`
		Parameters struct {
			ApiKey         string  `json:"api_key"`
			InstanceUrl    *string `json:"instance_url,omitempty"`
			RepositoryName string  `json:"repository_name"`
			Username       *string `json:"username,omitempty"`
			WorkspaceName  string  `json:"workspace_name"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsBitbucketRepoId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsBitbucketRepoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsBitbucketRepoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsCloudflareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                 `json:"id"`
		Kind       GetV1IntegrationsCloudflare200Kind `json:"kind"`
		LocationId *openapi_types.UUID                `json:"locationId"`
		Name       string                             `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsCloudflare200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsCloudflareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsCloudflareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsCloudflareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                  `json:"id"`
		Kind       PostV1IntegrationsCloudflare200Kind `json:"kind"`
		LocationId *openapi_types.UUID                 `json:"locationId"`
		Name       string                              `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsCloudflare200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsCloudflareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsCloudflareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsCloudflareIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsCloudflareIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsCloudflareIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsCloudflareIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsCloudflareId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsCloudflareId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsCloudflareIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsCloudflareIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsDiscordWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       GetV1IntegrationsDiscordWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters map[string]interface{}                 `json:"parameters"`
	}
}
type GetV1IntegrationsDiscordWebhook200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsDiscordWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsDiscordWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsDiscordWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                      `json:"id"`
		Kind       PostV1IntegrationsDiscordWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                     `json:"locationId"`
		Name       string                                  `json:"name"`
		Parameters map[string]interface{}                  `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsDiscordWebhook200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsDiscordWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsDiscordWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsDiscordWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsDiscordWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsDiscordWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsDiscordWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                       `json:"id"`
		Kind       GetV1IntegrationsDiscordWebhookId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                      `json:"locationId"`
		Name       string                                   `json:"name"`
		Parameters map[string]interface{}                   `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsDiscordWebhookId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsDiscordWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsDiscordWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       GetV1IntegrationsEmail200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters map[string]interface{}        `json:"parameters"`
	}
}
type GetV1IntegrationsEmail200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID             `json:"id"`
		Kind       PostV1IntegrationsEmail200Kind `json:"kind"`
		LocationId *openapi_types.UUID            `json:"locationId"`
		Name       string                         `json:"name"`
		Parameters map[string]interface{}         `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsEmail200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsEmailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsEmailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsEmailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsEmailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID              `json:"id"`
		Kind       GetV1IntegrationsEmailId200Kind `json:"kind"`
		LocationId *openapi_types.UUID             `json:"locationId"`
		Name       string                          `json:"name"`
		Parameters map[string]interface{}          `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsEmailId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsEmailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsEmailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID          `json:"id"`
		Kind       GetV1IntegrationsGcp200Kind `json:"kind"`
		LocationId *openapi_types.UUID         `json:"locationId"`
		Name       string                      `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsGcp200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsGcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID           `json:"id"`
		Kind       PostV1IntegrationsGcp200Kind `json:"kind"`
		LocationId *openapi_types.UUID          `json:"locationId"`
		Name       string                       `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsGcp200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsGcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsGcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsGcpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsGcpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsGcpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGcpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       GetV1IntegrationsGcpId200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters struct {
			AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
			AuthUri                 string `json:"auth_uri"`
			ClientEmail             string `json:"client_email"`
			ClientId                string `json:"client_id"`
			ClientX509CertUrl       string `json:"client_x509_cert_url"`
			PrivateKey              string `json:"private_key"`
			PrivateKeyId            string `json:"private_key_id"`
			ProjectId               string `json:"project_id"`
			TokenUri                string `json:"token_uri"`
			Type                    string `json:"type"`
			UniverseDomain          string `json:"universe_domain"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsGcpId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGcpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGcpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGithubApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsGithubApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsGithubApiKey200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGithubApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGithubApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsGithubApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       PostV1IntegrationsGithubApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsGithubApiKey200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsGithubApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsGithubApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsGithubApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsGithubApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsGithubApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGithubApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       GetV1IntegrationsGithubApiKeyId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsGithubApiKeyId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGithubApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGithubApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGitlabApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsGitlabApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			ApiKey      string  `json:"api_key"`
			InstanceUrl *string `json:"instance_url,omitempty"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsGitlabApiKey200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGitlabApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGitlabApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsGitlabApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       PostV1IntegrationsGitlabApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			ApiKey      string  `json:"api_key"`
			InstanceUrl *string `json:"instance_url,omitempty"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsGitlabApiKey200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsGitlabApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsGitlabApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsGitlabApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsGitlabApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsGitlabApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsGitlabApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       GetV1IntegrationsGitlabApiKeyId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters struct {
			ApiKey      string  `json:"api_key"`
			InstanceUrl *string `json:"instance_url,omitempty"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsGitlabApiKeyId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsGitlabApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsGitlabApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsJiraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID           `json:"id"`
		Kind       GetV1IntegrationsJira200Kind `json:"kind"`
		LocationId *openapi_types.UUID          `json:"locationId"`
		Name       string                       `json:"name"`
		Parameters struct {
			AccountId         string `json:"account_id"`
			ApiKey            string `json:"api_key"`
			Email             string `json:"email"`
			InstanceUrl       string `json:"instance_url"`
			Name              string `json:"name"`
			PropertiesMapping *[]struct {
				EscapeProperty GetV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
				JiraProperty   string                                                            `json:"jira_property"`
			} `json:"properties_mapping,omitempty"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsJira200Kind string
type GetV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsJiraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsJiraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsJiraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       PostV1IntegrationsJira200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters struct {
			AccountId         string `json:"account_id"`
			ApiKey            string `json:"api_key"`
			Email             string `json:"email"`
			InstanceUrl       string `json:"instance_url"`
			Name              string `json:"name"`
			PropertiesMapping *[]struct {
				EscapeProperty PostV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
				JiraProperty   string                                                             `json:"jira_property"`
			} `json:"properties_mapping,omitempty"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsJira200Kind string
type PostV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsJiraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsJiraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsJiraIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsJiraIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsJiraIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsJiraIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID             `json:"id"`
		Kind       GetV1IntegrationsJiraId200Kind `json:"kind"`
		LocationId *openapi_types.UUID            `json:"locationId"`
		Name       string                         `json:"name"`
		Parameters struct {
			AccountId         string `json:"account_id"`
			ApiKey            string `json:"api_key"`
			Email             string `json:"email"`
			InstanceUrl       string `json:"instance_url"`
			Name              string `json:"name"`
			PropertiesMapping *[]struct {
				EscapeProperty GetV1IntegrationsJiraId200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
				JiraProperty   string                                                              `json:"jira_property"`
			} `json:"properties_mapping,omitempty"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsJiraId200Kind string
type GetV1IntegrationsJiraId200ParametersPropertiesMappingEscapeProperty string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsJiraIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsJiraIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKongGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                  `json:"id"`
		Kind       GetV1IntegrationsKongGateway200Kind `json:"kind"`
		LocationId *openapi_types.UUID                 `json:"locationId"`
		Name       string                              `json:"name"`
		Parameters struct {
			AdminApiUrl string `json:"admin_api_url"`
			ApiKey      string `json:"api_key"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsKongGateway200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKongGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKongGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsKongGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       PostV1IntegrationsKongGateway200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			AdminApiUrl string `json:"admin_api_url"`
			ApiKey      string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsKongGateway200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsKongGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsKongGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsKongGatewayIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsKongGatewayIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsKongGatewayIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKongGatewayIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       GetV1IntegrationsKongGatewayId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			AdminApiUrl string `json:"admin_api_url"`
			ApiKey      string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsKongGatewayId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKongGatewayIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKongGatewayIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKongKonnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                  `json:"id"`
		Kind       GetV1IntegrationsKongKonnect200Kind `json:"kind"`
		LocationId *openapi_types.UUID                 `json:"locationId"`
		Name       string                              `json:"name"`
		Parameters struct {
			Region             GetV1IntegrationsKongKonnect200ParametersRegion `json:"region"`
			SystemAccountToken string                                          `json:"system_account_token"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsKongKonnect200Kind string
type GetV1IntegrationsKongKonnect200ParametersRegion string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKongKonnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKongKonnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsKongKonnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       PostV1IntegrationsKongKonnect200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			Region             PostV1IntegrationsKongKonnect200ParametersRegion `json:"region"`
			SystemAccountToken string                                           `json:"system_account_token"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsKongKonnect200Kind string
type PostV1IntegrationsKongKonnect200ParametersRegion string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsKongKonnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsKongKonnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsKongKonnectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsKongKonnectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsKongKonnectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKongKonnectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       GetV1IntegrationsKongKonnectId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			Region             GetV1IntegrationsKongKonnectId200ParametersRegion `json:"region"`
			SystemAccountToken string                                            `json:"system_account_token"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsKongKonnectId200Kind string
type GetV1IntegrationsKongKonnectId200ParametersRegion string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKongKonnectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKongKonnectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKubernetesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                 `json:"id"`
		Kind       GetV1IntegrationsKubernetes200Kind `json:"kind"`
		LocationId *openapi_types.UUID                `json:"locationId"`
		Name       string                             `json:"name"`
		Parameters struct {
			Blacklist *struct {
				Namespaces *[]string `json:"namespaces,omitempty"`
			} `json:"blacklist,omitempty"`
			Tags *struct {
				Labels     *[]string `json:"labels,omitempty"`
				Namespaces *bool     `json:"namespaces,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsKubernetes200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKubernetesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKubernetesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsKubernetesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                  `json:"id"`
		Kind       PostV1IntegrationsKubernetes200Kind `json:"kind"`
		LocationId *openapi_types.UUID                 `json:"locationId"`
		Name       string                              `json:"name"`
		Parameters struct {
			Blacklist *struct {
				Namespaces *[]string `json:"namespaces,omitempty"`
			} `json:"blacklist,omitempty"`
			Tags *struct {
				Labels     *[]string `json:"labels,omitempty"`
				Namespaces *bool     `json:"namespaces,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsKubernetes200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsKubernetesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsKubernetesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsKubernetesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsKubernetesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsKubernetesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsKubernetesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsKubernetesId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters struct {
			Blacklist *struct {
				Namespaces *[]string `json:"namespaces,omitempty"`
			} `json:"blacklist,omitempty"`
			Tags *struct {
				Labels     *[]string `json:"labels,omitempty"`
				Namespaces *bool     `json:"namespaces,omitempty"`
			} `json:"tags,omitempty"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsKubernetesId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsKubernetesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsKubernetesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsPostmanApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       GetV1IntegrationsPostmanApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsPostmanApiKey200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsPostmanApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsPostmanApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsPostmanApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       PostV1IntegrationsPostmanApiKey200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsPostmanApiKey200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsPostmanApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsPostmanApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsPostmanApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsPostmanApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsPostmanApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsPostmanApiKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                      `json:"id"`
		Kind       GetV1IntegrationsPostmanApiKeyId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                     `json:"locationId"`
		Name       string                                  `json:"name"`
		Parameters struct {
			ApiKey string `json:"api_key"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsPostmanApiKeyId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsPostmanApiKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsPostmanApiKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsSlackWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsSlackWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters map[string]interface{}               `json:"parameters"`
	}
}
type GetV1IntegrationsSlackWebhook200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsSlackWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsSlackWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsSlackWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       PostV1IntegrationsSlackWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters map[string]interface{}                `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsSlackWebhook200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsSlackWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsSlackWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsSlackWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsSlackWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsSlackWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsSlackWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       GetV1IntegrationsSlackWebhookId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters map[string]interface{}                 `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsSlackWebhookId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsSlackWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsSlackWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsTeamsWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID                   `json:"id"`
		Kind       GetV1IntegrationsTeamsWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                  `json:"locationId"`
		Name       string                               `json:"name"`
		Parameters map[string]interface{}               `json:"parameters"`
	}
}
type GetV1IntegrationsTeamsWebhook200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsTeamsWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsTeamsWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsTeamsWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                    `json:"id"`
		Kind       PostV1IntegrationsTeamsWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID                   `json:"locationId"`
		Name       string                                `json:"name"`
		Parameters map[string]interface{}                `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsTeamsWebhook200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsTeamsWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsTeamsWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsTeamsWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsTeamsWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsTeamsWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsTeamsWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                     `json:"id"`
		Kind       GetV1IntegrationsTeamsWebhookId200Kind `json:"kind"`
		LocationId *openapi_types.UUID                    `json:"locationId"`
		Name       string                                 `json:"name"`
		Parameters map[string]interface{}                 `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsTeamsWebhookId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsTeamsWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsTeamsWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID              `json:"id"`
		Kind       GetV1IntegrationsWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID             `json:"locationId"`
		Name       string                          `json:"name"`
		Parameters map[string]interface{}          `json:"parameters"`
	}
}
type GetV1IntegrationsWebhook200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID               `json:"id"`
		Kind       PostV1IntegrationsWebhook200Kind `json:"kind"`
		LocationId *openapi_types.UUID              `json:"locationId"`
		Name       string                           `json:"name"`
		Parameters map[string]interface{}           `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsWebhook200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsWebhookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID                `json:"id"`
		Kind       GetV1IntegrationsWebhookId200Kind `json:"kind"`
		LocationId *openapi_types.UUID               `json:"locationId"`
		Name       string                            `json:"name"`
		Parameters map[string]interface{}            `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsWebhookId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsWebhookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsWebhookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsWizResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id         openapi_types.UUID          `json:"id"`
		Kind       GetV1IntegrationsWiz200Kind `json:"kind"`
		LocationId *openapi_types.UUID         `json:"locationId"`
		Name       string                      `json:"name"`
		Parameters struct {
			ApiEndpoint  string `json:"api_endpoint"`
			ClientId     string `json:"client_id"`
			ClientSecret string `json:"client_secret"`
			TokenUri     string `json:"token_uri"`
		} `json:"parameters"`
	}
}
type GetV1IntegrationsWiz200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsWizResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsWizResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IntegrationsWizResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID           `json:"id"`
		Kind       PostV1IntegrationsWiz200Kind `json:"kind"`
		LocationId *openapi_types.UUID          `json:"locationId"`
		Name       string                       `json:"name"`
		Parameters struct {
			ApiEndpoint  string `json:"api_endpoint"`
			ClientId     string `json:"client_id"`
			ClientSecret string `json:"client_secret"`
			TokenUri     string `json:"token_uri"`
		} `json:"parameters"`
	}
	JSON400 *struct {
		Events []struct {
			Logline  string  `json:"logline"`
			Severity *string `json:"severity"`
		} `json:"events"`
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type PostV1IntegrationsWiz200Kind string

// Status returns HTTPResponse.Status
func (r PostV1IntegrationsWizResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IntegrationsWizResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1IntegrationsWizIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id string `json:"id"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1IntegrationsWizIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1IntegrationsWizIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IntegrationsWizIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id         openapi_types.UUID            `json:"id"`
		Kind       GetV1IntegrationsWizId200Kind `json:"kind"`
		LocationId *openapi_types.UUID           `json:"locationId"`
		Name       string                        `json:"name"`
		Parameters struct {
			ApiEndpoint  string `json:"api_endpoint"`
			ClientId     string `json:"client_id"`
			ClientSecret string `json:"client_secret"`
			TokenUri     string `json:"token_uri"`
		} `json:"parameters"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetV1IntegrationsWizId200Kind string

// Status returns HTTPResponse.Status
func (r GetV1IntegrationsWizIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IntegrationsWizIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Id The location ID.
		Id *openapi_types.UUID `json:"id,omitempty"`

		// Key The SSH public key to use to connect to the location.
		Key *string `json:"key,omitempty"`

		// Name The name of the location.
		Name *string               `json:"name,omitempty"`
		Type *ListLocations200Type `json:"type,omitempty"`
	}
}
type ListLocations200Type string

// Status returns HTTPResponse.Status
func (r ListLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Id The location ID.
		Id *openapi_types.UUID `json:"id,omitempty"`

		// Key The SSH public key to use to connect to the location.
		Key *string `json:"key,omitempty"`

		// Name The name of the location.
		Name *string                `json:"name,omitempty"`
		Type *CreateLocation200Type `json:"type,omitempty"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type CreateLocation200Type string

// Status returns HTTPResponse.Status
func (r CreateLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Id The location ID.
		Id *openapi_types.UUID `json:"id,omitempty"`

		// Key The SSH public key to use to connect to the location.
		Key *string `json:"key,omitempty"`

		// Name The name of the location.
		Name *string                `json:"name,omitempty"`
		Type *UpsertLocation200Type `json:"type,omitempty"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type UpsertLocation200Type string

// Status returns HTTPResponse.Status
func (r UpsertLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Id The location ID.
		Id *openapi_types.UUID `json:"id,omitempty"`

		// Key The SSH public key to use to connect to the location.
		Key *string `json:"key,omitempty"`

		// Name The name of the location.
		Name *string             `json:"name,omitempty"`
		Type *GetLocation200Type `json:"type,omitempty"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}
type GetLocation200Type string

// Status returns HTTPResponse.Status
func (r GetLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Edges []struct {
			Node struct {
				BlobUrl     *string            `json:"blobUrl"`
				Consumer    *string            `json:"consumer"`
				CreatedAt   time.Time          `json:"createdAt"`
				Description *string            `json:"description"`
				DomainId    openapi_types.UUID `json:"domainId"`
				Endpoints   struct {
					Id         openapi_types.UUID `json:"id"`
					Name       string             `json:"name"`
					Operation  string             `json:"operation"`
					Parameters string             `json:"parameters"`
					ReturnType string             `json:"returnType"`
				} `json:"endpoints"`
				GeneratedFromCodeProjectId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromCodeProjectId"`
				GeneratedFromFrontendId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromFrontendId"`
				GeneratedFromServiceId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromServiceId"`
				Id         openapi_types.UUID `json:"id"`
				Kind       string             `json:"kind"`
				LastSeenAt time.Time          `json:"lastSeenAt"`
				Name       string             `json:"name"`
				Tags       []struct {
					Color string             `json:"color"`
					Id    openapi_types.UUID `json:"id"`
					Name  string             `json:"name"`
				} `json:"tags"`
				Url            *string `json:"url"`
				UseInServiceId []struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"useInServiceId"`
			} `json:"node"`
		} `json:"edges"`
		PageInfo struct {
			EndCursor       *string `json:"endCursor"`
			HasNextPage     bool    `json:"hasNextPage"`
			HasPreviousPage bool    `json:"hasPreviousPage"`
			StartCursor     *string `json:"startCursor"`
		} `json:"pageInfo"`
		TotalCount float32 `json:"totalCount"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdSchemasSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BlobUrl     *string   `json:"blobUrl"`
		Consumer    *string   `json:"consumer"`
		CreatedAt   time.Time `json:"createdAt"`
		Description *string   `json:"description"`
		Endpoints   []struct {
			Id         openapi_types.UUID `json:"id"`
			Name       string             `json:"name"`
			Operation  string             `json:"operation"`
			Parameters string             `json:"parameters"`
			ReturnType string             `json:"returnType"`
		} `json:"endpoints"`
		GeneratedFromCodeProject *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromCodeProject"`
		GeneratedFromFrontend *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromFrontend"`
		GeneratedFromService *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromService"`
		Id         openapi_types.UUID `json:"id"`
		Kind       string             `json:"kind"`
		LastSeenAt time.Time          `json:"lastSeenAt"`
		Name       string             `json:"name"`
		Tags       []struct {
			Color string             `json:"color"`
			Id    openapi_types.UUID `json:"id"`
			Name  string             `json:"name"`
		} `json:"tags"`
		TemporaryDownloadUrl *string `json:"temporaryDownloadUrl"`
		Url                  *string `json:"url"`
		UsedInServices       []struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"usedInServices"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdSchemasSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdSchemasSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationsCount float32            `json:"applicationsCount"`
		AuthTechnology    *string            `json:"authTechnology"`
		CloudProvider     string             `json:"cloudProvider"`
		CountryCodes      []string           `json:"countryCodes"`
		CreatedAt         time.Time          `json:"createdAt"`
		DomainId          openapi_types.UUID `json:"domainId"`
		Framework         *string            `json:"framework"`
		Id                openapi_types.UUID `json:"id"`
		IpAddresses       []string           `json:"ipAddresses"`
		LastSeenAt        time.Time          `json:"lastSeenAt"`
		SoftwareType      *string            `json:"softwareType"`
		Tags              []struct {
			Color string             `json:"color"`
			Id    openapi_types.UUID `json:"id"`
			Name  string             `json:"name"`
		} `json:"tags"`
		Type        string `json:"type"`
		Url         string `json:"url"`
		WafProvider string `json:"wafProvider"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApplicationIdWithResponse request returning *GetApplicationIdResponse
func (c *ClientWithResponses) GetApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error) {
	rsp, err := c.GetApplicationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationIdResponse(rsp)
}

// PostApplicationsIdStartScanWithBodyWithResponse request with arbitrary body returning *PostApplicationsIdStartScanResponse
func (c *ClientWithResponses) PostApplicationsIdStartScanWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error) {
	rsp, err := c.PostApplicationsIdStartScanWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdStartScanResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsIdStartScanWithResponse(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error) {
	rsp, err := c.PostApplicationsIdStartScan(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdStartScanResponse(rsp)
}

// PostApplicationsIdUploadSchemaWithBodyWithResponse request with arbitrary body returning *PostApplicationsIdUploadSchemaResponse
func (c *ClientWithResponses) PostApplicationsIdUploadSchemaWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error) {
	rsp, err := c.PostApplicationsIdUploadSchemaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdUploadSchemaResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsIdUploadSchemaWithResponse(ctx context.Context, id openapi_types.UUID, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error) {
	rsp, err := c.PostApplicationsIdUploadSchema(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdUploadSchemaResponse(rsp)
}

// PostCreateApplicationWithBodyWithResponse request with arbitrary body returning *PostCreateApplicationResponse
func (c *ClientWithResponses) PostCreateApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error) {
	rsp, err := c.PostCreateApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostCreateApplicationWithResponse(ctx context.Context, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error) {
	rsp, err := c.PostCreateApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateApplicationResponse(rsp)
}

// GetOrganizationIdApplicationsWithResponse request returning *GetOrganizationIdApplicationsResponse
func (c *ClientWithResponses) GetOrganizationIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsResponse, error) {
	rsp, err := c.GetOrganizationIdApplications(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationIdApplicationsResponse(rsp)
}

// GetOrganizationIdApplicationsSearchWithResponse request returning *GetOrganizationIdApplicationsSearchResponse
func (c *ClientWithResponses) GetOrganizationIdApplicationsSearchWithResponse(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsSearchResponse, error) {
	rsp, err := c.GetOrganizationIdApplicationsSearch(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationIdApplicationsSearchResponse(rsp)
}

// GetScansIdWithResponse request returning *GetScansIdResponse
func (c *ClientWithResponses) GetScansIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetScansIdResponse, error) {
	rsp, err := c.GetScansId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansIdResponse(rsp)
}

// GetV1IntegrationsAkamaiWithResponse request returning *GetV1IntegrationsAkamaiResponse
func (c *ClientWithResponses) GetV1IntegrationsAkamaiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAkamaiResponse, error) {
	rsp, err := c.GetV1IntegrationsAkamai(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAkamaiResponse(rsp)
}

// PostV1IntegrationsAkamaiWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsAkamaiResponse
func (c *ClientWithResponses) PostV1IntegrationsAkamaiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAkamaiResponse, error) {
	rsp, err := c.PostV1IntegrationsAkamaiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAkamaiResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsAkamaiWithResponse(ctx context.Context, body PostV1IntegrationsAkamaiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAkamaiResponse, error) {
	rsp, err := c.PostV1IntegrationsAkamai(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAkamaiResponse(rsp)
}

// DeleteV1IntegrationsAkamaiIdWithResponse request returning *DeleteV1IntegrationsAkamaiIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsAkamaiIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAkamaiIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsAkamaiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsAkamaiIdResponse(rsp)
}

// GetV1IntegrationsAkamaiIdWithResponse request returning *GetV1IntegrationsAkamaiIdResponse
func (c *ClientWithResponses) GetV1IntegrationsAkamaiIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAkamaiIdResponse, error) {
	rsp, err := c.GetV1IntegrationsAkamaiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAkamaiIdResponse(rsp)
}

// GetV1IntegrationsApigeeWithResponse request returning *GetV1IntegrationsApigeeResponse
func (c *ClientWithResponses) GetV1IntegrationsApigeeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsApigeeResponse, error) {
	rsp, err := c.GetV1IntegrationsApigee(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsApigeeResponse(rsp)
}

// PostV1IntegrationsApigeeWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsApigeeResponse
func (c *ClientWithResponses) PostV1IntegrationsApigeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsApigeeResponse, error) {
	rsp, err := c.PostV1IntegrationsApigeeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsApigeeResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsApigeeWithResponse(ctx context.Context, body PostV1IntegrationsApigeeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsApigeeResponse, error) {
	rsp, err := c.PostV1IntegrationsApigee(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsApigeeResponse(rsp)
}

// DeleteV1IntegrationsApigeeIdWithResponse request returning *DeleteV1IntegrationsApigeeIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsApigeeIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsApigeeIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsApigeeId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsApigeeIdResponse(rsp)
}

// GetV1IntegrationsApigeeIdWithResponse request returning *GetV1IntegrationsApigeeIdResponse
func (c *ClientWithResponses) GetV1IntegrationsApigeeIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsApigeeIdResponse, error) {
	rsp, err := c.GetV1IntegrationsApigeeId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsApigeeIdResponse(rsp)
}

// GetV1IntegrationsAwsWithResponse request returning *GetV1IntegrationsAwsResponse
func (c *ClientWithResponses) GetV1IntegrationsAwsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAwsResponse, error) {
	rsp, err := c.GetV1IntegrationsAws(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAwsResponse(rsp)
}

// PostV1IntegrationsAwsWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsAwsResponse
func (c *ClientWithResponses) PostV1IntegrationsAwsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAwsResponse, error) {
	rsp, err := c.PostV1IntegrationsAwsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAwsResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsAwsWithResponse(ctx context.Context, body PostV1IntegrationsAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAwsResponse, error) {
	rsp, err := c.PostV1IntegrationsAws(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAwsResponse(rsp)
}

// DeleteV1IntegrationsAwsIdWithResponse request returning *DeleteV1IntegrationsAwsIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsAwsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAwsIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsAwsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsAwsIdResponse(rsp)
}

// GetV1IntegrationsAwsIdWithResponse request returning *GetV1IntegrationsAwsIdResponse
func (c *ClientWithResponses) GetV1IntegrationsAwsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAwsIdResponse, error) {
	rsp, err := c.GetV1IntegrationsAwsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAwsIdResponse(rsp)
}

// GetV1IntegrationsAzureWithResponse request returning *GetV1IntegrationsAzureResponse
func (c *ClientWithResponses) GetV1IntegrationsAzureWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureResponse, error) {
	rsp, err := c.GetV1IntegrationsAzure(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAzureResponse(rsp)
}

// PostV1IntegrationsAzureWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsAzureResponse
func (c *ClientWithResponses) PostV1IntegrationsAzureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureResponse, error) {
	rsp, err := c.PostV1IntegrationsAzureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAzureResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsAzureWithResponse(ctx context.Context, body PostV1IntegrationsAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureResponse, error) {
	rsp, err := c.PostV1IntegrationsAzure(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAzureResponse(rsp)
}

// DeleteV1IntegrationsAzureIdWithResponse request returning *DeleteV1IntegrationsAzureIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsAzureIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAzureIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsAzureId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsAzureIdResponse(rsp)
}

// GetV1IntegrationsAzureIdWithResponse request returning *GetV1IntegrationsAzureIdResponse
func (c *ClientWithResponses) GetV1IntegrationsAzureIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureIdResponse, error) {
	rsp, err := c.GetV1IntegrationsAzureId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAzureIdResponse(rsp)
}

// GetV1IntegrationsAzureDevopsWithResponse request returning *GetV1IntegrationsAzureDevopsResponse
func (c *ClientWithResponses) GetV1IntegrationsAzureDevopsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureDevopsResponse, error) {
	rsp, err := c.GetV1IntegrationsAzureDevops(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAzureDevopsResponse(rsp)
}

// PostV1IntegrationsAzureDevopsWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsAzureDevopsResponse
func (c *ClientWithResponses) PostV1IntegrationsAzureDevopsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureDevopsResponse, error) {
	rsp, err := c.PostV1IntegrationsAzureDevopsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAzureDevopsResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsAzureDevopsWithResponse(ctx context.Context, body PostV1IntegrationsAzureDevopsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsAzureDevopsResponse, error) {
	rsp, err := c.PostV1IntegrationsAzureDevops(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsAzureDevopsResponse(rsp)
}

// DeleteV1IntegrationsAzureDevopsIdWithResponse request returning *DeleteV1IntegrationsAzureDevopsIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsAzureDevopsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsAzureDevopsIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsAzureDevopsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsAzureDevopsIdResponse(rsp)
}

// GetV1IntegrationsAzureDevopsIdWithResponse request returning *GetV1IntegrationsAzureDevopsIdResponse
func (c *ClientWithResponses) GetV1IntegrationsAzureDevopsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsAzureDevopsIdResponse, error) {
	rsp, err := c.GetV1IntegrationsAzureDevopsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsAzureDevopsIdResponse(rsp)
}

// GetV1IntegrationsBitbucketRepoWithResponse request returning *GetV1IntegrationsBitbucketRepoResponse
func (c *ClientWithResponses) GetV1IntegrationsBitbucketRepoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsBitbucketRepoResponse, error) {
	rsp, err := c.GetV1IntegrationsBitbucketRepo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsBitbucketRepoResponse(rsp)
}

// PostV1IntegrationsBitbucketRepoWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsBitbucketRepoResponse
func (c *ClientWithResponses) PostV1IntegrationsBitbucketRepoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsBitbucketRepoResponse, error) {
	rsp, err := c.PostV1IntegrationsBitbucketRepoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsBitbucketRepoResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsBitbucketRepoWithResponse(ctx context.Context, body PostV1IntegrationsBitbucketRepoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsBitbucketRepoResponse, error) {
	rsp, err := c.PostV1IntegrationsBitbucketRepo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsBitbucketRepoResponse(rsp)
}

// DeleteV1IntegrationsBitbucketRepoIdWithResponse request returning *DeleteV1IntegrationsBitbucketRepoIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsBitbucketRepoIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsBitbucketRepoIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsBitbucketRepoId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsBitbucketRepoIdResponse(rsp)
}

// GetV1IntegrationsBitbucketRepoIdWithResponse request returning *GetV1IntegrationsBitbucketRepoIdResponse
func (c *ClientWithResponses) GetV1IntegrationsBitbucketRepoIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsBitbucketRepoIdResponse, error) {
	rsp, err := c.GetV1IntegrationsBitbucketRepoId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsBitbucketRepoIdResponse(rsp)
}

// GetV1IntegrationsCloudflareWithResponse request returning *GetV1IntegrationsCloudflareResponse
func (c *ClientWithResponses) GetV1IntegrationsCloudflareWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsCloudflareResponse, error) {
	rsp, err := c.GetV1IntegrationsCloudflare(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsCloudflareResponse(rsp)
}

// PostV1IntegrationsCloudflareWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsCloudflareResponse
func (c *ClientWithResponses) PostV1IntegrationsCloudflareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsCloudflareResponse, error) {
	rsp, err := c.PostV1IntegrationsCloudflareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsCloudflareResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsCloudflareWithResponse(ctx context.Context, body PostV1IntegrationsCloudflareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsCloudflareResponse, error) {
	rsp, err := c.PostV1IntegrationsCloudflare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsCloudflareResponse(rsp)
}

// DeleteV1IntegrationsCloudflareIdWithResponse request returning *DeleteV1IntegrationsCloudflareIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsCloudflareIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsCloudflareIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsCloudflareId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsCloudflareIdResponse(rsp)
}

// GetV1IntegrationsCloudflareIdWithResponse request returning *GetV1IntegrationsCloudflareIdResponse
func (c *ClientWithResponses) GetV1IntegrationsCloudflareIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsCloudflareIdResponse, error) {
	rsp, err := c.GetV1IntegrationsCloudflareId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsCloudflareIdResponse(rsp)
}

// GetV1IntegrationsDiscordWebhookWithResponse request returning *GetV1IntegrationsDiscordWebhookResponse
func (c *ClientWithResponses) GetV1IntegrationsDiscordWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsDiscordWebhookResponse, error) {
	rsp, err := c.GetV1IntegrationsDiscordWebhook(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsDiscordWebhookResponse(rsp)
}

// PostV1IntegrationsDiscordWebhookWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsDiscordWebhookResponse
func (c *ClientWithResponses) PostV1IntegrationsDiscordWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsDiscordWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsDiscordWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsDiscordWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsDiscordWebhookWithResponse(ctx context.Context, body PostV1IntegrationsDiscordWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsDiscordWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsDiscordWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsDiscordWebhookResponse(rsp)
}

// DeleteV1IntegrationsDiscordWebhookIdWithResponse request returning *DeleteV1IntegrationsDiscordWebhookIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsDiscordWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsDiscordWebhookIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsDiscordWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsDiscordWebhookIdResponse(rsp)
}

// GetV1IntegrationsDiscordWebhookIdWithResponse request returning *GetV1IntegrationsDiscordWebhookIdResponse
func (c *ClientWithResponses) GetV1IntegrationsDiscordWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsDiscordWebhookIdResponse, error) {
	rsp, err := c.GetV1IntegrationsDiscordWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsDiscordWebhookIdResponse(rsp)
}

// GetV1IntegrationsEmailWithResponse request returning *GetV1IntegrationsEmailResponse
func (c *ClientWithResponses) GetV1IntegrationsEmailWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsEmailResponse, error) {
	rsp, err := c.GetV1IntegrationsEmail(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsEmailResponse(rsp)
}

// PostV1IntegrationsEmailWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsEmailResponse
func (c *ClientWithResponses) PostV1IntegrationsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsEmailResponse, error) {
	rsp, err := c.PostV1IntegrationsEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsEmailResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsEmailWithResponse(ctx context.Context, body PostV1IntegrationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsEmailResponse, error) {
	rsp, err := c.PostV1IntegrationsEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsEmailResponse(rsp)
}

// DeleteV1IntegrationsEmailIdWithResponse request returning *DeleteV1IntegrationsEmailIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsEmailIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsEmailIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsEmailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsEmailIdResponse(rsp)
}

// GetV1IntegrationsEmailIdWithResponse request returning *GetV1IntegrationsEmailIdResponse
func (c *ClientWithResponses) GetV1IntegrationsEmailIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsEmailIdResponse, error) {
	rsp, err := c.GetV1IntegrationsEmailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsEmailIdResponse(rsp)
}

// GetV1IntegrationsGcpWithResponse request returning *GetV1IntegrationsGcpResponse
func (c *ClientWithResponses) GetV1IntegrationsGcpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGcpResponse, error) {
	rsp, err := c.GetV1IntegrationsGcp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGcpResponse(rsp)
}

// PostV1IntegrationsGcpWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsGcpResponse
func (c *ClientWithResponses) PostV1IntegrationsGcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGcpResponse, error) {
	rsp, err := c.PostV1IntegrationsGcpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGcpResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsGcpWithResponse(ctx context.Context, body PostV1IntegrationsGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGcpResponse, error) {
	rsp, err := c.PostV1IntegrationsGcp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGcpResponse(rsp)
}

// DeleteV1IntegrationsGcpIdWithResponse request returning *DeleteV1IntegrationsGcpIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsGcpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGcpIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsGcpId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsGcpIdResponse(rsp)
}

// GetV1IntegrationsGcpIdWithResponse request returning *GetV1IntegrationsGcpIdResponse
func (c *ClientWithResponses) GetV1IntegrationsGcpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGcpIdResponse, error) {
	rsp, err := c.GetV1IntegrationsGcpId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGcpIdResponse(rsp)
}

// GetV1IntegrationsGithubApiKeyWithResponse request returning *GetV1IntegrationsGithubApiKeyResponse
func (c *ClientWithResponses) GetV1IntegrationsGithubApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGithubApiKeyResponse, error) {
	rsp, err := c.GetV1IntegrationsGithubApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGithubApiKeyResponse(rsp)
}

// PostV1IntegrationsGithubApiKeyWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsGithubApiKeyResponse
func (c *ClientWithResponses) PostV1IntegrationsGithubApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGithubApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsGithubApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGithubApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsGithubApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsGithubApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGithubApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsGithubApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGithubApiKeyResponse(rsp)
}

// DeleteV1IntegrationsGithubApiKeyIdWithResponse request returning *DeleteV1IntegrationsGithubApiKeyIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsGithubApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGithubApiKeyIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsGithubApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsGithubApiKeyIdResponse(rsp)
}

// GetV1IntegrationsGithubApiKeyIdWithResponse request returning *GetV1IntegrationsGithubApiKeyIdResponse
func (c *ClientWithResponses) GetV1IntegrationsGithubApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGithubApiKeyIdResponse, error) {
	rsp, err := c.GetV1IntegrationsGithubApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGithubApiKeyIdResponse(rsp)
}

// GetV1IntegrationsGitlabApiKeyWithResponse request returning *GetV1IntegrationsGitlabApiKeyResponse
func (c *ClientWithResponses) GetV1IntegrationsGitlabApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGitlabApiKeyResponse, error) {
	rsp, err := c.GetV1IntegrationsGitlabApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGitlabApiKeyResponse(rsp)
}

// PostV1IntegrationsGitlabApiKeyWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsGitlabApiKeyResponse
func (c *ClientWithResponses) PostV1IntegrationsGitlabApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGitlabApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsGitlabApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGitlabApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsGitlabApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsGitlabApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsGitlabApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsGitlabApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsGitlabApiKeyResponse(rsp)
}

// DeleteV1IntegrationsGitlabApiKeyIdWithResponse request returning *DeleteV1IntegrationsGitlabApiKeyIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsGitlabApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsGitlabApiKeyIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsGitlabApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsGitlabApiKeyIdResponse(rsp)
}

// GetV1IntegrationsGitlabApiKeyIdWithResponse request returning *GetV1IntegrationsGitlabApiKeyIdResponse
func (c *ClientWithResponses) GetV1IntegrationsGitlabApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsGitlabApiKeyIdResponse, error) {
	rsp, err := c.GetV1IntegrationsGitlabApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsGitlabApiKeyIdResponse(rsp)
}

// GetV1IntegrationsJiraWithResponse request returning *GetV1IntegrationsJiraResponse
func (c *ClientWithResponses) GetV1IntegrationsJiraWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsJiraResponse, error) {
	rsp, err := c.GetV1IntegrationsJira(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsJiraResponse(rsp)
}

// PostV1IntegrationsJiraWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsJiraResponse
func (c *ClientWithResponses) PostV1IntegrationsJiraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsJiraResponse, error) {
	rsp, err := c.PostV1IntegrationsJiraWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsJiraResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsJiraWithResponse(ctx context.Context, body PostV1IntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsJiraResponse, error) {
	rsp, err := c.PostV1IntegrationsJira(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsJiraResponse(rsp)
}

// DeleteV1IntegrationsJiraIdWithResponse request returning *DeleteV1IntegrationsJiraIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsJiraIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsJiraIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsJiraId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsJiraIdResponse(rsp)
}

// GetV1IntegrationsJiraIdWithResponse request returning *GetV1IntegrationsJiraIdResponse
func (c *ClientWithResponses) GetV1IntegrationsJiraIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsJiraIdResponse, error) {
	rsp, err := c.GetV1IntegrationsJiraId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsJiraIdResponse(rsp)
}

// GetV1IntegrationsKongGatewayWithResponse request returning *GetV1IntegrationsKongGatewayResponse
func (c *ClientWithResponses) GetV1IntegrationsKongGatewayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongGatewayResponse, error) {
	rsp, err := c.GetV1IntegrationsKongGateway(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKongGatewayResponse(rsp)
}

// PostV1IntegrationsKongGatewayWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsKongGatewayResponse
func (c *ClientWithResponses) PostV1IntegrationsKongGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongGatewayResponse, error) {
	rsp, err := c.PostV1IntegrationsKongGatewayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKongGatewayResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsKongGatewayWithResponse(ctx context.Context, body PostV1IntegrationsKongGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongGatewayResponse, error) {
	rsp, err := c.PostV1IntegrationsKongGateway(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKongGatewayResponse(rsp)
}

// DeleteV1IntegrationsKongGatewayIdWithResponse request returning *DeleteV1IntegrationsKongGatewayIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsKongGatewayIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKongGatewayIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsKongGatewayId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsKongGatewayIdResponse(rsp)
}

// GetV1IntegrationsKongGatewayIdWithResponse request returning *GetV1IntegrationsKongGatewayIdResponse
func (c *ClientWithResponses) GetV1IntegrationsKongGatewayIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongGatewayIdResponse, error) {
	rsp, err := c.GetV1IntegrationsKongGatewayId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKongGatewayIdResponse(rsp)
}

// GetV1IntegrationsKongKonnectWithResponse request returning *GetV1IntegrationsKongKonnectResponse
func (c *ClientWithResponses) GetV1IntegrationsKongKonnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongKonnectResponse, error) {
	rsp, err := c.GetV1IntegrationsKongKonnect(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKongKonnectResponse(rsp)
}

// PostV1IntegrationsKongKonnectWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsKongKonnectResponse
func (c *ClientWithResponses) PostV1IntegrationsKongKonnectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongKonnectResponse, error) {
	rsp, err := c.PostV1IntegrationsKongKonnectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKongKonnectResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsKongKonnectWithResponse(ctx context.Context, body PostV1IntegrationsKongKonnectJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKongKonnectResponse, error) {
	rsp, err := c.PostV1IntegrationsKongKonnect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKongKonnectResponse(rsp)
}

// DeleteV1IntegrationsKongKonnectIdWithResponse request returning *DeleteV1IntegrationsKongKonnectIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsKongKonnectIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKongKonnectIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsKongKonnectId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsKongKonnectIdResponse(rsp)
}

// GetV1IntegrationsKongKonnectIdWithResponse request returning *GetV1IntegrationsKongKonnectIdResponse
func (c *ClientWithResponses) GetV1IntegrationsKongKonnectIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKongKonnectIdResponse, error) {
	rsp, err := c.GetV1IntegrationsKongKonnectId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKongKonnectIdResponse(rsp)
}

// GetV1IntegrationsKubernetesWithResponse request returning *GetV1IntegrationsKubernetesResponse
func (c *ClientWithResponses) GetV1IntegrationsKubernetesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKubernetesResponse, error) {
	rsp, err := c.GetV1IntegrationsKubernetes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKubernetesResponse(rsp)
}

// PostV1IntegrationsKubernetesWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsKubernetesResponse
func (c *ClientWithResponses) PostV1IntegrationsKubernetesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKubernetesResponse, error) {
	rsp, err := c.PostV1IntegrationsKubernetesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKubernetesResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsKubernetesWithResponse(ctx context.Context, body PostV1IntegrationsKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsKubernetesResponse, error) {
	rsp, err := c.PostV1IntegrationsKubernetes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsKubernetesResponse(rsp)
}

// DeleteV1IntegrationsKubernetesIdWithResponse request returning *DeleteV1IntegrationsKubernetesIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsKubernetesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsKubernetesIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsKubernetesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsKubernetesIdResponse(rsp)
}

// GetV1IntegrationsKubernetesIdWithResponse request returning *GetV1IntegrationsKubernetesIdResponse
func (c *ClientWithResponses) GetV1IntegrationsKubernetesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsKubernetesIdResponse, error) {
	rsp, err := c.GetV1IntegrationsKubernetesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsKubernetesIdResponse(rsp)
}

// GetV1IntegrationsPostmanApiKeyWithResponse request returning *GetV1IntegrationsPostmanApiKeyResponse
func (c *ClientWithResponses) GetV1IntegrationsPostmanApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsPostmanApiKeyResponse, error) {
	rsp, err := c.GetV1IntegrationsPostmanApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsPostmanApiKeyResponse(rsp)
}

// PostV1IntegrationsPostmanApiKeyWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsPostmanApiKeyResponse
func (c *ClientWithResponses) PostV1IntegrationsPostmanApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsPostmanApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsPostmanApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsPostmanApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsPostmanApiKeyWithResponse(ctx context.Context, body PostV1IntegrationsPostmanApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsPostmanApiKeyResponse, error) {
	rsp, err := c.PostV1IntegrationsPostmanApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsPostmanApiKeyResponse(rsp)
}

// DeleteV1IntegrationsPostmanApiKeyIdWithResponse request returning *DeleteV1IntegrationsPostmanApiKeyIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsPostmanApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsPostmanApiKeyIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsPostmanApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsPostmanApiKeyIdResponse(rsp)
}

// GetV1IntegrationsPostmanApiKeyIdWithResponse request returning *GetV1IntegrationsPostmanApiKeyIdResponse
func (c *ClientWithResponses) GetV1IntegrationsPostmanApiKeyIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsPostmanApiKeyIdResponse, error) {
	rsp, err := c.GetV1IntegrationsPostmanApiKeyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsPostmanApiKeyIdResponse(rsp)
}

// GetV1IntegrationsSlackWebhookWithResponse request returning *GetV1IntegrationsSlackWebhookResponse
func (c *ClientWithResponses) GetV1IntegrationsSlackWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsSlackWebhookResponse, error) {
	rsp, err := c.GetV1IntegrationsSlackWebhook(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsSlackWebhookResponse(rsp)
}

// PostV1IntegrationsSlackWebhookWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsSlackWebhookResponse
func (c *ClientWithResponses) PostV1IntegrationsSlackWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsSlackWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsSlackWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsSlackWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsSlackWebhookWithResponse(ctx context.Context, body PostV1IntegrationsSlackWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsSlackWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsSlackWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsSlackWebhookResponse(rsp)
}

// DeleteV1IntegrationsSlackWebhookIdWithResponse request returning *DeleteV1IntegrationsSlackWebhookIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsSlackWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsSlackWebhookIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsSlackWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsSlackWebhookIdResponse(rsp)
}

// GetV1IntegrationsSlackWebhookIdWithResponse request returning *GetV1IntegrationsSlackWebhookIdResponse
func (c *ClientWithResponses) GetV1IntegrationsSlackWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsSlackWebhookIdResponse, error) {
	rsp, err := c.GetV1IntegrationsSlackWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsSlackWebhookIdResponse(rsp)
}

// GetV1IntegrationsTeamsWebhookWithResponse request returning *GetV1IntegrationsTeamsWebhookResponse
func (c *ClientWithResponses) GetV1IntegrationsTeamsWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsTeamsWebhookResponse, error) {
	rsp, err := c.GetV1IntegrationsTeamsWebhook(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsTeamsWebhookResponse(rsp)
}

// PostV1IntegrationsTeamsWebhookWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsTeamsWebhookResponse
func (c *ClientWithResponses) PostV1IntegrationsTeamsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsTeamsWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsTeamsWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsTeamsWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsTeamsWebhookWithResponse(ctx context.Context, body PostV1IntegrationsTeamsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsTeamsWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsTeamsWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsTeamsWebhookResponse(rsp)
}

// DeleteV1IntegrationsTeamsWebhookIdWithResponse request returning *DeleteV1IntegrationsTeamsWebhookIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsTeamsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsTeamsWebhookIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsTeamsWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsTeamsWebhookIdResponse(rsp)
}

// GetV1IntegrationsTeamsWebhookIdWithResponse request returning *GetV1IntegrationsTeamsWebhookIdResponse
func (c *ClientWithResponses) GetV1IntegrationsTeamsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsTeamsWebhookIdResponse, error) {
	rsp, err := c.GetV1IntegrationsTeamsWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsTeamsWebhookIdResponse(rsp)
}

// GetV1IntegrationsWebhookWithResponse request returning *GetV1IntegrationsWebhookResponse
func (c *ClientWithResponses) GetV1IntegrationsWebhookWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWebhookResponse, error) {
	rsp, err := c.GetV1IntegrationsWebhook(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsWebhookResponse(rsp)
}

// PostV1IntegrationsWebhookWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsWebhookResponse
func (c *ClientWithResponses) PostV1IntegrationsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsWebhookWithResponse(ctx context.Context, body PostV1IntegrationsWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWebhookResponse, error) {
	rsp, err := c.PostV1IntegrationsWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsWebhookResponse(rsp)
}

// DeleteV1IntegrationsWebhookIdWithResponse request returning *DeleteV1IntegrationsWebhookIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsWebhookIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsWebhookIdResponse(rsp)
}

// GetV1IntegrationsWebhookIdWithResponse request returning *GetV1IntegrationsWebhookIdResponse
func (c *ClientWithResponses) GetV1IntegrationsWebhookIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWebhookIdResponse, error) {
	rsp, err := c.GetV1IntegrationsWebhookId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsWebhookIdResponse(rsp)
}

// GetV1IntegrationsWizWithResponse request returning *GetV1IntegrationsWizResponse
func (c *ClientWithResponses) GetV1IntegrationsWizWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWizResponse, error) {
	rsp, err := c.GetV1IntegrationsWiz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsWizResponse(rsp)
}

// PostV1IntegrationsWizWithBodyWithResponse request with arbitrary body returning *PostV1IntegrationsWizResponse
func (c *ClientWithResponses) PostV1IntegrationsWizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWizResponse, error) {
	rsp, err := c.PostV1IntegrationsWizWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsWizResponse(rsp)
}

func (c *ClientWithResponses) PostV1IntegrationsWizWithResponse(ctx context.Context, body PostV1IntegrationsWizJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IntegrationsWizResponse, error) {
	rsp, err := c.PostV1IntegrationsWiz(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IntegrationsWizResponse(rsp)
}

// DeleteV1IntegrationsWizIdWithResponse request returning *DeleteV1IntegrationsWizIdResponse
func (c *ClientWithResponses) DeleteV1IntegrationsWizIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1IntegrationsWizIdResponse, error) {
	rsp, err := c.DeleteV1IntegrationsWizId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1IntegrationsWizIdResponse(rsp)
}

// GetV1IntegrationsWizIdWithResponse request returning *GetV1IntegrationsWizIdResponse
func (c *ClientWithResponses) GetV1IntegrationsWizIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1IntegrationsWizIdResponse, error) {
	rsp, err := c.GetV1IntegrationsWizId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IntegrationsWizIdResponse(rsp)
}

// ListLocationsWithResponse request returning *ListLocationsResponse
func (c *ClientWithResponses) ListLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLocationsResponse, error) {
	rsp, err := c.ListLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLocationsResponse(rsp)
}

// CreateLocationWithBodyWithResponse request with arbitrary body returning *CreateLocationResponse
func (c *ClientWithResponses) CreateLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocationResponse, error) {
	rsp, err := c.CreateLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocationResponse(rsp)
}

func (c *ClientWithResponses) CreateLocationWithResponse(ctx context.Context, body CreateLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocationResponse, error) {
	rsp, err := c.CreateLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocationResponse(rsp)
}

// UpsertLocationWithBodyWithResponse request with arbitrary body returning *UpsertLocationResponse
func (c *ClientWithResponses) UpsertLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertLocationResponse, error) {
	rsp, err := c.UpsertLocationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertLocationResponse(rsp)
}

func (c *ClientWithResponses) UpsertLocationWithResponse(ctx context.Context, body UpsertLocationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertLocationResponse, error) {
	rsp, err := c.UpsertLocation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertLocationResponse(rsp)
}

// DeleteLocationWithResponse request returning *DeleteLocationResponse
func (c *ClientWithResponses) DeleteLocationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteLocationResponse, error) {
	rsp, err := c.DeleteLocation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocationResponse(rsp)
}

// GetLocationWithResponse request returning *GetLocationResponse
func (c *ClientWithResponses) GetLocationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetLocationResponse, error) {
	rsp, err := c.GetLocation(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationResponse(rsp)
}

// GetV1OrganizationIdSchemasWithResponse request returning *GetV1OrganizationIdSchemasResponse
func (c *ClientWithResponses) GetV1OrganizationIdSchemasWithResponse(ctx context.Context, id openapi_types.UUID, params *GetV1OrganizationIdSchemasParams, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasResponse, error) {
	rsp, err := c.GetV1OrganizationIdSchemas(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdSchemasResponse(rsp)
}

// GetV1OrganizationIdSchemasSchemaIdWithResponse request returning *GetV1OrganizationIdSchemasSchemaIdResponse
func (c *ClientWithResponses) GetV1OrganizationIdSchemasSchemaIdWithResponse(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasSchemaIdResponse, error) {
	rsp, err := c.GetV1OrganizationIdSchemasSchemaId(ctx, id, schemaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdSchemasSchemaIdResponse(rsp)
}

// GetV1OrganizationIdServicesWithResponse request returning *GetV1OrganizationIdServicesResponse
func (c *ClientWithResponses) GetV1OrganizationIdServicesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdServicesResponse, error) {
	rsp, err := c.GetV1OrganizationIdServices(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdServicesResponse(rsp)
}

// ParseGetApplicationIdResponse parses an HTTP response from a GetApplicationIdWithResponse call
func ParseGetApplicationIdResponse(rsp *http.Response) (*GetApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			LastSuccessfulScan         *struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
			} `json:"lastSuccessfulScan"`
			Name  string `json:"name"`
			Scans []struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
				Status GetApplicationId200ScansStatus `json:"status"`
			} `json:"scans"`
			Service struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApplicationsIdStartScanResponse parses an HTTP response from a PostApplicationsIdStartScanWithResponse call
func ParsePostApplicationsIdStartScanResponse(rsp *http.Response) (*PostApplicationsIdStartScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationsIdStartScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CompletionRatio     float32                              `json:"completionRatio"`
			CreatedAt           time.Time                            `json:"createdAt"`
			CreatedSince        float32                              `json:"createdSince"`
			Duration            *float32                             `json:"duration"`
			Id                  openapi_types.UUID                   `json:"id"`
			ReadonlyAccessToken string                               `json:"readonlyAccessToken"`
			Status              PostApplicationsIdStartScan200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error  string `json:"error"`
			Events *[]struct {
				Logline  string                                        `json:"logline"`
				Severity *PostApplicationsIdStartScan400EventsSeverity `json:"severity"`
			} `json:"events,omitempty"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApplicationsIdUploadSchemaResponse parses an HTTP response from a PostApplicationsIdUploadSchemaWithResponse call
func ParsePostApplicationsIdUploadSchemaResponse(rsp *http.Response) (*PostApplicationsIdUploadSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationsIdUploadSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id openapi_types.UUID `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCreateApplicationResponse parses an HTTP response from a PostCreateApplicationWithResponse call
func ParsePostCreateApplicationResponse(rsp *http.Response) (*PostCreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Href     string             `json:"href"`
			Id       openapi_types.UUID `json:"id"`
			LastScan struct {
				ScanId openapi_types.UUID `json:"scanId"`
			} `json:"lastScan"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationIdApplicationsResponse parses an HTTP response from a GetOrganizationIdApplicationsWithResponse call
func ParseGetOrganizationIdApplicationsResponse(rsp *http.Response) (*GetOrganizationIdApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationIdApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			LastSuccessfulScan         *struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
			} `json:"lastSuccessfulScan"`
			Name  string `json:"name"`
			Scans []struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
				Status GetOrganizationIdApplications200ScansStatus `json:"status"`
			} `json:"scans"`
			Service struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationIdApplicationsSearchResponse parses an HTTP response from a GetOrganizationIdApplicationsSearchWithResponse call
func ParseGetOrganizationIdApplicationsSearchResponse(rsp *http.Response) (*GetOrganizationIdApplicationsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationIdApplicationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cursor *string `json:"cursor"`
			Data   []struct {
				AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
				CreatedAt                  time.Time          `json:"createdAt"`
				Cron                       *string            `json:"cron"`
				HasCI                      bool               `json:"hasCI"`
				Id                         openapi_types.UUID `json:"id"`
				Name                       string             `json:"name"`
				Service                    struct {
					Tags []struct {
						Color string `json:"color"`
						Name  string `json:"name"`
					} `json:"tags"`
					Url string `json:"url"`
				} `json:"service"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScansIdResponse parses an HTTP response from a GetScansIdWithResponse call
func ParseGetScansIdResponse(rsp *http.Response) (*GetScansIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Application struct {
				ActiveSchema struct {
					ApplicationId openapi_types.UUID `json:"applicationId"`
					CreatedAt     time.Time          `json:"createdAt"`
					Id            openapi_types.UUID `json:"id"`
				} `json:"activeSchema"`
				CreatedAt time.Time          `json:"createdAt"`
				Id        openapi_types.UUID `json:"id"`
				Name      string             `json:"name"`
				Service   struct {
					Framework string `json:"framework"`
				} `json:"service"`
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"application"`
			CommitHash      *string `json:"commitHash"`
			CompletionRatio float32 `json:"completionRatio"`
			Configuration   struct {
				AuthenticationUsers *[]struct {
					HeaderName  string `json:"headerName"`
					HeaderValue string `json:"headerValue"`
					Name        string `json:"name"`
				} `json:"authenticationUsers"`
				Content               *interface{} `json:"content"`
				CreatedAt             time.Time    `json:"createdAt"`
				IsAuthenticationValid bool         `json:"isAuthenticationValid"`
				IsConfigurationValid  bool         `json:"isConfigurationValid"`
				ReadWrite             bool         `json:"readWrite"`
				UpdatedAt             time.Time    `json:"updatedAt"`
			} `json:"configuration"`
			CreatedAt     time.Time          `json:"createdAt"`
			Id            openapi_types.UUID `json:"id"`
			SecurityTests []struct {
				Alerts []struct {
					Context   string `json:"context"`
					Exchanges []struct {
						Curl string `json:"curl"`
					} `json:"exchanges"`
					Id       openapi_types.UUID                       `json:"id"`
					Path     []string                                 `json:"path"`
					Risks    map[string]*interface{}                  `json:"risks"`
					Severity GetScansId200SecurityTestsAlertsSeverity `json:"severity"`
				} `json:"alerts"`
				Category   string `json:"category"`
				Compliance []struct {
					Name  string `json:"name"`
					Value string `json:"value"`
				} `json:"compliance"`
				Description     string                             `json:"description"`
				FailureName     string                             `json:"failureName"`
				Remediation     string                             `json:"remediation"`
				SecurityTestUid string                             `json:"securityTestUid"`
				Severity        GetScansId200SecurityTestsSeverity `json:"severity"`
			} `json:"securityTests"`
			Status GetScansId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAkamaiResponse parses an HTTP response from a GetV1IntegrationsAkamaiWithResponse call
func ParseGetV1IntegrationsAkamaiResponse(rsp *http.Response) (*GetV1IntegrationsAkamaiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAkamaiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID             `json:"id"`
			Kind       GetV1IntegrationsAkamai200Kind `json:"kind"`
			LocationId *openapi_types.UUID            `json:"locationId"`
			Name       string                         `json:"name"`
			Parameters struct {
				AccessToken  string `json:"access_token"`
				ClientSecret string `json:"client_secret"`
				ClientToken  string `json:"client_token"`
				Host         string `json:"host"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsAkamaiResponse parses an HTTP response from a PostV1IntegrationsAkamaiWithResponse call
func ParsePostV1IntegrationsAkamaiResponse(rsp *http.Response) (*PostV1IntegrationsAkamaiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsAkamaiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID              `json:"id"`
			Kind       PostV1IntegrationsAkamai200Kind `json:"kind"`
			LocationId *openapi_types.UUID             `json:"locationId"`
			Name       string                          `json:"name"`
			Parameters struct {
				AccessToken  string `json:"access_token"`
				ClientSecret string `json:"client_secret"`
				ClientToken  string `json:"client_token"`
				Host         string `json:"host"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsAkamaiIdResponse parses an HTTP response from a DeleteV1IntegrationsAkamaiIdWithResponse call
func ParseDeleteV1IntegrationsAkamaiIdResponse(rsp *http.Response) (*DeleteV1IntegrationsAkamaiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsAkamaiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAkamaiIdResponse parses an HTTP response from a GetV1IntegrationsAkamaiIdWithResponse call
func ParseGetV1IntegrationsAkamaiIdResponse(rsp *http.Response) (*GetV1IntegrationsAkamaiIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAkamaiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID               `json:"id"`
			Kind       GetV1IntegrationsAkamaiId200Kind `json:"kind"`
			LocationId *openapi_types.UUID              `json:"locationId"`
			Name       string                           `json:"name"`
			Parameters struct {
				AccessToken  string `json:"access_token"`
				ClientSecret string `json:"client_secret"`
				ClientToken  string `json:"client_token"`
				Host         string `json:"host"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsApigeeResponse parses an HTTP response from a GetV1IntegrationsApigeeWithResponse call
func ParseGetV1IntegrationsApigeeResponse(rsp *http.Response) (*GetV1IntegrationsApigeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsApigeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID             `json:"id"`
			Kind       GetV1IntegrationsApigee200Kind `json:"kind"`
			LocationId *openapi_types.UUID            `json:"locationId"`
			Name       string                         `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsApigeeResponse parses an HTTP response from a PostV1IntegrationsApigeeWithResponse call
func ParsePostV1IntegrationsApigeeResponse(rsp *http.Response) (*PostV1IntegrationsApigeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsApigeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID              `json:"id"`
			Kind       PostV1IntegrationsApigee200Kind `json:"kind"`
			LocationId *openapi_types.UUID             `json:"locationId"`
			Name       string                          `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsApigeeIdResponse parses an HTTP response from a DeleteV1IntegrationsApigeeIdWithResponse call
func ParseDeleteV1IntegrationsApigeeIdResponse(rsp *http.Response) (*DeleteV1IntegrationsApigeeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsApigeeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsApigeeIdResponse parses an HTTP response from a GetV1IntegrationsApigeeIdWithResponse call
func ParseGetV1IntegrationsApigeeIdResponse(rsp *http.Response) (*GetV1IntegrationsApigeeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsApigeeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID               `json:"id"`
			Kind       GetV1IntegrationsApigeeId200Kind `json:"kind"`
			LocationId *openapi_types.UUID              `json:"locationId"`
			Name       string                           `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAwsResponse parses an HTTP response from a GetV1IntegrationsAwsWithResponse call
func ParseGetV1IntegrationsAwsResponse(rsp *http.Response) (*GetV1IntegrationsAwsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAwsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID          `json:"id"`
			Kind       GetV1IntegrationsAws200Kind `json:"kind"`
			LocationId *openapi_types.UUID         `json:"locationId"`
			Name       string                      `json:"name"`
			Parameters struct {
				PrivKey string `json:"priv_key"`
				PubKey  string `json:"pub_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsAwsResponse parses an HTTP response from a PostV1IntegrationsAwsWithResponse call
func ParsePostV1IntegrationsAwsResponse(rsp *http.Response) (*PostV1IntegrationsAwsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsAwsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID           `json:"id"`
			Kind       PostV1IntegrationsAws200Kind `json:"kind"`
			LocationId *openapi_types.UUID          `json:"locationId"`
			Name       string                       `json:"name"`
			Parameters struct {
				PrivKey string `json:"priv_key"`
				PubKey  string `json:"pub_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsAwsIdResponse parses an HTTP response from a DeleteV1IntegrationsAwsIdWithResponse call
func ParseDeleteV1IntegrationsAwsIdResponse(rsp *http.Response) (*DeleteV1IntegrationsAwsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsAwsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAwsIdResponse parses an HTTP response from a GetV1IntegrationsAwsIdWithResponse call
func ParseGetV1IntegrationsAwsIdResponse(rsp *http.Response) (*GetV1IntegrationsAwsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAwsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       GetV1IntegrationsAwsId200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters struct {
				PrivKey string `json:"priv_key"`
				PubKey  string `json:"pub_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAzureResponse parses an HTTP response from a GetV1IntegrationsAzureWithResponse call
func ParseGetV1IntegrationsAzureResponse(rsp *http.Response) (*GetV1IntegrationsAzureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       GetV1IntegrationsAzure200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters struct {
				ClientId       string  `json:"client_id"`
				ClientSecret   string  `json:"client_secret"`
				SubscriptionId *string `json:"subscription_id,omitempty"`
				TenantId       string  `json:"tenant_id"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsAzureResponse parses an HTTP response from a PostV1IntegrationsAzureWithResponse call
func ParsePostV1IntegrationsAzureResponse(rsp *http.Response) (*PostV1IntegrationsAzureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID             `json:"id"`
			Kind       PostV1IntegrationsAzure200Kind `json:"kind"`
			LocationId *openapi_types.UUID            `json:"locationId"`
			Name       string                         `json:"name"`
			Parameters struct {
				ClientId       string  `json:"client_id"`
				ClientSecret   string  `json:"client_secret"`
				SubscriptionId *string `json:"subscription_id,omitempty"`
				TenantId       string  `json:"tenant_id"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsAzureIdResponse parses an HTTP response from a DeleteV1IntegrationsAzureIdWithResponse call
func ParseDeleteV1IntegrationsAzureIdResponse(rsp *http.Response) (*DeleteV1IntegrationsAzureIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsAzureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAzureIdResponse parses an HTTP response from a GetV1IntegrationsAzureIdWithResponse call
func ParseGetV1IntegrationsAzureIdResponse(rsp *http.Response) (*GetV1IntegrationsAzureIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAzureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID              `json:"id"`
			Kind       GetV1IntegrationsAzureId200Kind `json:"kind"`
			LocationId *openapi_types.UUID             `json:"locationId"`
			Name       string                          `json:"name"`
			Parameters struct {
				ClientId       string  `json:"client_id"`
				ClientSecret   string  `json:"client_secret"`
				SubscriptionId *string `json:"subscription_id,omitempty"`
				TenantId       string  `json:"tenant_id"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAzureDevopsResponse parses an HTTP response from a GetV1IntegrationsAzureDevopsWithResponse call
func ParseGetV1IntegrationsAzureDevopsResponse(rsp *http.Response) (*GetV1IntegrationsAzureDevopsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAzureDevopsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                  `json:"id"`
			Kind       GetV1IntegrationsAzureDevops200Kind `json:"kind"`
			LocationId *openapi_types.UUID                 `json:"locationId"`
			Name       string                              `json:"name"`
			Parameters struct {
				ApiKey      string `json:"api_key"`
				InstanceUrl string `json:"instance_url"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsAzureDevopsResponse parses an HTTP response from a PostV1IntegrationsAzureDevopsWithResponse call
func ParsePostV1IntegrationsAzureDevopsResponse(rsp *http.Response) (*PostV1IntegrationsAzureDevopsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsAzureDevopsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       PostV1IntegrationsAzureDevops200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				ApiKey      string `json:"api_key"`
				InstanceUrl string `json:"instance_url"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsAzureDevopsIdResponse parses an HTTP response from a DeleteV1IntegrationsAzureDevopsIdWithResponse call
func ParseDeleteV1IntegrationsAzureDevopsIdResponse(rsp *http.Response) (*DeleteV1IntegrationsAzureDevopsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsAzureDevopsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsAzureDevopsIdResponse parses an HTTP response from a GetV1IntegrationsAzureDevopsIdWithResponse call
func ParseGetV1IntegrationsAzureDevopsIdResponse(rsp *http.Response) (*GetV1IntegrationsAzureDevopsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsAzureDevopsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       GetV1IntegrationsAzureDevopsId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				ApiKey      string `json:"api_key"`
				InstanceUrl string `json:"instance_url"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsBitbucketRepoResponse parses an HTTP response from a GetV1IntegrationsBitbucketRepoWithResponse call
func ParseGetV1IntegrationsBitbucketRepoResponse(rsp *http.Response) (*GetV1IntegrationsBitbucketRepoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsBitbucketRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       GetV1IntegrationsBitbucketRepo200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				ApiKey         string  `json:"api_key"`
				InstanceUrl    *string `json:"instance_url,omitempty"`
				RepositoryName string  `json:"repository_name"`
				Username       *string `json:"username,omitempty"`
				WorkspaceName  string  `json:"workspace_name"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsBitbucketRepoResponse parses an HTTP response from a PostV1IntegrationsBitbucketRepoWithResponse call
func ParsePostV1IntegrationsBitbucketRepoResponse(rsp *http.Response) (*PostV1IntegrationsBitbucketRepoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsBitbucketRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       PostV1IntegrationsBitbucketRepo200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters struct {
				ApiKey         string  `json:"api_key"`
				InstanceUrl    *string `json:"instance_url,omitempty"`
				RepositoryName string  `json:"repository_name"`
				Username       *string `json:"username,omitempty"`
				WorkspaceName  string  `json:"workspace_name"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsBitbucketRepoIdResponse parses an HTTP response from a DeleteV1IntegrationsBitbucketRepoIdWithResponse call
func ParseDeleteV1IntegrationsBitbucketRepoIdResponse(rsp *http.Response) (*DeleteV1IntegrationsBitbucketRepoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsBitbucketRepoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsBitbucketRepoIdResponse parses an HTTP response from a GetV1IntegrationsBitbucketRepoIdWithResponse call
func ParseGetV1IntegrationsBitbucketRepoIdResponse(rsp *http.Response) (*GetV1IntegrationsBitbucketRepoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsBitbucketRepoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                      `json:"id"`
			Kind       GetV1IntegrationsBitbucketRepoId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                     `json:"locationId"`
			Name       string                                  `json:"name"`
			Parameters struct {
				ApiKey         string  `json:"api_key"`
				InstanceUrl    *string `json:"instance_url,omitempty"`
				RepositoryName string  `json:"repository_name"`
				Username       *string `json:"username,omitempty"`
				WorkspaceName  string  `json:"workspace_name"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsCloudflareResponse parses an HTTP response from a GetV1IntegrationsCloudflareWithResponse call
func ParseGetV1IntegrationsCloudflareResponse(rsp *http.Response) (*GetV1IntegrationsCloudflareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsCloudflareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                 `json:"id"`
			Kind       GetV1IntegrationsCloudflare200Kind `json:"kind"`
			LocationId *openapi_types.UUID                `json:"locationId"`
			Name       string                             `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsCloudflareResponse parses an HTTP response from a PostV1IntegrationsCloudflareWithResponse call
func ParsePostV1IntegrationsCloudflareResponse(rsp *http.Response) (*PostV1IntegrationsCloudflareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsCloudflareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                  `json:"id"`
			Kind       PostV1IntegrationsCloudflare200Kind `json:"kind"`
			LocationId *openapi_types.UUID                 `json:"locationId"`
			Name       string                              `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsCloudflareIdResponse parses an HTTP response from a DeleteV1IntegrationsCloudflareIdWithResponse call
func ParseDeleteV1IntegrationsCloudflareIdResponse(rsp *http.Response) (*DeleteV1IntegrationsCloudflareIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsCloudflareIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsCloudflareIdResponse parses an HTTP response from a GetV1IntegrationsCloudflareIdWithResponse call
func ParseGetV1IntegrationsCloudflareIdResponse(rsp *http.Response) (*GetV1IntegrationsCloudflareIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsCloudflareIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsCloudflareId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsDiscordWebhookResponse parses an HTTP response from a GetV1IntegrationsDiscordWebhookWithResponse call
func ParseGetV1IntegrationsDiscordWebhookResponse(rsp *http.Response) (*GetV1IntegrationsDiscordWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsDiscordWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       GetV1IntegrationsDiscordWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters map[string]interface{}                 `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsDiscordWebhookResponse parses an HTTP response from a PostV1IntegrationsDiscordWebhookWithResponse call
func ParsePostV1IntegrationsDiscordWebhookResponse(rsp *http.Response) (*PostV1IntegrationsDiscordWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsDiscordWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                      `json:"id"`
			Kind       PostV1IntegrationsDiscordWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                     `json:"locationId"`
			Name       string                                  `json:"name"`
			Parameters map[string]interface{}                  `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsDiscordWebhookIdResponse parses an HTTP response from a DeleteV1IntegrationsDiscordWebhookIdWithResponse call
func ParseDeleteV1IntegrationsDiscordWebhookIdResponse(rsp *http.Response) (*DeleteV1IntegrationsDiscordWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsDiscordWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsDiscordWebhookIdResponse parses an HTTP response from a GetV1IntegrationsDiscordWebhookIdWithResponse call
func ParseGetV1IntegrationsDiscordWebhookIdResponse(rsp *http.Response) (*GetV1IntegrationsDiscordWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsDiscordWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                       `json:"id"`
			Kind       GetV1IntegrationsDiscordWebhookId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                      `json:"locationId"`
			Name       string                                   `json:"name"`
			Parameters map[string]interface{}                   `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsEmailResponse parses an HTTP response from a GetV1IntegrationsEmailWithResponse call
func ParseGetV1IntegrationsEmailResponse(rsp *http.Response) (*GetV1IntegrationsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       GetV1IntegrationsEmail200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters map[string]interface{}        `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsEmailResponse parses an HTTP response from a PostV1IntegrationsEmailWithResponse call
func ParsePostV1IntegrationsEmailResponse(rsp *http.Response) (*PostV1IntegrationsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID             `json:"id"`
			Kind       PostV1IntegrationsEmail200Kind `json:"kind"`
			LocationId *openapi_types.UUID            `json:"locationId"`
			Name       string                         `json:"name"`
			Parameters map[string]interface{}         `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsEmailIdResponse parses an HTTP response from a DeleteV1IntegrationsEmailIdWithResponse call
func ParseDeleteV1IntegrationsEmailIdResponse(rsp *http.Response) (*DeleteV1IntegrationsEmailIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsEmailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsEmailIdResponse parses an HTTP response from a GetV1IntegrationsEmailIdWithResponse call
func ParseGetV1IntegrationsEmailIdResponse(rsp *http.Response) (*GetV1IntegrationsEmailIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsEmailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID              `json:"id"`
			Kind       GetV1IntegrationsEmailId200Kind `json:"kind"`
			LocationId *openapi_types.UUID             `json:"locationId"`
			Name       string                          `json:"name"`
			Parameters map[string]interface{}          `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGcpResponse parses an HTTP response from a GetV1IntegrationsGcpWithResponse call
func ParseGetV1IntegrationsGcpResponse(rsp *http.Response) (*GetV1IntegrationsGcpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID          `json:"id"`
			Kind       GetV1IntegrationsGcp200Kind `json:"kind"`
			LocationId *openapi_types.UUID         `json:"locationId"`
			Name       string                      `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsGcpResponse parses an HTTP response from a PostV1IntegrationsGcpWithResponse call
func ParsePostV1IntegrationsGcpResponse(rsp *http.Response) (*PostV1IntegrationsGcpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsGcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID           `json:"id"`
			Kind       PostV1IntegrationsGcp200Kind `json:"kind"`
			LocationId *openapi_types.UUID          `json:"locationId"`
			Name       string                       `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsGcpIdResponse parses an HTTP response from a DeleteV1IntegrationsGcpIdWithResponse call
func ParseDeleteV1IntegrationsGcpIdResponse(rsp *http.Response) (*DeleteV1IntegrationsGcpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsGcpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGcpIdResponse parses an HTTP response from a GetV1IntegrationsGcpIdWithResponse call
func ParseGetV1IntegrationsGcpIdResponse(rsp *http.Response) (*GetV1IntegrationsGcpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGcpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       GetV1IntegrationsGcpId200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters struct {
				AuthProviderX509CertUrl string `json:"auth_provider_x509_cert_url"`
				AuthUri                 string `json:"auth_uri"`
				ClientEmail             string `json:"client_email"`
				ClientId                string `json:"client_id"`
				ClientX509CertUrl       string `json:"client_x509_cert_url"`
				PrivateKey              string `json:"private_key"`
				PrivateKeyId            string `json:"private_key_id"`
				ProjectId               string `json:"project_id"`
				TokenUri                string `json:"token_uri"`
				Type                    string `json:"type"`
				UniverseDomain          string `json:"universe_domain"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGithubApiKeyResponse parses an HTTP response from a GetV1IntegrationsGithubApiKeyWithResponse call
func ParseGetV1IntegrationsGithubApiKeyResponse(rsp *http.Response) (*GetV1IntegrationsGithubApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGithubApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsGithubApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsGithubApiKeyResponse parses an HTTP response from a PostV1IntegrationsGithubApiKeyWithResponse call
func ParsePostV1IntegrationsGithubApiKeyResponse(rsp *http.Response) (*PostV1IntegrationsGithubApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsGithubApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       PostV1IntegrationsGithubApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsGithubApiKeyIdResponse parses an HTTP response from a DeleteV1IntegrationsGithubApiKeyIdWithResponse call
func ParseDeleteV1IntegrationsGithubApiKeyIdResponse(rsp *http.Response) (*DeleteV1IntegrationsGithubApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsGithubApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGithubApiKeyIdResponse parses an HTTP response from a GetV1IntegrationsGithubApiKeyIdWithResponse call
func ParseGetV1IntegrationsGithubApiKeyIdResponse(rsp *http.Response) (*GetV1IntegrationsGithubApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGithubApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       GetV1IntegrationsGithubApiKeyId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGitlabApiKeyResponse parses an HTTP response from a GetV1IntegrationsGitlabApiKeyWithResponse call
func ParseGetV1IntegrationsGitlabApiKeyResponse(rsp *http.Response) (*GetV1IntegrationsGitlabApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGitlabApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsGitlabApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				ApiKey      string  `json:"api_key"`
				InstanceUrl *string `json:"instance_url,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsGitlabApiKeyResponse parses an HTTP response from a PostV1IntegrationsGitlabApiKeyWithResponse call
func ParsePostV1IntegrationsGitlabApiKeyResponse(rsp *http.Response) (*PostV1IntegrationsGitlabApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsGitlabApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       PostV1IntegrationsGitlabApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				ApiKey      string  `json:"api_key"`
				InstanceUrl *string `json:"instance_url,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsGitlabApiKeyIdResponse parses an HTTP response from a DeleteV1IntegrationsGitlabApiKeyIdWithResponse call
func ParseDeleteV1IntegrationsGitlabApiKeyIdResponse(rsp *http.Response) (*DeleteV1IntegrationsGitlabApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsGitlabApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsGitlabApiKeyIdResponse parses an HTTP response from a GetV1IntegrationsGitlabApiKeyIdWithResponse call
func ParseGetV1IntegrationsGitlabApiKeyIdResponse(rsp *http.Response) (*GetV1IntegrationsGitlabApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsGitlabApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       GetV1IntegrationsGitlabApiKeyId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters struct {
				ApiKey      string  `json:"api_key"`
				InstanceUrl *string `json:"instance_url,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsJiraResponse parses an HTTP response from a GetV1IntegrationsJiraWithResponse call
func ParseGetV1IntegrationsJiraResponse(rsp *http.Response) (*GetV1IntegrationsJiraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsJiraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID           `json:"id"`
			Kind       GetV1IntegrationsJira200Kind `json:"kind"`
			LocationId *openapi_types.UUID          `json:"locationId"`
			Name       string                       `json:"name"`
			Parameters struct {
				AccountId         string `json:"account_id"`
				ApiKey            string `json:"api_key"`
				Email             string `json:"email"`
				InstanceUrl       string `json:"instance_url"`
				Name              string `json:"name"`
				PropertiesMapping *[]struct {
					EscapeProperty GetV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
					JiraProperty   string                                                            `json:"jira_property"`
				} `json:"properties_mapping,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsJiraResponse parses an HTTP response from a PostV1IntegrationsJiraWithResponse call
func ParsePostV1IntegrationsJiraResponse(rsp *http.Response) (*PostV1IntegrationsJiraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsJiraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       PostV1IntegrationsJira200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters struct {
				AccountId         string `json:"account_id"`
				ApiKey            string `json:"api_key"`
				Email             string `json:"email"`
				InstanceUrl       string `json:"instance_url"`
				Name              string `json:"name"`
				PropertiesMapping *[]struct {
					EscapeProperty PostV1IntegrationsJira200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
					JiraProperty   string                                                             `json:"jira_property"`
				} `json:"properties_mapping,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsJiraIdResponse parses an HTTP response from a DeleteV1IntegrationsJiraIdWithResponse call
func ParseDeleteV1IntegrationsJiraIdResponse(rsp *http.Response) (*DeleteV1IntegrationsJiraIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsJiraIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsJiraIdResponse parses an HTTP response from a GetV1IntegrationsJiraIdWithResponse call
func ParseGetV1IntegrationsJiraIdResponse(rsp *http.Response) (*GetV1IntegrationsJiraIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsJiraIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID             `json:"id"`
			Kind       GetV1IntegrationsJiraId200Kind `json:"kind"`
			LocationId *openapi_types.UUID            `json:"locationId"`
			Name       string                         `json:"name"`
			Parameters struct {
				AccountId         string `json:"account_id"`
				ApiKey            string `json:"api_key"`
				Email             string `json:"email"`
				InstanceUrl       string `json:"instance_url"`
				Name              string `json:"name"`
				PropertiesMapping *[]struct {
					EscapeProperty GetV1IntegrationsJiraId200ParametersPropertiesMappingEscapeProperty `json:"escape_property"`
					JiraProperty   string                                                              `json:"jira_property"`
				} `json:"properties_mapping,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKongGatewayResponse parses an HTTP response from a GetV1IntegrationsKongGatewayWithResponse call
func ParseGetV1IntegrationsKongGatewayResponse(rsp *http.Response) (*GetV1IntegrationsKongGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKongGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                  `json:"id"`
			Kind       GetV1IntegrationsKongGateway200Kind `json:"kind"`
			LocationId *openapi_types.UUID                 `json:"locationId"`
			Name       string                              `json:"name"`
			Parameters struct {
				AdminApiUrl string `json:"admin_api_url"`
				ApiKey      string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsKongGatewayResponse parses an HTTP response from a PostV1IntegrationsKongGatewayWithResponse call
func ParsePostV1IntegrationsKongGatewayResponse(rsp *http.Response) (*PostV1IntegrationsKongGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsKongGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       PostV1IntegrationsKongGateway200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				AdminApiUrl string `json:"admin_api_url"`
				ApiKey      string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsKongGatewayIdResponse parses an HTTP response from a DeleteV1IntegrationsKongGatewayIdWithResponse call
func ParseDeleteV1IntegrationsKongGatewayIdResponse(rsp *http.Response) (*DeleteV1IntegrationsKongGatewayIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsKongGatewayIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKongGatewayIdResponse parses an HTTP response from a GetV1IntegrationsKongGatewayIdWithResponse call
func ParseGetV1IntegrationsKongGatewayIdResponse(rsp *http.Response) (*GetV1IntegrationsKongGatewayIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKongGatewayIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       GetV1IntegrationsKongGatewayId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				AdminApiUrl string `json:"admin_api_url"`
				ApiKey      string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKongKonnectResponse parses an HTTP response from a GetV1IntegrationsKongKonnectWithResponse call
func ParseGetV1IntegrationsKongKonnectResponse(rsp *http.Response) (*GetV1IntegrationsKongKonnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKongKonnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                  `json:"id"`
			Kind       GetV1IntegrationsKongKonnect200Kind `json:"kind"`
			LocationId *openapi_types.UUID                 `json:"locationId"`
			Name       string                              `json:"name"`
			Parameters struct {
				Region             GetV1IntegrationsKongKonnect200ParametersRegion `json:"region"`
				SystemAccountToken string                                          `json:"system_account_token"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsKongKonnectResponse parses an HTTP response from a PostV1IntegrationsKongKonnectWithResponse call
func ParsePostV1IntegrationsKongKonnectResponse(rsp *http.Response) (*PostV1IntegrationsKongKonnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsKongKonnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       PostV1IntegrationsKongKonnect200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				Region             PostV1IntegrationsKongKonnect200ParametersRegion `json:"region"`
				SystemAccountToken string                                           `json:"system_account_token"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsKongKonnectIdResponse parses an HTTP response from a DeleteV1IntegrationsKongKonnectIdWithResponse call
func ParseDeleteV1IntegrationsKongKonnectIdResponse(rsp *http.Response) (*DeleteV1IntegrationsKongKonnectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsKongKonnectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKongKonnectIdResponse parses an HTTP response from a GetV1IntegrationsKongKonnectIdWithResponse call
func ParseGetV1IntegrationsKongKonnectIdResponse(rsp *http.Response) (*GetV1IntegrationsKongKonnectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKongKonnectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       GetV1IntegrationsKongKonnectId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				Region             GetV1IntegrationsKongKonnectId200ParametersRegion `json:"region"`
				SystemAccountToken string                                            `json:"system_account_token"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKubernetesResponse parses an HTTP response from a GetV1IntegrationsKubernetesWithResponse call
func ParseGetV1IntegrationsKubernetesResponse(rsp *http.Response) (*GetV1IntegrationsKubernetesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKubernetesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                 `json:"id"`
			Kind       GetV1IntegrationsKubernetes200Kind `json:"kind"`
			LocationId *openapi_types.UUID                `json:"locationId"`
			Name       string                             `json:"name"`
			Parameters struct {
				Blacklist *struct {
					Namespaces *[]string `json:"namespaces,omitempty"`
				} `json:"blacklist,omitempty"`
				Tags *struct {
					Labels     *[]string `json:"labels,omitempty"`
					Namespaces *bool     `json:"namespaces,omitempty"`
				} `json:"tags,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsKubernetesResponse parses an HTTP response from a PostV1IntegrationsKubernetesWithResponse call
func ParsePostV1IntegrationsKubernetesResponse(rsp *http.Response) (*PostV1IntegrationsKubernetesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsKubernetesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                  `json:"id"`
			Kind       PostV1IntegrationsKubernetes200Kind `json:"kind"`
			LocationId *openapi_types.UUID                 `json:"locationId"`
			Name       string                              `json:"name"`
			Parameters struct {
				Blacklist *struct {
					Namespaces *[]string `json:"namespaces,omitempty"`
				} `json:"blacklist,omitempty"`
				Tags *struct {
					Labels     *[]string `json:"labels,omitempty"`
					Namespaces *bool     `json:"namespaces,omitempty"`
				} `json:"tags,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsKubernetesIdResponse parses an HTTP response from a DeleteV1IntegrationsKubernetesIdWithResponse call
func ParseDeleteV1IntegrationsKubernetesIdResponse(rsp *http.Response) (*DeleteV1IntegrationsKubernetesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsKubernetesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsKubernetesIdResponse parses an HTTP response from a GetV1IntegrationsKubernetesIdWithResponse call
func ParseGetV1IntegrationsKubernetesIdResponse(rsp *http.Response) (*GetV1IntegrationsKubernetesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsKubernetesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsKubernetesId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters struct {
				Blacklist *struct {
					Namespaces *[]string `json:"namespaces,omitempty"`
				} `json:"blacklist,omitempty"`
				Tags *struct {
					Labels     *[]string `json:"labels,omitempty"`
					Namespaces *bool     `json:"namespaces,omitempty"`
				} `json:"tags,omitempty"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsPostmanApiKeyResponse parses an HTTP response from a GetV1IntegrationsPostmanApiKeyWithResponse call
func ParseGetV1IntegrationsPostmanApiKeyResponse(rsp *http.Response) (*GetV1IntegrationsPostmanApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsPostmanApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       GetV1IntegrationsPostmanApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsPostmanApiKeyResponse parses an HTTP response from a PostV1IntegrationsPostmanApiKeyWithResponse call
func ParsePostV1IntegrationsPostmanApiKeyResponse(rsp *http.Response) (*PostV1IntegrationsPostmanApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsPostmanApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       PostV1IntegrationsPostmanApiKey200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsPostmanApiKeyIdResponse parses an HTTP response from a DeleteV1IntegrationsPostmanApiKeyIdWithResponse call
func ParseDeleteV1IntegrationsPostmanApiKeyIdResponse(rsp *http.Response) (*DeleteV1IntegrationsPostmanApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsPostmanApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsPostmanApiKeyIdResponse parses an HTTP response from a GetV1IntegrationsPostmanApiKeyIdWithResponse call
func ParseGetV1IntegrationsPostmanApiKeyIdResponse(rsp *http.Response) (*GetV1IntegrationsPostmanApiKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsPostmanApiKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                      `json:"id"`
			Kind       GetV1IntegrationsPostmanApiKeyId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                     `json:"locationId"`
			Name       string                                  `json:"name"`
			Parameters struct {
				ApiKey string `json:"api_key"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsSlackWebhookResponse parses an HTTP response from a GetV1IntegrationsSlackWebhookWithResponse call
func ParseGetV1IntegrationsSlackWebhookResponse(rsp *http.Response) (*GetV1IntegrationsSlackWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsSlackWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsSlackWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters map[string]interface{}               `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsSlackWebhookResponse parses an HTTP response from a PostV1IntegrationsSlackWebhookWithResponse call
func ParsePostV1IntegrationsSlackWebhookResponse(rsp *http.Response) (*PostV1IntegrationsSlackWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsSlackWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       PostV1IntegrationsSlackWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters map[string]interface{}                `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsSlackWebhookIdResponse parses an HTTP response from a DeleteV1IntegrationsSlackWebhookIdWithResponse call
func ParseDeleteV1IntegrationsSlackWebhookIdResponse(rsp *http.Response) (*DeleteV1IntegrationsSlackWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsSlackWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsSlackWebhookIdResponse parses an HTTP response from a GetV1IntegrationsSlackWebhookIdWithResponse call
func ParseGetV1IntegrationsSlackWebhookIdResponse(rsp *http.Response) (*GetV1IntegrationsSlackWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsSlackWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       GetV1IntegrationsSlackWebhookId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters map[string]interface{}                 `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsTeamsWebhookResponse parses an HTTP response from a GetV1IntegrationsTeamsWebhookWithResponse call
func ParseGetV1IntegrationsTeamsWebhookResponse(rsp *http.Response) (*GetV1IntegrationsTeamsWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsTeamsWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID                   `json:"id"`
			Kind       GetV1IntegrationsTeamsWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                  `json:"locationId"`
			Name       string                               `json:"name"`
			Parameters map[string]interface{}               `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsTeamsWebhookResponse parses an HTTP response from a PostV1IntegrationsTeamsWebhookWithResponse call
func ParsePostV1IntegrationsTeamsWebhookResponse(rsp *http.Response) (*PostV1IntegrationsTeamsWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsTeamsWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                    `json:"id"`
			Kind       PostV1IntegrationsTeamsWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID                   `json:"locationId"`
			Name       string                                `json:"name"`
			Parameters map[string]interface{}                `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsTeamsWebhookIdResponse parses an HTTP response from a DeleteV1IntegrationsTeamsWebhookIdWithResponse call
func ParseDeleteV1IntegrationsTeamsWebhookIdResponse(rsp *http.Response) (*DeleteV1IntegrationsTeamsWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsTeamsWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsTeamsWebhookIdResponse parses an HTTP response from a GetV1IntegrationsTeamsWebhookIdWithResponse call
func ParseGetV1IntegrationsTeamsWebhookIdResponse(rsp *http.Response) (*GetV1IntegrationsTeamsWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsTeamsWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                     `json:"id"`
			Kind       GetV1IntegrationsTeamsWebhookId200Kind `json:"kind"`
			LocationId *openapi_types.UUID                    `json:"locationId"`
			Name       string                                 `json:"name"`
			Parameters map[string]interface{}                 `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsWebhookResponse parses an HTTP response from a GetV1IntegrationsWebhookWithResponse call
func ParseGetV1IntegrationsWebhookResponse(rsp *http.Response) (*GetV1IntegrationsWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID              `json:"id"`
			Kind       GetV1IntegrationsWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID             `json:"locationId"`
			Name       string                          `json:"name"`
			Parameters map[string]interface{}          `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsWebhookResponse parses an HTTP response from a PostV1IntegrationsWebhookWithResponse call
func ParsePostV1IntegrationsWebhookResponse(rsp *http.Response) (*PostV1IntegrationsWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID               `json:"id"`
			Kind       PostV1IntegrationsWebhook200Kind `json:"kind"`
			LocationId *openapi_types.UUID              `json:"locationId"`
			Name       string                           `json:"name"`
			Parameters map[string]interface{}           `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsWebhookIdResponse parses an HTTP response from a DeleteV1IntegrationsWebhookIdWithResponse call
func ParseDeleteV1IntegrationsWebhookIdResponse(rsp *http.Response) (*DeleteV1IntegrationsWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsWebhookIdResponse parses an HTTP response from a GetV1IntegrationsWebhookIdWithResponse call
func ParseGetV1IntegrationsWebhookIdResponse(rsp *http.Response) (*GetV1IntegrationsWebhookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsWebhookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID                `json:"id"`
			Kind       GetV1IntegrationsWebhookId200Kind `json:"kind"`
			LocationId *openapi_types.UUID               `json:"locationId"`
			Name       string                            `json:"name"`
			Parameters map[string]interface{}            `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsWizResponse parses an HTTP response from a GetV1IntegrationsWizWithResponse call
func ParseGetV1IntegrationsWizResponse(rsp *http.Response) (*GetV1IntegrationsWizResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsWizResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id         openapi_types.UUID          `json:"id"`
			Kind       GetV1IntegrationsWiz200Kind `json:"kind"`
			LocationId *openapi_types.UUID         `json:"locationId"`
			Name       string                      `json:"name"`
			Parameters struct {
				ApiEndpoint  string `json:"api_endpoint"`
				ClientId     string `json:"client_id"`
				ClientSecret string `json:"client_secret"`
				TokenUri     string `json:"token_uri"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1IntegrationsWizResponse parses an HTTP response from a PostV1IntegrationsWizWithResponse call
func ParsePostV1IntegrationsWizResponse(rsp *http.Response) (*PostV1IntegrationsWizResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IntegrationsWizResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID           `json:"id"`
			Kind       PostV1IntegrationsWiz200Kind `json:"kind"`
			LocationId *openapi_types.UUID          `json:"locationId"`
			Name       string                       `json:"name"`
			Parameters struct {
				ApiEndpoint  string `json:"api_endpoint"`
				ClientId     string `json:"client_id"`
				ClientSecret string `json:"client_secret"`
				TokenUri     string `json:"token_uri"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Events []struct {
				Logline  string  `json:"logline"`
				Severity *string `json:"severity"`
			} `json:"events"`
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1IntegrationsWizIdResponse parses an HTTP response from a DeleteV1IntegrationsWizIdWithResponse call
func ParseDeleteV1IntegrationsWizIdResponse(rsp *http.Response) (*DeleteV1IntegrationsWizIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1IntegrationsWizIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IntegrationsWizIdResponse parses an HTTP response from a GetV1IntegrationsWizIdWithResponse call
func ParseGetV1IntegrationsWizIdResponse(rsp *http.Response) (*GetV1IntegrationsWizIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IntegrationsWizIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id         openapi_types.UUID            `json:"id"`
			Kind       GetV1IntegrationsWizId200Kind `json:"kind"`
			LocationId *openapi_types.UUID           `json:"locationId"`
			Name       string                        `json:"name"`
			Parameters struct {
				ApiEndpoint  string `json:"api_endpoint"`
				ClientId     string `json:"client_id"`
				ClientSecret string `json:"client_secret"`
				TokenUri     string `json:"token_uri"`
			} `json:"parameters"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListLocationsResponse parses an HTTP response from a ListLocationsWithResponse call
func ParseListLocationsResponse(rsp *http.Response) (*ListLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Id The location ID.
			Id *openapi_types.UUID `json:"id,omitempty"`

			// Key The SSH public key to use to connect to the location.
			Key *string `json:"key,omitempty"`

			// Name The name of the location.
			Name *string               `json:"name,omitempty"`
			Type *ListLocations200Type `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLocationResponse parses an HTTP response from a CreateLocationWithResponse call
func ParseCreateLocationResponse(rsp *http.Response) (*CreateLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Id The location ID.
			Id *openapi_types.UUID `json:"id,omitempty"`

			// Key The SSH public key to use to connect to the location.
			Key *string `json:"key,omitempty"`

			// Name The name of the location.
			Name *string                `json:"name,omitempty"`
			Type *CreateLocation200Type `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertLocationResponse parses an HTTP response from a UpsertLocationWithResponse call
func ParseUpsertLocationResponse(rsp *http.Response) (*UpsertLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Id The location ID.
			Id *openapi_types.UUID `json:"id,omitempty"`

			// Key The SSH public key to use to connect to the location.
			Key *string `json:"key,omitempty"`

			// Name The name of the location.
			Name *string                `json:"name,omitempty"`
			Type *UpsertLocation200Type `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteLocationResponse parses an HTTP response from a DeleteLocationWithResponse call
func ParseDeleteLocationResponse(rsp *http.Response) (*DeleteLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLocationResponse parses an HTTP response from a GetLocationWithResponse call
func ParseGetLocationResponse(rsp *http.Response) (*GetLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Id The location ID.
			Id *openapi_types.UUID `json:"id,omitempty"`

			// Key The SSH public key to use to connect to the location.
			Key *string `json:"key,omitempty"`

			// Name The name of the location.
			Name *string             `json:"name,omitempty"`
			Type *GetLocation200Type `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdSchemasResponse parses an HTTP response from a GetV1OrganizationIdSchemasWithResponse call
func ParseGetV1OrganizationIdSchemasResponse(rsp *http.Response) (*GetV1OrganizationIdSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Edges []struct {
				Node struct {
					BlobUrl     *string            `json:"blobUrl"`
					Consumer    *string            `json:"consumer"`
					CreatedAt   time.Time          `json:"createdAt"`
					Description *string            `json:"description"`
					DomainId    openapi_types.UUID `json:"domainId"`
					Endpoints   struct {
						Id         openapi_types.UUID `json:"id"`
						Name       string             `json:"name"`
						Operation  string             `json:"operation"`
						Parameters string             `json:"parameters"`
						ReturnType string             `json:"returnType"`
					} `json:"endpoints"`
					GeneratedFromCodeProjectId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromCodeProjectId"`
					GeneratedFromFrontendId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromFrontendId"`
					GeneratedFromServiceId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromServiceId"`
					Id         openapi_types.UUID `json:"id"`
					Kind       string             `json:"kind"`
					LastSeenAt time.Time          `json:"lastSeenAt"`
					Name       string             `json:"name"`
					Tags       []struct {
						Color string             `json:"color"`
						Id    openapi_types.UUID `json:"id"`
						Name  string             `json:"name"`
					} `json:"tags"`
					Url            *string `json:"url"`
					UseInServiceId []struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"useInServiceId"`
				} `json:"node"`
			} `json:"edges"`
			PageInfo struct {
				EndCursor       *string `json:"endCursor"`
				HasNextPage     bool    `json:"hasNextPage"`
				HasPreviousPage bool    `json:"hasPreviousPage"`
				StartCursor     *string `json:"startCursor"`
			} `json:"pageInfo"`
			TotalCount float32 `json:"totalCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdSchemasSchemaIdResponse parses an HTTP response from a GetV1OrganizationIdSchemasSchemaIdWithResponse call
func ParseGetV1OrganizationIdSchemasSchemaIdResponse(rsp *http.Response) (*GetV1OrganizationIdSchemasSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdSchemasSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BlobUrl     *string   `json:"blobUrl"`
			Consumer    *string   `json:"consumer"`
			CreatedAt   time.Time `json:"createdAt"`
			Description *string   `json:"description"`
			Endpoints   []struct {
				Id         openapi_types.UUID `json:"id"`
				Name       string             `json:"name"`
				Operation  string             `json:"operation"`
				Parameters string             `json:"parameters"`
				ReturnType string             `json:"returnType"`
			} `json:"endpoints"`
			GeneratedFromCodeProject *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromCodeProject"`
			GeneratedFromFrontend *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromFrontend"`
			GeneratedFromService *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromService"`
			Id         openapi_types.UUID `json:"id"`
			Kind       string             `json:"kind"`
			LastSeenAt time.Time          `json:"lastSeenAt"`
			Name       string             `json:"name"`
			Tags       []struct {
				Color string             `json:"color"`
				Id    openapi_types.UUID `json:"id"`
				Name  string             `json:"name"`
			} `json:"tags"`
			TemporaryDownloadUrl *string `json:"temporaryDownloadUrl"`
			Url                  *string `json:"url"`
			UsedInServices       []struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"usedInServices"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdServicesResponse parses an HTTP response from a GetV1OrganizationIdServicesWithResponse call
func ParseGetV1OrganizationIdServicesResponse(rsp *http.Response) (*GetV1OrganizationIdServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationsCount float32            `json:"applicationsCount"`
			AuthTechnology    *string            `json:"authTechnology"`
			CloudProvider     string             `json:"cloudProvider"`
			CountryCodes      []string           `json:"countryCodes"`
			CreatedAt         time.Time          `json:"createdAt"`
			DomainId          openapi_types.UUID `json:"domainId"`
			Framework         *string            `json:"framework"`
			Id                openapi_types.UUID `json:"id"`
			IpAddresses       []string           `json:"ipAddresses"`
			LastSeenAt        time.Time          `json:"lastSeenAt"`
			SoftwareType      *string            `json:"softwareType"`
			Tags              []struct {
				Color string             `json:"color"`
				Id    openapi_types.UUID `json:"id"`
				Name  string             `json:"name"`
			} `json:"tags"`
			Type        string `json:"type"`
			Url         string `json:"url"`
			WafProvider string `json:"wafProvider"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
