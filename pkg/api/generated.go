// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for PostApplicationsIdStartScanParamsContentType.
const (
	PostApplicationsIdStartScanParamsContentTypeApplicationjson PostApplicationsIdStartScanParamsContentType = "application/json"
)

// Defines values for PostApplicationsIdUploadSchemaParamsContentType.
const (
	PostApplicationsIdUploadSchemaParamsContentTypeApplicationjson PostApplicationsIdUploadSchemaParamsContentType = "application/json"
)

// Defines values for PostCreateApplicationParamsContentType.
const (
	PostCreateApplicationParamsContentTypeApplicationjson PostCreateApplicationParamsContentType = "application/json"
)

// Defines values for PostCreateApplicationJSONBodyType.
const (
	GRAPHQL PostCreateApplicationJSONBodyType = "GRAPHQL"
	REST    PostCreateApplicationJSONBodyType = "REST"
)

// Defines values for PostV1OrganizationIdDomainsParamsContentType.
const (
	PostV1OrganizationIdDomainsParamsContentTypeApplicationjson PostV1OrganizationIdDomainsParamsContentType = "application/json"
)

// PostApplicationsIdStartScanJSONBody defines parameters for PostApplicationsIdStartScan.
type PostApplicationsIdStartScanJSONBody struct {
	CommitAuthor                   *string                  `json:"commitAuthor,omitempty"`
	CommitAuthorProfilePictureLink *string                  `json:"commitAuthorProfilePictureLink,omitempty"`
	CommitBranch                   *string                  `json:"commitBranch,omitempty"`
	CommitHash                     *string                  `json:"commitHash,omitempty"`
	CommitLink                     *string                  `json:"commitLink,omitempty"`
	ConfigurationOverride          *map[string]*interface{} `json:"configurationOverride,omitempty"`
	ForceLockBypass                *bool                    `json:"forceLockBypass,omitempty"`
	SchemaUrl                      *string                  `json:"schemaUrl,omitempty"`
}

// PostApplicationsIdStartScanParams defines parameters for PostApplicationsIdStartScan.
type PostApplicationsIdStartScanParams struct {
	ContentType PostApplicationsIdStartScanParamsContentType `json:"content-type"`
}

// PostApplicationsIdStartScanParamsContentType defines parameters for PostApplicationsIdStartScan.
type PostApplicationsIdStartScanParamsContentType string

// PostApplicationsIdUploadSchemaJSONBody defines parameters for PostApplicationsIdUploadSchema.
type PostApplicationsIdUploadSchemaJSONBody struct {
	Schema    *string `json:"schema,omitempty"`
	SchemaUrl *string `json:"schemaUrl,omitempty"`
}

// PostApplicationsIdUploadSchemaParams defines parameters for PostApplicationsIdUploadSchema.
type PostApplicationsIdUploadSchemaParams struct {
	ContentType PostApplicationsIdUploadSchemaParamsContentType `json:"content-type"`
}

// PostApplicationsIdUploadSchemaParamsContentType defines parameters for PostApplicationsIdUploadSchema.
type PostApplicationsIdUploadSchemaParamsContentType string

// PostCreateApplicationJSONBody defines parameters for PostCreateApplication.
type PostCreateApplicationJSONBody struct {
	Authentication    *interface{}                      `json:"authentication"`
	Cron              *string                           `json:"cron,omitempty"`
	DisableScheduling *bool                             `json:"disableScheduling,omitempty"`
	FullConfiguration *interface{}                      `json:"fullConfiguration"`
	Labels            *[]string                         `json:"labels,omitempty"`
	LocationId        *openapi_types.UUID               `json:"locationId,omitempty"`
	Name              string                            `json:"name"`
	OrganizationId    openapi_types.UUID                `json:"organizationId"`
	ReadWrite         bool                              `json:"readWrite"`
	Schema            *string                           `json:"schema,omitempty"`
	SchemaUrl         *string                           `json:"schemaUrl,omitempty"`
	ServerUrl         string                            `json:"serverUrl"`
	Type              PostCreateApplicationJSONBodyType `json:"type"`
}

// PostCreateApplicationParams defines parameters for PostCreateApplication.
type PostCreateApplicationParams struct {
	ContentType PostCreateApplicationParamsContentType `json:"content-type"`
}

// PostCreateApplicationParamsContentType defines parameters for PostCreateApplication.
type PostCreateApplicationParamsContentType string

// PostCreateApplicationJSONBodyType defines parameters for PostCreateApplication.
type PostCreateApplicationJSONBodyType string

// GetOrganizationIdApplicationsSearchParams defines parameters for GetOrganizationIdApplicationsSearch.
type GetOrganizationIdApplicationsSearchParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PostPrivateLocationsJSONBody defines parameters for PostPrivateLocations.
type PostPrivateLocationsJSONBody struct {
	Name string `json:"name"`
}

// PostV1OrganizationIdDomainsJSONBody defines parameters for PostV1OrganizationIdDomains.
type PostV1OrganizationIdDomainsJSONBody struct {
	Domains []string `json:"domains"`
}

// PostV1OrganizationIdDomainsParams defines parameters for PostV1OrganizationIdDomains.
type PostV1OrganizationIdDomainsParams struct {
	ContentType PostV1OrganizationIdDomainsParamsContentType `json:"content-type"`
}

// PostV1OrganizationIdDomainsParamsContentType defines parameters for PostV1OrganizationIdDomains.
type PostV1OrganizationIdDomainsParamsContentType string

// PostApplicationsIdStartScanJSONRequestBody defines body for PostApplicationsIdStartScan for application/json ContentType.
type PostApplicationsIdStartScanJSONRequestBody PostApplicationsIdStartScanJSONBody

// PostApplicationsIdUploadSchemaJSONRequestBody defines body for PostApplicationsIdUploadSchema for application/json ContentType.
type PostApplicationsIdUploadSchemaJSONRequestBody PostApplicationsIdUploadSchemaJSONBody

// PostCreateApplicationJSONRequestBody defines body for PostCreateApplication for application/json ContentType.
type PostCreateApplicationJSONRequestBody PostCreateApplicationJSONBody

// PostPrivateLocationsJSONRequestBody defines body for PostPrivateLocations for application/json ContentType.
type PostPrivateLocationsJSONRequestBody PostPrivateLocationsJSONBody

// PostV1OrganizationIdDomainsJSONRequestBody defines body for PostV1OrganizationIdDomains for application/json ContentType.
type PostV1OrganizationIdDomainsJSONRequestBody PostV1OrganizationIdDomainsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteApplicationId request
	DeleteApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationId request
	GetApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationsIdStartScanWithBody request with any body
	PostApplicationsIdStartScanWithBody(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsIdStartScan(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApplicationsIdUploadSchemaWithBody request with any body
	PostApplicationsIdUploadSchemaWithBody(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplicationsIdUploadSchema(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreateApplicationWithBody request with any body
	PostCreateApplicationWithBody(ctx context.Context, params *PostCreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreateApplication(ctx context.Context, params *PostCreateApplicationParams, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationIdApplications request
	GetOrganizationIdApplications(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationIdApplicationsSearch request
	GetOrganizationIdApplicationsSearch(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateLocations request
	GetPrivateLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPrivateLocationsWithBody request with any body
	PostPrivateLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPrivateLocations(ctx context.Context, body PostPrivateLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrivateLocationsId request
	DeletePrivateLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateLocationsId request
	GetPrivateLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScansId request
	GetScansId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1OrganizationIdDomainsWithBody request with any body
	PostV1OrganizationIdDomainsWithBody(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1OrganizationIdDomains(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, body PostV1OrganizationIdDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdSchemas request
	GetV1OrganizationIdSchemas(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdSchemasSchemaId request
	GetV1OrganizationIdSchemasSchemaId(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationIdServices request
	GetV1OrganizationIdServices(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdStartScanWithBody(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdStartScanRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdStartScan(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdStartScanRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdUploadSchemaWithBody(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdUploadSchemaRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplicationsIdUploadSchema(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplicationsIdUploadSchemaRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateApplicationWithBody(ctx context.Context, params *PostCreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateApplicationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreateApplication(ctx context.Context, params *PostCreateApplicationParams, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreateApplicationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationIdApplications(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationIdApplicationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationIdApplicationsSearch(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationIdApplicationsSearchRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPrivateLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPrivateLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPrivateLocations(ctx context.Context, body PostPrivateLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPrivateLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrivateLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePrivateLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScansId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScansIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1OrganizationIdDomainsWithBody(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1OrganizationIdDomainsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1OrganizationIdDomains(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, body PostV1OrganizationIdDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1OrganizationIdDomainsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdSchemas(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdSchemasRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdSchemasSchemaId(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdSchemasSchemaIdRequest(c.Server, id, schemaId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationIdServices(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationIdServicesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteApplicationIdRequest generates requests for DeleteApplicationId
func NewDeleteApplicationIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationIdRequest generates requests for GetApplicationId
func NewGetApplicationIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/application/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApplicationsIdStartScanRequest calls the generic PostApplicationsIdStartScan builder with application/json body
func NewPostApplicationsIdStartScanRequest(server string, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, body PostApplicationsIdStartScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsIdStartScanRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostApplicationsIdStartScanRequestWithBody generates requests for PostApplicationsIdStartScan with any type of body
func NewPostApplicationsIdStartScanRequestWithBody(server string, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/start-scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("content-type", headerParam0)

	}

	return req, nil
}

// NewPostApplicationsIdUploadSchemaRequest calls the generic PostApplicationsIdUploadSchema builder with application/json body
func NewPostApplicationsIdUploadSchemaRequest(server string, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, body PostApplicationsIdUploadSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplicationsIdUploadSchemaRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostApplicationsIdUploadSchemaRequestWithBody generates requests for PostApplicationsIdUploadSchema with any type of body
func NewPostApplicationsIdUploadSchemaRequestWithBody(server string, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/upload-schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("content-type", headerParam0)

	}

	return req, nil
}

// NewPostCreateApplicationRequest calls the generic PostCreateApplication builder with application/json body
func NewPostCreateApplicationRequest(server string, params *PostCreateApplicationParams, body PostCreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreateApplicationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCreateApplicationRequestWithBody generates requests for PostCreateApplication with any type of body
func NewPostCreateApplicationRequestWithBody(server string, params *PostCreateApplicationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/create-application")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("content-type", headerParam0)

	}

	return req, nil
}

// NewGetOrganizationIdApplicationsRequest generates requests for GetOrganizationIdApplications
func NewGetOrganizationIdApplicationsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationIdApplicationsSearchRequest generates requests for GetOrganizationIdApplicationsSearch
func NewGetOrganizationIdApplicationsSearchRequest(server string, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/%s/applications/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateLocationsRequest generates requests for GetPrivateLocations
func NewGetPrivateLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPrivateLocationsRequest calls the generic PostPrivateLocations builder with application/json body
func NewPostPrivateLocationsRequest(server string, body PostPrivateLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPrivateLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPrivateLocationsRequestWithBody generates requests for PostPrivateLocations with any type of body
func NewPostPrivateLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePrivateLocationsIdRequest generates requests for DeletePrivateLocationsId
func NewDeletePrivateLocationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateLocationsIdRequest generates requests for GetPrivateLocationsId
func NewGetPrivateLocationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScansIdRequest generates requests for GetScansId
func NewGetScansIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1OrganizationIdDomainsRequest calls the generic PostV1OrganizationIdDomains builder with application/json body
func NewPostV1OrganizationIdDomainsRequest(server string, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, body PostV1OrganizationIdDomainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1OrganizationIdDomainsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostV1OrganizationIdDomainsRequestWithBody generates requests for PostV1OrganizationIdDomains with any type of body
func NewPostV1OrganizationIdDomainsRequestWithBody(server string, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "content-type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("content-type", headerParam0)

	}

	return req, nil
}

// NewGetV1OrganizationIdSchemasRequest generates requests for GetV1OrganizationIdSchemas
func NewGetV1OrganizationIdSchemasRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationIdSchemasSchemaIdRequest generates requests for GetV1OrganizationIdSchemasSchemaId
func NewGetV1OrganizationIdSchemasSchemaIdRequest(server string, id openapi_types.UUID, schemaId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schemaId", runtime.ParamLocationPath, schemaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/schemas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationIdServicesRequest generates requests for GetV1OrganizationIdServices
func NewGetV1OrganizationIdServicesRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organization/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteApplicationIdWithResponse request
	DeleteApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApplicationIdResponse, error)

	// GetApplicationIdWithResponse request
	GetApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error)

	// PostApplicationsIdStartScanWithBodyWithResponse request with any body
	PostApplicationsIdStartScanWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error)

	PostApplicationsIdStartScanWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error)

	// PostApplicationsIdUploadSchemaWithBodyWithResponse request with any body
	PostApplicationsIdUploadSchemaWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error)

	PostApplicationsIdUploadSchemaWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error)

	// PostCreateApplicationWithBodyWithResponse request with any body
	PostCreateApplicationWithBodyWithResponse(ctx context.Context, params *PostCreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error)

	PostCreateApplicationWithResponse(ctx context.Context, params *PostCreateApplicationParams, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error)

	// GetOrganizationIdApplicationsWithResponse request
	GetOrganizationIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsResponse, error)

	// GetOrganizationIdApplicationsSearchWithResponse request
	GetOrganizationIdApplicationsSearchWithResponse(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsSearchResponse, error)

	// GetPrivateLocationsWithResponse request
	GetPrivateLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPrivateLocationsResponse, error)

	// PostPrivateLocationsWithBodyWithResponse request with any body
	PostPrivateLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPrivateLocationsResponse, error)

	PostPrivateLocationsWithResponse(ctx context.Context, body PostPrivateLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPrivateLocationsResponse, error)

	// DeletePrivateLocationsIdWithResponse request
	DeletePrivateLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePrivateLocationsIdResponse, error)

	// GetPrivateLocationsIdWithResponse request
	GetPrivateLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPrivateLocationsIdResponse, error)

	// GetScansIdWithResponse request
	GetScansIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetScansIdResponse, error)

	// PostV1OrganizationIdDomainsWithBodyWithResponse request with any body
	PostV1OrganizationIdDomainsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1OrganizationIdDomainsResponse, error)

	PostV1OrganizationIdDomainsWithResponse(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, body PostV1OrganizationIdDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1OrganizationIdDomainsResponse, error)

	// GetV1OrganizationIdSchemasWithResponse request
	GetV1OrganizationIdSchemasWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasResponse, error)

	// GetV1OrganizationIdSchemasSchemaIdWithResponse request
	GetV1OrganizationIdSchemasSchemaIdWithResponse(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasSchemaIdResponse, error)

	// GetV1OrganizationIdServicesWithResponse request
	GetV1OrganizationIdServicesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdServicesResponse, error)
}

type DeleteApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// DeleteApplication `true` if the application was deleted
		DeleteApplication bool `json:"deleteApplication"`

		// Id The application ID
		Id openapi_types.UUID `json:"id"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
		CreatedAt                  time.Time          `json:"createdAt"`
		Cron                       *string            `json:"cron"`
		HasCI                      bool               `json:"hasCI"`
		Id                         openapi_types.UUID `json:"id"`
		LastSuccessfulScan         *struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
		} `json:"lastSuccessfulScan"`
		Name  string `json:"name"`
		Scans []struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
			Status GetApplicationId200ScansStatus `json:"status"`
		} `json:"scans"`
		Service struct {
			Tags []struct {
				Color string `json:"color"`
				Name  string `json:"name"`
			} `json:"tags"`
			Url string `json:"url"`
		} `json:"service"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}
type GetApplicationId200ScansStatus string

// Status returns HTTPResponse.Status
func (r GetApplicationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicationsIdStartScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CompletionRatio     float32                              `json:"completionRatio"`
		CreatedAt           time.Time                            `json:"createdAt"`
		CreatedSince        float32                              `json:"createdSince"`
		Duration            *float32                             `json:"duration"`
		Id                  openapi_types.UUID                   `json:"id"`
		ReadonlyAccessToken string                               `json:"readonlyAccessToken"`
		Status              PostApplicationsIdStartScan200Status `json:"status"`
	}
	JSON400 *struct {
		Error   string `json:"error"`
		Message string `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}
type PostApplicationsIdStartScan200Status string

// Status returns HTTPResponse.Status
func (r PostApplicationsIdStartScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationsIdStartScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApplicationsIdUploadSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id openapi_types.UUID `json:"id"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApplicationsIdUploadSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplicationsIdUploadSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Href     string             `json:"href"`
		Id       openapi_types.UUID `json:"id"`
		LastScan struct {
			ScanId openapi_types.UUID `json:"scanId"`
		} `json:"lastScan"`
		Name string `json:"name"`
	}
	JSON400 *struct {
		Error   string         `json:"error"`
		Events  *[]interface{} `json:"events,omitempty"`
		Message string         `json:"message"`
	}
	JSON500 *struct {
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r PostCreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationIdApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
		CreatedAt                  time.Time          `json:"createdAt"`
		Cron                       *string            `json:"cron"`
		HasCI                      bool               `json:"hasCI"`
		Id                         openapi_types.UUID `json:"id"`
		LastSuccessfulScan         *struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
		} `json:"lastSuccessfulScan"`
		Name  string `json:"name"`
		Scans []struct {
			AlertCounts struct {
				HIGH   float32 `json:"HIGH"`
				INFO   float32 `json:"INFO"`
				LOW    float32 `json:"LOW"`
				MEDIUM float32 `json:"MEDIUM"`
			} `json:"alertCounts"`
			CommitHash             *string            `json:"commitHash"`
			Coverage               *float32           `json:"coverage"`
			CreatedAt              time.Time          `json:"createdAt"`
			Id                     openapi_types.UUID `json:"id"`
			Score                  *float32           `json:"score"`
			SecurityTestCategories []struct {
				Category string  `json:"category"`
				Count    float32 `json:"count"`
				Severity string  `json:"severity"`
			} `json:"securityTestCategories"`
			Status GetOrganizationIdApplications200ScansStatus `json:"status"`
		} `json:"scans"`
		Service struct {
			Tags []struct {
				Color string `json:"color"`
				Name  string `json:"name"`
			} `json:"tags"`
			Url string `json:"url"`
		} `json:"service"`
	}
}
type GetOrganizationIdApplications200ScansStatus string

// Status returns HTTPResponse.Status
func (r GetOrganizationIdApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationIdApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationIdApplicationsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cursor *string `json:"cursor"`
		Data   []struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			Name                       string             `json:"name"`
			Service                    struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		} `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationIdApplicationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationIdApplicationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrivateLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Locations []struct {
			Id   string `json:"id"`
			Name string `json:"name"`
			Tags []struct {
				Name string `json:"name"`
			} `json:"tags"`
			Type string `json:"type"`
		} `json:"locations"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPrivateLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPrivateLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Location struct {
			Id   string `json:"id"`
			Name string `json:"name"`
			Type string `json:"type"`
		} `json:"location"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON500 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPrivateLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPrivateLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePrivateLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePrivateLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePrivateLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPrivateLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Location struct {
			Id   string `json:"id"`
			Name string `json:"name"`
			Tags []struct {
				Name string `json:"name"`
			} `json:"tags"`
			Type string `json:"type"`
		} `json:"location"`
	}
	JSON404 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPrivateLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScansIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Application struct {
			ActiveSchema struct {
				ApplicationId openapi_types.UUID `json:"applicationId"`
				CreatedAt     time.Time          `json:"createdAt"`
				Id            openapi_types.UUID `json:"id"`
			} `json:"activeSchema"`
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			Name      string             `json:"name"`
			Service   struct {
				Framework string `json:"framework"`
			} `json:"service"`
			UpdatedAt time.Time `json:"updatedAt"`
		} `json:"application"`
		CommitHash      *string `json:"commitHash"`
		CompletionRatio float32 `json:"completionRatio"`
		Configuration   struct {
			AuthenticationUsers *[]struct {
				HeaderName  string `json:"headerName"`
				HeaderValue string `json:"headerValue"`
				Name        string `json:"name"`
			} `json:"authenticationUsers"`
			Content               *interface{} `json:"content"`
			CreatedAt             time.Time    `json:"createdAt"`
			IsAuthenticationValid bool         `json:"isAuthenticationValid"`
			IsConfigurationValid  bool         `json:"isConfigurationValid"`
			ReadWrite             bool         `json:"readWrite"`
			UpdatedAt             time.Time    `json:"updatedAt"`
		} `json:"configuration"`
		CreatedAt     time.Time          `json:"createdAt"`
		Id            openapi_types.UUID `json:"id"`
		SecurityTests []struct {
			Alerts []struct {
				Context   string `json:"context"`
				Exchanges []struct {
					Curl string `json:"curl"`
				} `json:"exchanges"`
				Id       openapi_types.UUID                       `json:"id"`
				Path     []string                                 `json:"path"`
				Risks    map[string]*interface{}                  `json:"risks"`
				Severity GetScansId200SecurityTestsAlertsSeverity `json:"severity"`
			} `json:"alerts"`
			Category   string `json:"category"`
			Compliance []struct {
				Name  string `json:"name"`
				Value string `json:"value"`
			} `json:"compliance"`
			Description     string                             `json:"description"`
			FailureName     string                             `json:"failureName"`
			Remediation     string                             `json:"remediation"`
			SecurityTestUid string                             `json:"securityTestUid"`
			Severity        GetScansId200SecurityTestsSeverity `json:"severity"`
		} `json:"securityTests"`
		Status GetScansId200Status `json:"status"`
	}
}
type GetScansId200SecurityTestsAlertsSeverity string
type GetScansId200SecurityTestsSeverity string
type GetScansId200Status string

// Status returns HTTPResponse.Status
func (r GetScansIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScansIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1OrganizationIdDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddedDomains     []string `json:"addedDomains"`
		InvalidDomains   []string `json:"invalidDomains"`
		RemovedDomains   []string `json:"removedDomains"`
		UnchangedDomains []string `json:"unchangedDomains"`
	}
	JSON400 *struct {
		Message string `json:"message"`
		Name    string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1OrganizationIdDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1OrganizationIdDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Edges []struct {
			Node struct {
				BlobUrl     *string            `json:"blobUrl"`
				Consumer    *string            `json:"consumer"`
				CreatedAt   time.Time          `json:"createdAt"`
				Description *string            `json:"description"`
				DomainId    openapi_types.UUID `json:"domainId"`
				Endpoints   struct {
					Id         openapi_types.UUID `json:"id"`
					Name       string             `json:"name"`
					Operation  string             `json:"operation"`
					Parameters string             `json:"parameters"`
					ReturnType string             `json:"returnType"`
				} `json:"endpoints"`
				GeneratedFromCodeProjectId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromCodeProjectId"`
				GeneratedFromFrontendId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromFrontendId"`
				GeneratedFromServiceId *struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"generatedFromServiceId"`
				Id         openapi_types.UUID `json:"id"`
				Kind       string             `json:"kind"`
				LastSeenAt time.Time          `json:"lastSeenAt"`
				Name       string             `json:"name"`
				Tags       []struct {
					Color string             `json:"color"`
					Id    openapi_types.UUID `json:"id"`
					Name  string             `json:"name"`
				} `json:"tags"`
				Url            *string `json:"url"`
				UseInServiceId []struct {
					Id openapi_types.UUID `json:"id"`
				} `json:"useInServiceId"`
			} `json:"node"`
		} `json:"edges"`
		PageInfo struct {
			EndCursor       *string `json:"endCursor"`
			HasNextPage     bool    `json:"hasNextPage"`
			HasPreviousPage bool    `json:"hasPreviousPage"`
			StartCursor     *string `json:"startCursor"`
		} `json:"pageInfo"`
		TotalCount float32 `json:"totalCount"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdSchemasSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BlobUrl     *string   `json:"blobUrl"`
		Consumer    *string   `json:"consumer"`
		CreatedAt   time.Time `json:"createdAt"`
		Description *string   `json:"description"`
		Endpoints   []struct {
			Id         openapi_types.UUID `json:"id"`
			Name       string             `json:"name"`
			Operation  string             `json:"operation"`
			Parameters string             `json:"parameters"`
			ReturnType string             `json:"returnType"`
		} `json:"endpoints"`
		GeneratedFromCodeProject *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromCodeProject"`
		GeneratedFromFrontend *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromFrontend"`
		GeneratedFromService *struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"generatedFromService"`
		Id         openapi_types.UUID `json:"id"`
		Kind       string             `json:"kind"`
		LastSeenAt time.Time          `json:"lastSeenAt"`
		Name       string             `json:"name"`
		Tags       []struct {
			Color string             `json:"color"`
			Id    openapi_types.UUID `json:"id"`
			Name  string             `json:"name"`
		} `json:"tags"`
		TemporaryDownloadUrl *string `json:"temporaryDownloadUrl"`
		Url                  *string `json:"url"`
		UsedInServices       []struct {
			Id openapi_types.UUID `json:"id"`
		} `json:"usedInServices"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdSchemasSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdSchemasSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationIdServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ApplicationsCount float32            `json:"applicationsCount"`
		AuthTechnology    *string            `json:"authTechnology"`
		CloudProvider     string             `json:"cloudProvider"`
		CountryCodes      []string           `json:"countryCodes"`
		CreatedAt         time.Time          `json:"createdAt"`
		DomainId          openapi_types.UUID `json:"domainId"`
		Framework         *string            `json:"framework"`
		Id                openapi_types.UUID `json:"id"`
		IpAddresses       []string           `json:"ipAddresses"`
		LastSeenAt        time.Time          `json:"lastSeenAt"`
		SoftwareType      *string            `json:"softwareType"`
		Tags              []struct {
			Color string             `json:"color"`
			Id    openapi_types.UUID `json:"id"`
			Name  string             `json:"name"`
		} `json:"tags"`
		Type        string `json:"type"`
		Url         string `json:"url"`
		WafProvider string `json:"wafProvider"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationIdServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationIdServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteApplicationIdWithResponse request returning *DeleteApplicationIdResponse
func (c *ClientWithResponses) DeleteApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApplicationIdResponse, error) {
	rsp, err := c.DeleteApplicationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationIdResponse(rsp)
}

// GetApplicationIdWithResponse request returning *GetApplicationIdResponse
func (c *ClientWithResponses) GetApplicationIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationIdResponse, error) {
	rsp, err := c.GetApplicationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationIdResponse(rsp)
}

// PostApplicationsIdStartScanWithBodyWithResponse request with arbitrary body returning *PostApplicationsIdStartScanResponse
func (c *ClientWithResponses) PostApplicationsIdStartScanWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error) {
	rsp, err := c.PostApplicationsIdStartScanWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdStartScanResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsIdStartScanWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdStartScanParams, body PostApplicationsIdStartScanJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdStartScanResponse, error) {
	rsp, err := c.PostApplicationsIdStartScan(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdStartScanResponse(rsp)
}

// PostApplicationsIdUploadSchemaWithBodyWithResponse request with arbitrary body returning *PostApplicationsIdUploadSchemaResponse
func (c *ClientWithResponses) PostApplicationsIdUploadSchemaWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error) {
	rsp, err := c.PostApplicationsIdUploadSchemaWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdUploadSchemaResponse(rsp)
}

func (c *ClientWithResponses) PostApplicationsIdUploadSchemaWithResponse(ctx context.Context, id openapi_types.UUID, params *PostApplicationsIdUploadSchemaParams, body PostApplicationsIdUploadSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplicationsIdUploadSchemaResponse, error) {
	rsp, err := c.PostApplicationsIdUploadSchema(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplicationsIdUploadSchemaResponse(rsp)
}

// PostCreateApplicationWithBodyWithResponse request with arbitrary body returning *PostCreateApplicationResponse
func (c *ClientWithResponses) PostCreateApplicationWithBodyWithResponse(ctx context.Context, params *PostCreateApplicationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error) {
	rsp, err := c.PostCreateApplicationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) PostCreateApplicationWithResponse(ctx context.Context, params *PostCreateApplicationParams, body PostCreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreateApplicationResponse, error) {
	rsp, err := c.PostCreateApplication(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreateApplicationResponse(rsp)
}

// GetOrganizationIdApplicationsWithResponse request returning *GetOrganizationIdApplicationsResponse
func (c *ClientWithResponses) GetOrganizationIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsResponse, error) {
	rsp, err := c.GetOrganizationIdApplications(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationIdApplicationsResponse(rsp)
}

// GetOrganizationIdApplicationsSearchWithResponse request returning *GetOrganizationIdApplicationsSearchResponse
func (c *ClientWithResponses) GetOrganizationIdApplicationsSearchWithResponse(ctx context.Context, id openapi_types.UUID, params *GetOrganizationIdApplicationsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationIdApplicationsSearchResponse, error) {
	rsp, err := c.GetOrganizationIdApplicationsSearch(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationIdApplicationsSearchResponse(rsp)
}

// GetPrivateLocationsWithResponse request returning *GetPrivateLocationsResponse
func (c *ClientWithResponses) GetPrivateLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPrivateLocationsResponse, error) {
	rsp, err := c.GetPrivateLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateLocationsResponse(rsp)
}

// PostPrivateLocationsWithBodyWithResponse request with arbitrary body returning *PostPrivateLocationsResponse
func (c *ClientWithResponses) PostPrivateLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPrivateLocationsResponse, error) {
	rsp, err := c.PostPrivateLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPrivateLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostPrivateLocationsWithResponse(ctx context.Context, body PostPrivateLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPrivateLocationsResponse, error) {
	rsp, err := c.PostPrivateLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPrivateLocationsResponse(rsp)
}

// DeletePrivateLocationsIdWithResponse request returning *DeletePrivateLocationsIdResponse
func (c *ClientWithResponses) DeletePrivateLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePrivateLocationsIdResponse, error) {
	rsp, err := c.DeletePrivateLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePrivateLocationsIdResponse(rsp)
}

// GetPrivateLocationsIdWithResponse request returning *GetPrivateLocationsIdResponse
func (c *ClientWithResponses) GetPrivateLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPrivateLocationsIdResponse, error) {
	rsp, err := c.GetPrivateLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateLocationsIdResponse(rsp)
}

// GetScansIdWithResponse request returning *GetScansIdResponse
func (c *ClientWithResponses) GetScansIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetScansIdResponse, error) {
	rsp, err := c.GetScansId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScansIdResponse(rsp)
}

// PostV1OrganizationIdDomainsWithBodyWithResponse request with arbitrary body returning *PostV1OrganizationIdDomainsResponse
func (c *ClientWithResponses) PostV1OrganizationIdDomainsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1OrganizationIdDomainsResponse, error) {
	rsp, err := c.PostV1OrganizationIdDomainsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1OrganizationIdDomainsResponse(rsp)
}

func (c *ClientWithResponses) PostV1OrganizationIdDomainsWithResponse(ctx context.Context, id openapi_types.UUID, params *PostV1OrganizationIdDomainsParams, body PostV1OrganizationIdDomainsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1OrganizationIdDomainsResponse, error) {
	rsp, err := c.PostV1OrganizationIdDomains(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1OrganizationIdDomainsResponse(rsp)
}

// GetV1OrganizationIdSchemasWithResponse request returning *GetV1OrganizationIdSchemasResponse
func (c *ClientWithResponses) GetV1OrganizationIdSchemasWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasResponse, error) {
	rsp, err := c.GetV1OrganizationIdSchemas(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdSchemasResponse(rsp)
}

// GetV1OrganizationIdSchemasSchemaIdWithResponse request returning *GetV1OrganizationIdSchemasSchemaIdResponse
func (c *ClientWithResponses) GetV1OrganizationIdSchemasSchemaIdWithResponse(ctx context.Context, id openapi_types.UUID, schemaId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdSchemasSchemaIdResponse, error) {
	rsp, err := c.GetV1OrganizationIdSchemasSchemaId(ctx, id, schemaId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdSchemasSchemaIdResponse(rsp)
}

// GetV1OrganizationIdServicesWithResponse request returning *GetV1OrganizationIdServicesResponse
func (c *ClientWithResponses) GetV1OrganizationIdServicesWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1OrganizationIdServicesResponse, error) {
	rsp, err := c.GetV1OrganizationIdServices(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationIdServicesResponse(rsp)
}

// ParseDeleteApplicationIdResponse parses an HTTP response from a DeleteApplicationIdWithResponse call
func ParseDeleteApplicationIdResponse(rsp *http.Response) (*DeleteApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// DeleteApplication `true` if the application was deleted
			DeleteApplication bool `json:"deleteApplication"`

			// Id The application ID
			Id openapi_types.UUID `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationIdResponse parses an HTTP response from a GetApplicationIdWithResponse call
func ParseGetApplicationIdResponse(rsp *http.Response) (*GetApplicationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			LastSuccessfulScan         *struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
			} `json:"lastSuccessfulScan"`
			Name  string `json:"name"`
			Scans []struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
				Status GetApplicationId200ScansStatus `json:"status"`
			} `json:"scans"`
			Service struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApplicationsIdStartScanResponse parses an HTTP response from a PostApplicationsIdStartScanWithResponse call
func ParsePostApplicationsIdStartScanResponse(rsp *http.Response) (*PostApplicationsIdStartScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationsIdStartScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CompletionRatio     float32                              `json:"completionRatio"`
			CreatedAt           time.Time                            `json:"createdAt"`
			CreatedSince        float32                              `json:"createdSince"`
			Duration            *float32                             `json:"duration"`
			Id                  openapi_types.UUID                   `json:"id"`
			ReadonlyAccessToken string                               `json:"readonlyAccessToken"`
			Status              PostApplicationsIdStartScan200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string `json:"error"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApplicationsIdUploadSchemaResponse parses an HTTP response from a PostApplicationsIdUploadSchemaWithResponse call
func ParsePostApplicationsIdUploadSchemaResponse(rsp *http.Response) (*PostApplicationsIdUploadSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplicationsIdUploadSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id openapi_types.UUID `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostCreateApplicationResponse parses an HTTP response from a PostCreateApplicationWithResponse call
func ParsePostCreateApplicationResponse(rsp *http.Response) (*PostCreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Href     string             `json:"href"`
			Id       openapi_types.UUID `json:"id"`
			LastScan struct {
				ScanId openapi_types.UUID `json:"scanId"`
			} `json:"lastScan"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   string         `json:"error"`
			Events  *[]interface{} `json:"events,omitempty"`
			Message string         `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationIdApplicationsResponse parses an HTTP response from a GetOrganizationIdApplicationsWithResponse call
func ParseGetOrganizationIdApplicationsResponse(rsp *http.Response) (*GetOrganizationIdApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationIdApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
			CreatedAt                  time.Time          `json:"createdAt"`
			Cron                       *string            `json:"cron"`
			HasCI                      bool               `json:"hasCI"`
			Id                         openapi_types.UUID `json:"id"`
			LastSuccessfulScan         *struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
			} `json:"lastSuccessfulScan"`
			Name  string `json:"name"`
			Scans []struct {
				AlertCounts struct {
					HIGH   float32 `json:"HIGH"`
					INFO   float32 `json:"INFO"`
					LOW    float32 `json:"LOW"`
					MEDIUM float32 `json:"MEDIUM"`
				} `json:"alertCounts"`
				CommitHash             *string            `json:"commitHash"`
				Coverage               *float32           `json:"coverage"`
				CreatedAt              time.Time          `json:"createdAt"`
				Id                     openapi_types.UUID `json:"id"`
				Score                  *float32           `json:"score"`
				SecurityTestCategories []struct {
					Category string  `json:"category"`
					Count    float32 `json:"count"`
					Severity string  `json:"severity"`
				} `json:"securityTestCategories"`
				Status GetOrganizationIdApplications200ScansStatus `json:"status"`
			} `json:"scans"`
			Service struct {
				Tags []struct {
					Color string `json:"color"`
					Name  string `json:"name"`
				} `json:"tags"`
				Url string `json:"url"`
			} `json:"service"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationIdApplicationsSearchResponse parses an HTTP response from a GetOrganizationIdApplicationsSearchWithResponse call
func ParseGetOrganizationIdApplicationsSearchResponse(rsp *http.Response) (*GetOrganizationIdApplicationsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationIdApplicationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cursor *string `json:"cursor"`
			Data   []struct {
				AutogeneratedFromInventory bool               `json:"autogeneratedFromInventory"`
				CreatedAt                  time.Time          `json:"createdAt"`
				Cron                       *string            `json:"cron"`
				HasCI                      bool               `json:"hasCI"`
				Id                         openapi_types.UUID `json:"id"`
				Name                       string             `json:"name"`
				Service                    struct {
					Tags []struct {
						Color string `json:"color"`
						Name  string `json:"name"`
					} `json:"tags"`
					Url string `json:"url"`
				} `json:"service"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPrivateLocationsResponse parses an HTTP response from a GetPrivateLocationsWithResponse call
func ParseGetPrivateLocationsResponse(rsp *http.Response) (*GetPrivateLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Locations []struct {
				Id   string `json:"id"`
				Name string `json:"name"`
				Tags []struct {
					Name string `json:"name"`
				} `json:"tags"`
				Type string `json:"type"`
			} `json:"locations"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPrivateLocationsResponse parses an HTTP response from a PostPrivateLocationsWithResponse call
func ParsePostPrivateLocationsResponse(rsp *http.Response) (*PostPrivateLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPrivateLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Location struct {
				Id   string `json:"id"`
				Name string `json:"name"`
				Type string `json:"type"`
			} `json:"location"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePrivateLocationsIdResponse parses an HTTP response from a DeletePrivateLocationsIdWithResponse call
func ParseDeletePrivateLocationsIdResponse(rsp *http.Response) (*DeletePrivateLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePrivateLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPrivateLocationsIdResponse parses an HTTP response from a GetPrivateLocationsIdWithResponse call
func ParseGetPrivateLocationsIdResponse(rsp *http.Response) (*GetPrivateLocationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Location struct {
				Id   string `json:"id"`
				Name string `json:"name"`
				Tags []struct {
					Name string `json:"name"`
				} `json:"tags"`
				Type string `json:"type"`
			} `json:"location"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetScansIdResponse parses an HTTP response from a GetScansIdWithResponse call
func ParseGetScansIdResponse(rsp *http.Response) (*GetScansIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScansIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Application struct {
				ActiveSchema struct {
					ApplicationId openapi_types.UUID `json:"applicationId"`
					CreatedAt     time.Time          `json:"createdAt"`
					Id            openapi_types.UUID `json:"id"`
				} `json:"activeSchema"`
				CreatedAt time.Time          `json:"createdAt"`
				Id        openapi_types.UUID `json:"id"`
				Name      string             `json:"name"`
				Service   struct {
					Framework string `json:"framework"`
				} `json:"service"`
				UpdatedAt time.Time `json:"updatedAt"`
			} `json:"application"`
			CommitHash      *string `json:"commitHash"`
			CompletionRatio float32 `json:"completionRatio"`
			Configuration   struct {
				AuthenticationUsers *[]struct {
					HeaderName  string `json:"headerName"`
					HeaderValue string `json:"headerValue"`
					Name        string `json:"name"`
				} `json:"authenticationUsers"`
				Content               *interface{} `json:"content"`
				CreatedAt             time.Time    `json:"createdAt"`
				IsAuthenticationValid bool         `json:"isAuthenticationValid"`
				IsConfigurationValid  bool         `json:"isConfigurationValid"`
				ReadWrite             bool         `json:"readWrite"`
				UpdatedAt             time.Time    `json:"updatedAt"`
			} `json:"configuration"`
			CreatedAt     time.Time          `json:"createdAt"`
			Id            openapi_types.UUID `json:"id"`
			SecurityTests []struct {
				Alerts []struct {
					Context   string `json:"context"`
					Exchanges []struct {
						Curl string `json:"curl"`
					} `json:"exchanges"`
					Id       openapi_types.UUID                       `json:"id"`
					Path     []string                                 `json:"path"`
					Risks    map[string]*interface{}                  `json:"risks"`
					Severity GetScansId200SecurityTestsAlertsSeverity `json:"severity"`
				} `json:"alerts"`
				Category   string `json:"category"`
				Compliance []struct {
					Name  string `json:"name"`
					Value string `json:"value"`
				} `json:"compliance"`
				Description     string                             `json:"description"`
				FailureName     string                             `json:"failureName"`
				Remediation     string                             `json:"remediation"`
				SecurityTestUid string                             `json:"securityTestUid"`
				Severity        GetScansId200SecurityTestsSeverity `json:"severity"`
			} `json:"securityTests"`
			Status GetScansId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1OrganizationIdDomainsResponse parses an HTTP response from a PostV1OrganizationIdDomainsWithResponse call
func ParsePostV1OrganizationIdDomainsResponse(rsp *http.Response) (*PostV1OrganizationIdDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1OrganizationIdDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddedDomains     []string `json:"addedDomains"`
			InvalidDomains   []string `json:"invalidDomains"`
			RemovedDomains   []string `json:"removedDomains"`
			UnchangedDomains []string `json:"unchangedDomains"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message string `json:"message"`
			Name    string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdSchemasResponse parses an HTTP response from a GetV1OrganizationIdSchemasWithResponse call
func ParseGetV1OrganizationIdSchemasResponse(rsp *http.Response) (*GetV1OrganizationIdSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Edges []struct {
				Node struct {
					BlobUrl     *string            `json:"blobUrl"`
					Consumer    *string            `json:"consumer"`
					CreatedAt   time.Time          `json:"createdAt"`
					Description *string            `json:"description"`
					DomainId    openapi_types.UUID `json:"domainId"`
					Endpoints   struct {
						Id         openapi_types.UUID `json:"id"`
						Name       string             `json:"name"`
						Operation  string             `json:"operation"`
						Parameters string             `json:"parameters"`
						ReturnType string             `json:"returnType"`
					} `json:"endpoints"`
					GeneratedFromCodeProjectId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromCodeProjectId"`
					GeneratedFromFrontendId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromFrontendId"`
					GeneratedFromServiceId *struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"generatedFromServiceId"`
					Id         openapi_types.UUID `json:"id"`
					Kind       string             `json:"kind"`
					LastSeenAt time.Time          `json:"lastSeenAt"`
					Name       string             `json:"name"`
					Tags       []struct {
						Color string             `json:"color"`
						Id    openapi_types.UUID `json:"id"`
						Name  string             `json:"name"`
					} `json:"tags"`
					Url            *string `json:"url"`
					UseInServiceId []struct {
						Id openapi_types.UUID `json:"id"`
					} `json:"useInServiceId"`
				} `json:"node"`
			} `json:"edges"`
			PageInfo struct {
				EndCursor       *string `json:"endCursor"`
				HasNextPage     bool    `json:"hasNextPage"`
				HasPreviousPage bool    `json:"hasPreviousPage"`
				StartCursor     *string `json:"startCursor"`
			} `json:"pageInfo"`
			TotalCount float32 `json:"totalCount"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdSchemasSchemaIdResponse parses an HTTP response from a GetV1OrganizationIdSchemasSchemaIdWithResponse call
func ParseGetV1OrganizationIdSchemasSchemaIdResponse(rsp *http.Response) (*GetV1OrganizationIdSchemasSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdSchemasSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BlobUrl     *string   `json:"blobUrl"`
			Consumer    *string   `json:"consumer"`
			CreatedAt   time.Time `json:"createdAt"`
			Description *string   `json:"description"`
			Endpoints   []struct {
				Id         openapi_types.UUID `json:"id"`
				Name       string             `json:"name"`
				Operation  string             `json:"operation"`
				Parameters string             `json:"parameters"`
				ReturnType string             `json:"returnType"`
			} `json:"endpoints"`
			GeneratedFromCodeProject *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromCodeProject"`
			GeneratedFromFrontend *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromFrontend"`
			GeneratedFromService *struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"generatedFromService"`
			Id         openapi_types.UUID `json:"id"`
			Kind       string             `json:"kind"`
			LastSeenAt time.Time          `json:"lastSeenAt"`
			Name       string             `json:"name"`
			Tags       []struct {
				Color string             `json:"color"`
				Id    openapi_types.UUID `json:"id"`
				Name  string             `json:"name"`
			} `json:"tags"`
			TemporaryDownloadUrl *string `json:"temporaryDownloadUrl"`
			Url                  *string `json:"url"`
			UsedInServices       []struct {
				Id openapi_types.UUID `json:"id"`
			} `json:"usedInServices"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationIdServicesResponse parses an HTTP response from a GetV1OrganizationIdServicesWithResponse call
func ParseGetV1OrganizationIdServicesResponse(rsp *http.Response) (*GetV1OrganizationIdServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationIdServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ApplicationsCount float32            `json:"applicationsCount"`
			AuthTechnology    *string            `json:"authTechnology"`
			CloudProvider     string             `json:"cloudProvider"`
			CountryCodes      []string           `json:"countryCodes"`
			CreatedAt         time.Time          `json:"createdAt"`
			DomainId          openapi_types.UUID `json:"domainId"`
			Framework         *string            `json:"framework"`
			Id                openapi_types.UUID `json:"id"`
			IpAddresses       []string           `json:"ipAddresses"`
			LastSeenAt        time.Time          `json:"lastSeenAt"`
			SoftwareType      *string            `json:"softwareType"`
			Tags              []struct {
				Color string             `json:"color"`
				Id    openapi_types.UUID `json:"id"`
				Name  string             `json:"name"`
			} `json:"tags"`
			Type        string `json:"type"`
			Url         string `json:"url"`
			WafProvider string `json:"wafProvider"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
