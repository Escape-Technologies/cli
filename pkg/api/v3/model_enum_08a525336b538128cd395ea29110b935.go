/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum08a525336b538128cd395ea29110b935 the model 'Enum08a525336b538128cd395ea29110b935'
type Enum08a525336b538128cd395ea29110b935 string

// List of Enum_08a525336b538128cd395ea29110b935
const (
	ENUM08A525336B538128CD395EA29110B935_PAGE Enum08a525336b538128cd395ea29110b935 = "page"
	ENUM08A525336B538128CD395EA29110B935_BROWSER_LOCAL_STORAGE Enum08a525336b538128cd395ea29110b935 = "browser_local_storage"
	ENUM08A525336B538128CD395EA29110B935_BROWSER_SESSION_STORAGE Enum08a525336b538128cd395ea29110b935 = "browser_session_storage"
	ENUM08A525336B538128CD395EA29110B935_BROWSER_COOKIES Enum08a525336b538128cd395ea29110b935 = "browser_cookies"
)

// All allowed values of Enum08a525336b538128cd395ea29110b935 enum
var AllowedEnum08a525336b538128cd395ea29110b935EnumValues = []Enum08a525336b538128cd395ea29110b935{
	"page",
	"browser_local_storage",
	"browser_session_storage",
	"browser_cookies",
}

func (v *Enum08a525336b538128cd395ea29110b935) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum08a525336b538128cd395ea29110b935(value)
	for _, existing := range AllowedEnum08a525336b538128cd395ea29110b935EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum08a525336b538128cd395ea29110b935", value)
}

// NewEnum08a525336b538128cd395ea29110b935FromValue returns a pointer to a valid Enum08a525336b538128cd395ea29110b935
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum08a525336b538128cd395ea29110b935FromValue(v string) (*Enum08a525336b538128cd395ea29110b935, error) {
	ev := Enum08a525336b538128cd395ea29110b935(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum08a525336b538128cd395ea29110b935: valid values are %v", v, AllowedEnum08a525336b538128cd395ea29110b935EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum08a525336b538128cd395ea29110b935) IsValid() bool {
	for _, existing := range AllowedEnum08a525336b538128cd395ea29110b935EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_08a525336b538128cd395ea29110b935 value
func (v Enum08a525336b538128cd395ea29110b935) Ptr() *Enum08a525336b538128cd395ea29110b935 {
	return &v
}

type NullableEnum08a525336b538128cd395ea29110b935 struct {
	value *Enum08a525336b538128cd395ea29110b935
	isSet bool
}

func (v NullableEnum08a525336b538128cd395ea29110b935) Get() *Enum08a525336b538128cd395ea29110b935 {
	return v.value
}

func (v *NullableEnum08a525336b538128cd395ea29110b935) Set(val *Enum08a525336b538128cd395ea29110b935) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum08a525336b538128cd395ea29110b935) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum08a525336b538128cd395ea29110b935) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum08a525336b538128cd395ea29110b935(val *Enum08a525336b538128cd395ea29110b935) *NullableEnum08a525336b538128cd395ea29110b935 {
	return &NullableEnum08a525336b538128cd395ea29110b935{value: val, isSet: true}
}

func (v NullableEnum08a525336b538128cd395ea29110b935) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum08a525336b538128cd395ea29110b935) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

