/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumRESPONSEHEADERS the model 'EnumRESPONSEHEADERS'
type EnumRESPONSEHEADERS string

// List of Enum_RESPONSE_HEADERS
const (
	ENUMRESPONSEHEADERS_RESPONSE_HEADERS EnumRESPONSEHEADERS = "response.headers"
)

// All allowed values of EnumRESPONSEHEADERS enum
var AllowedEnumRESPONSEHEADERSEnumValues = []EnumRESPONSEHEADERS{
	"response.headers",
}

func (v *EnumRESPONSEHEADERS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRESPONSEHEADERS(value)
	for _, existing := range AllowedEnumRESPONSEHEADERSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumRESPONSEHEADERS", value)
}

// NewEnumRESPONSEHEADERSFromValue returns a pointer to a valid EnumRESPONSEHEADERS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRESPONSEHEADERSFromValue(v string) (*EnumRESPONSEHEADERS, error) {
	ev := EnumRESPONSEHEADERS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRESPONSEHEADERS: valid values are %v", v, AllowedEnumRESPONSEHEADERSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRESPONSEHEADERS) IsValid() bool {
	for _, existing := range AllowedEnumRESPONSEHEADERSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_RESPONSE_HEADERS value
func (v EnumRESPONSEHEADERS) Ptr() *EnumRESPONSEHEADERS {
	return &v
}

type NullableEnumRESPONSEHEADERS struct {
	value *EnumRESPONSEHEADERS
	isSet bool
}

func (v NullableEnumRESPONSEHEADERS) Get() *EnumRESPONSEHEADERS {
	return v.value
}

func (v *NullableEnumRESPONSEHEADERS) Set(val *EnumRESPONSEHEADERS) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRESPONSEHEADERS) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRESPONSEHEADERS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRESPONSEHEADERS(val *EnumRESPONSEHEADERS) *NullableEnumRESPONSEHEADERS {
	return &NullableEnumRESPONSEHEADERS{value: val, isSet: true}
}

func (v NullableEnumRESPONSEHEADERS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRESPONSEHEADERS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

