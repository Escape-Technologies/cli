/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumB19d734396f7b72a94c996eabb2db968 the model 'EnumB19d734396f7b72a94c996eabb2db968'
type EnumB19d734396f7b72a94c996eabb2db968 string

// List of Enum_b19d734396f7b72a94c996eabb2db968
const (
	ENUMB19D734396F7B72A94C996EABB2DB968_DNS EnumB19d734396f7b72a94c996eabb2db968 = "DNS"
	ENUMB19D734396F7B72A94C996EABB2DB968_IPV4 EnumB19d734396f7b72a94c996eabb2db968 = "IPV4"
	ENUMB19D734396F7B72A94C996EABB2DB968_IPV6 EnumB19d734396f7b72a94c996eabb2db968 = "IPV6"
)

// All allowed values of EnumB19d734396f7b72a94c996eabb2db968 enum
var AllowedEnumB19d734396f7b72a94c996eabb2db968EnumValues = []EnumB19d734396f7b72a94c996eabb2db968{
	"DNS",
	"IPV4",
	"IPV6",
}

func (v *EnumB19d734396f7b72a94c996eabb2db968) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumB19d734396f7b72a94c996eabb2db968(value)
	for _, existing := range AllowedEnumB19d734396f7b72a94c996eabb2db968EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumB19d734396f7b72a94c996eabb2db968", value)
}

// NewEnumB19d734396f7b72a94c996eabb2db968FromValue returns a pointer to a valid EnumB19d734396f7b72a94c996eabb2db968
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumB19d734396f7b72a94c996eabb2db968FromValue(v string) (*EnumB19d734396f7b72a94c996eabb2db968, error) {
	ev := EnumB19d734396f7b72a94c996eabb2db968(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumB19d734396f7b72a94c996eabb2db968: valid values are %v", v, AllowedEnumB19d734396f7b72a94c996eabb2db968EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumB19d734396f7b72a94c996eabb2db968) IsValid() bool {
	for _, existing := range AllowedEnumB19d734396f7b72a94c996eabb2db968EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_b19d734396f7b72a94c996eabb2db968 value
func (v EnumB19d734396f7b72a94c996eabb2db968) Ptr() *EnumB19d734396f7b72a94c996eabb2db968 {
	return &v
}

type NullableEnumB19d734396f7b72a94c996eabb2db968 struct {
	value *EnumB19d734396f7b72a94c996eabb2db968
	isSet bool
}

func (v NullableEnumB19d734396f7b72a94c996eabb2db968) Get() *EnumB19d734396f7b72a94c996eabb2db968 {
	return v.value
}

func (v *NullableEnumB19d734396f7b72a94c996eabb2db968) Set(val *EnumB19d734396f7b72a94c996eabb2db968) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumB19d734396f7b72a94c996eabb2db968) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumB19d734396f7b72a94c996eabb2db968) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumB19d734396f7b72a94c996eabb2db968(val *EnumB19d734396f7b72a94c996eabb2db968) *NullableEnumB19d734396f7b72a94c996eabb2db968 {
	return &NullableEnumB19d734396f7b72a94c996eabb2db968{value: val, isSet: true}
}

func (v NullableEnumB19d734396f7b72a94c996eabb2db968) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumB19d734396f7b72a94c996eabb2db968) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

