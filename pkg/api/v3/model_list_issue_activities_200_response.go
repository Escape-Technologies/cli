/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ListIssueActivities200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssueActivities200Response{}

// ListIssueActivities200Response struct for ListIssueActivities200Response
type ListIssueActivities200Response struct {
	NextCursor string `json:"nextCursor"`
	TotalCount *int `json:"totalCount,omitempty"`
	Data []ListIssueActivities200ResponseDataInner `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _ListIssueActivities200Response ListIssueActivities200Response

// NewListIssueActivities200Response instantiates a new ListIssueActivities200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssueActivities200Response(nextCursor string, data []ListIssueActivities200ResponseDataInner) *ListIssueActivities200Response {
	this := ListIssueActivities200Response{}
	this.NextCursor = nextCursor
	var totalCount int = 100
	this.TotalCount = &totalCount
	this.Data = data
	return &this
}

// NewListIssueActivities200ResponseWithDefaults instantiates a new ListIssueActivities200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssueActivities200ResponseWithDefaults() *ListIssueActivities200Response {
	this := ListIssueActivities200Response{}
	var totalCount int = 100
	this.TotalCount = &totalCount
	return &this
}

// GetNextCursor returns the NextCursor field value
func (o *ListIssueActivities200Response) GetNextCursor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextCursor
}

// GetNextCursorOk returns a tuple with the NextCursor field value
// and a boolean to check if the value has been set.
func (o *ListIssueActivities200Response) GetNextCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextCursor, true
}

// SetNextCursor sets field value
func (o *ListIssueActivities200Response) SetNextCursor(v string) {
	o.NextCursor = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *ListIssueActivities200Response) GetTotalCount() int {
	if o == nil || IsNil(o.TotalCount) {
		var ret int
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIssueActivities200Response) GetTotalCountOk() (*int, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ListIssueActivities200Response) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int and assigns it to the TotalCount field.
func (o *ListIssueActivities200Response) SetTotalCount(v int) {
	o.TotalCount = &v
}

// GetData returns the Data field value
func (o *ListIssueActivities200Response) GetData() []ListIssueActivities200ResponseDataInner {
	if o == nil {
		var ret []ListIssueActivities200ResponseDataInner
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListIssueActivities200Response) GetDataOk() ([]ListIssueActivities200ResponseDataInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListIssueActivities200Response) SetData(v []ListIssueActivities200ResponseDataInner) {
	o.Data = v
}

func (o ListIssueActivities200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssueActivities200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nextCursor"] = o.NextCursor
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListIssueActivities200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nextCursor",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssueActivities200Response := _ListIssueActivities200Response{}

	err = json.Unmarshal(data, &varListIssueActivities200Response)

	if err != nil {
		return err
	}

	*o = ListIssueActivities200Response(varListIssueActivities200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nextCursor")
		delete(additionalProperties, "totalCount")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListIssueActivities200Response struct {
	value *ListIssueActivities200Response
	isSet bool
}

func (v NullableListIssueActivities200Response) Get() *ListIssueActivities200Response {
	return v.value
}

func (v *NullableListIssueActivities200Response) Set(val *ListIssueActivities200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssueActivities200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssueActivities200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssueActivities200Response(val *ListIssueActivities200Response) *NullableListIssueActivities200Response {
	return &NullableListIssueActivities200Response{value: val, isSet: true}
}

func (v NullableListIssueActivities200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssueActivities200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


