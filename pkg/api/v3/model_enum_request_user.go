/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumREQUESTUSER the model 'EnumREQUESTUSER'
type EnumREQUESTUSER string

// List of Enum_REQUEST_USER
const (
	ENUMREQUESTUSER_REQUEST_USER EnumREQUESTUSER = "request.user"
)

// All allowed values of EnumREQUESTUSER enum
var AllowedEnumREQUESTUSEREnumValues = []EnumREQUESTUSER{
	"request.user",
}

func (v *EnumREQUESTUSER) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumREQUESTUSER(value)
	for _, existing := range AllowedEnumREQUESTUSEREnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumREQUESTUSER", value)
}

// NewEnumREQUESTUSERFromValue returns a pointer to a valid EnumREQUESTUSER
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumREQUESTUSERFromValue(v string) (*EnumREQUESTUSER, error) {
	ev := EnumREQUESTUSER(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumREQUESTUSER: valid values are %v", v, AllowedEnumREQUESTUSEREnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumREQUESTUSER) IsValid() bool {
	for _, existing := range AllowedEnumREQUESTUSEREnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_REQUEST_USER value
func (v EnumREQUESTUSER) Ptr() *EnumREQUESTUSER {
	return &v
}

type NullableEnumREQUESTUSER struct {
	value *EnumREQUESTUSER
	isSet bool
}

func (v NullableEnumREQUESTUSER) Get() *EnumREQUESTUSER {
	return v.value
}

func (v *NullableEnumREQUESTUSER) Set(val *EnumREQUESTUSER) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumREQUESTUSER) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumREQUESTUSER) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumREQUESTUSER(val *EnumREQUESTUSER) *NullableEnumREQUESTUSER {
	return &NullableEnumREQUESTUSER{value: val, isSet: true}
}

func (v NullableEnumREQUESTUSER) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumREQUESTUSER) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

