/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMWEBAPP The type of the asset frontend
type ENUMWEBAPP string

// List of ENUM_WEBAPP
const (
	ENUMWEBAPP_WEBAPP ENUMWEBAPP = "WEBAPP"
)

// All allowed values of ENUMWEBAPP enum
var AllowedENUMWEBAPPEnumValues = []ENUMWEBAPP{
	"WEBAPP",
}

func (v *ENUMWEBAPP) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMWEBAPP(value)
	for _, existing := range AllowedENUMWEBAPPEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMWEBAPP", value)
}

// NewENUMWEBAPPFromValue returns a pointer to a valid ENUMWEBAPP
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMWEBAPPFromValue(v string) (*ENUMWEBAPP, error) {
	ev := ENUMWEBAPP(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMWEBAPP: valid values are %v", v, AllowedENUMWEBAPPEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMWEBAPP) IsValid() bool {
	for _, existing := range AllowedENUMWEBAPPEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_WEBAPP value
func (v ENUMWEBAPP) Ptr() *ENUMWEBAPP {
	return &v
}

type NullableENUMWEBAPP struct {
	value *ENUMWEBAPP
	isSet bool
}

func (v NullableENUMWEBAPP) Get() *ENUMWEBAPP {
	return v.value
}

func (v *NullableENUMWEBAPP) Set(val *ENUMWEBAPP) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMWEBAPP) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMWEBAPP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMWEBAPP(val *ENUMWEBAPP) *NullableENUMWEBAPP {
	return &NullableENUMWEBAPP{value: val, isSet: true}
}

func (v NullableENUMWEBAPP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMWEBAPP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

