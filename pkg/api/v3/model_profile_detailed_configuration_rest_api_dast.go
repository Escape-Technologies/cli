/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationRestApiDast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationRestApiDast{}

// ProfileDetailedConfigurationRestApiDast struct for ProfileDetailedConfigurationRestApiDast
type ProfileDetailedConfigurationRestApiDast struct {
	SchemaS3Key *string `json:"schema_s3_key,omitempty"`
	LocationId *string `json:"location_id,omitempty"`
	Profile *ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE `json:"profile,omitempty"`
	Mode *ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE `json:"mode,omitempty"`
	MaxDuration *float32 `json:"max_duration,omitempty"`
	Hotstart []string `json:"hotstart,omitempty"`
	HotstartOnly *bool `json:"hotstart_only,omitempty"`
	Blocklist []ProfileDetailedConfigurationRestApiDastBlocklistInner `json:"blocklist,omitempty"`
	Scope *ProfileDetailedConfigurationRestApiDastScope `json:"scope,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationRestApiDast ProfileDetailedConfigurationRestApiDast

// NewProfileDetailedConfigurationRestApiDast instantiates a new ProfileDetailedConfigurationRestApiDast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationRestApiDast() *ProfileDetailedConfigurationRestApiDast {
	this := ProfileDetailedConfigurationRestApiDast{}
	return &this
}

// NewProfileDetailedConfigurationRestApiDastWithDefaults instantiates a new ProfileDetailedConfigurationRestApiDast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationRestApiDastWithDefaults() *ProfileDetailedConfigurationRestApiDast {
	this := ProfileDetailedConfigurationRestApiDast{}
	return &this
}

// GetSchemaS3Key returns the SchemaS3Key field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetSchemaS3Key() string {
	if o == nil || IsNil(o.SchemaS3Key) {
		var ret string
		return ret
	}
	return *o.SchemaS3Key
}

// GetSchemaS3KeyOk returns a tuple with the SchemaS3Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetSchemaS3KeyOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaS3Key) {
		return nil, false
	}
	return o.SchemaS3Key, true
}

// HasSchemaS3Key returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasSchemaS3Key() bool {
	if o != nil && !IsNil(o.SchemaS3Key) {
		return true
	}

	return false
}

// SetSchemaS3Key gets a reference to the given string and assigns it to the SchemaS3Key field.
func (o *ProfileDetailedConfigurationRestApiDast) SetSchemaS3Key(v string) {
	o.SchemaS3Key = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *ProfileDetailedConfigurationRestApiDast) SetLocationId(v string) {
	o.LocationId = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetProfile() ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE {
	if o == nil || IsNil(o.Profile) {
		var ret ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetProfileOk() (*ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE and assigns it to the Profile field.
func (o *ProfileDetailedConfigurationRestApiDast) SetProfile(v ENUMPROPERTIESCONFIGURATIONPROPERTIESGRAPHQLAPIDASTPROPERTIESPROFILE) {
	o.Profile = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetMode() ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE {
	if o == nil || IsNil(o.Mode) {
		var ret ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetModeOk() (*ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE and assigns it to the Mode field.
func (o *ProfileDetailedConfigurationRestApiDast) SetMode(v ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE) {
	o.Mode = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetMaxDuration() float32 {
	if o == nil || IsNil(o.MaxDuration) {
		var ret float32
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetMaxDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxDuration) {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasMaxDuration() bool {
	if o != nil && !IsNil(o.MaxDuration) {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given float32 and assigns it to the MaxDuration field.
func (o *ProfileDetailedConfigurationRestApiDast) SetMaxDuration(v float32) {
	o.MaxDuration = &v
}

// GetHotstart returns the Hotstart field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetHotstart() []string {
	if o == nil || IsNil(o.Hotstart) {
		var ret []string
		return ret
	}
	return o.Hotstart
}

// GetHotstartOk returns a tuple with the Hotstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetHotstartOk() ([]string, bool) {
	if o == nil || IsNil(o.Hotstart) {
		return nil, false
	}
	return o.Hotstart, true
}

// HasHotstart returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasHotstart() bool {
	if o != nil && !IsNil(o.Hotstart) {
		return true
	}

	return false
}

// SetHotstart gets a reference to the given []string and assigns it to the Hotstart field.
func (o *ProfileDetailedConfigurationRestApiDast) SetHotstart(v []string) {
	o.Hotstart = v
}

// GetHotstartOnly returns the HotstartOnly field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetHotstartOnly() bool {
	if o == nil || IsNil(o.HotstartOnly) {
		var ret bool
		return ret
	}
	return *o.HotstartOnly
}

// GetHotstartOnlyOk returns a tuple with the HotstartOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetHotstartOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.HotstartOnly) {
		return nil, false
	}
	return o.HotstartOnly, true
}

// HasHotstartOnly returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasHotstartOnly() bool {
	if o != nil && !IsNil(o.HotstartOnly) {
		return true
	}

	return false
}

// SetHotstartOnly gets a reference to the given bool and assigns it to the HotstartOnly field.
func (o *ProfileDetailedConfigurationRestApiDast) SetHotstartOnly(v bool) {
	o.HotstartOnly = &v
}

// GetBlocklist returns the Blocklist field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetBlocklist() []ProfileDetailedConfigurationRestApiDastBlocklistInner {
	if o == nil || IsNil(o.Blocklist) {
		var ret []ProfileDetailedConfigurationRestApiDastBlocklistInner
		return ret
	}
	return o.Blocklist
}

// GetBlocklistOk returns a tuple with the Blocklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetBlocklistOk() ([]ProfileDetailedConfigurationRestApiDastBlocklistInner, bool) {
	if o == nil || IsNil(o.Blocklist) {
		return nil, false
	}
	return o.Blocklist, true
}

// HasBlocklist returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasBlocklist() bool {
	if o != nil && !IsNil(o.Blocklist) {
		return true
	}

	return false
}

// SetBlocklist gets a reference to the given []ProfileDetailedConfigurationRestApiDastBlocklistInner and assigns it to the Blocklist field.
func (o *ProfileDetailedConfigurationRestApiDast) SetBlocklist(v []ProfileDetailedConfigurationRestApiDastBlocklistInner) {
	o.Blocklist = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationRestApiDast) GetScope() ProfileDetailedConfigurationRestApiDastScope {
	if o == nil || IsNil(o.Scope) {
		var ret ProfileDetailedConfigurationRestApiDastScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationRestApiDast) GetScopeOk() (*ProfileDetailedConfigurationRestApiDastScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationRestApiDast) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given ProfileDetailedConfigurationRestApiDastScope and assigns it to the Scope field.
func (o *ProfileDetailedConfigurationRestApiDast) SetScope(v ProfileDetailedConfigurationRestApiDastScope) {
	o.Scope = &v
}

func (o ProfileDetailedConfigurationRestApiDast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationRestApiDast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaS3Key) {
		toSerialize["schema_s3_key"] = o.SchemaS3Key
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.MaxDuration) {
		toSerialize["max_duration"] = o.MaxDuration
	}
	if !IsNil(o.Hotstart) {
		toSerialize["hotstart"] = o.Hotstart
	}
	if !IsNil(o.HotstartOnly) {
		toSerialize["hotstart_only"] = o.HotstartOnly
	}
	if !IsNil(o.Blocklist) {
		toSerialize["blocklist"] = o.Blocklist
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationRestApiDast) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationRestApiDast := _ProfileDetailedConfigurationRestApiDast{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationRestApiDast)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationRestApiDast(varProfileDetailedConfigurationRestApiDast)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "schema_s3_key")
		delete(additionalProperties, "location_id")
		delete(additionalProperties, "profile")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "max_duration")
		delete(additionalProperties, "hotstart")
		delete(additionalProperties, "hotstart_only")
		delete(additionalProperties, "blocklist")
		delete(additionalProperties, "scope")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationRestApiDast struct {
	value *ProfileDetailedConfigurationRestApiDast
	isSet bool
}

func (v NullableProfileDetailedConfigurationRestApiDast) Get() *ProfileDetailedConfigurationRestApiDast {
	return v.value
}

func (v *NullableProfileDetailedConfigurationRestApiDast) Set(val *ProfileDetailedConfigurationRestApiDast) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationRestApiDast) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationRestApiDast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationRestApiDast(val *ProfileDetailedConfigurationRestApiDast) *NullableProfileDetailedConfigurationRestApiDast {
	return &NullableProfileDetailedConfigurationRestApiDast{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationRestApiDast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationRestApiDast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


