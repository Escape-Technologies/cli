/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProfileConfigurationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProfileConfigurationRequest{}

// UpdateProfileConfigurationRequest struct for UpdateProfileConfigurationRequest
type UpdateProfileConfigurationRequest struct {
	// The configuration to update
	Configuration map[string]interface{} `json:"configuration"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProfileConfigurationRequest UpdateProfileConfigurationRequest

// NewUpdateProfileConfigurationRequest instantiates a new UpdateProfileConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfileConfigurationRequest(configuration map[string]interface{}) *UpdateProfileConfigurationRequest {
	this := UpdateProfileConfigurationRequest{}
	this.Configuration = configuration
	return &this
}

// NewUpdateProfileConfigurationRequestWithDefaults instantiates a new UpdateProfileConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfileConfigurationRequestWithDefaults() *UpdateProfileConfigurationRequest {
	this := UpdateProfileConfigurationRequest{}
	return &this
}

// GetConfiguration returns the Configuration field value
func (o *UpdateProfileConfigurationRequest) GetConfiguration() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileConfigurationRequest) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// SetConfiguration sets field value
func (o *UpdateProfileConfigurationRequest) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

func (o UpdateProfileConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProfileConfigurationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuration"] = o.Configuration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProfileConfigurationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProfileConfigurationRequest := _UpdateProfileConfigurationRequest{}

	err = json.Unmarshal(data, &varUpdateProfileConfigurationRequest)

	if err != nil {
		return err
	}

	*o = UpdateProfileConfigurationRequest(varUpdateProfileConfigurationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProfileConfigurationRequest struct {
	value *UpdateProfileConfigurationRequest
	isSet bool
}

func (v NullableUpdateProfileConfigurationRequest) Get() *UpdateProfileConfigurationRequest {
	return v.value
}

func (v *NullableUpdateProfileConfigurationRequest) Set(val *UpdateProfileConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfileConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfileConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfileConfigurationRequest(val *UpdateProfileConfigurationRequest) *NullableUpdateProfileConfigurationRequest {
	return &NullableUpdateProfileConfigurationRequest{value: val, isSet: true}
}

func (v NullableUpdateProfileConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfileConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


