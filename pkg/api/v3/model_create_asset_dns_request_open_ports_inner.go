/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetDNSRequestOpenPortsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetDNSRequestOpenPortsInner{}

// CreateAssetDNSRequestOpenPortsInner struct for CreateAssetDNSRequestOpenPortsInner
type CreateAssetDNSRequestOpenPortsInner struct {
	Port float32 `json:"port"`
	Protocols []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS `json:"protocols"`
	LocationIds []string `json:"location_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetDNSRequestOpenPortsInner CreateAssetDNSRequestOpenPortsInner

// NewCreateAssetDNSRequestOpenPortsInner instantiates a new CreateAssetDNSRequestOpenPortsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetDNSRequestOpenPortsInner(port float32, protocols []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) *CreateAssetDNSRequestOpenPortsInner {
	this := CreateAssetDNSRequestOpenPortsInner{}
	this.Port = port
	this.Protocols = protocols
	return &this
}

// NewCreateAssetDNSRequestOpenPortsInnerWithDefaults instantiates a new CreateAssetDNSRequestOpenPortsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetDNSRequestOpenPortsInnerWithDefaults() *CreateAssetDNSRequestOpenPortsInner {
	this := CreateAssetDNSRequestOpenPortsInner{}
	return &this
}

// GetPort returns the Port field value
func (o *CreateAssetDNSRequestOpenPortsInner) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequestOpenPortsInner) GetPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *CreateAssetDNSRequestOpenPortsInner) SetPort(v float32) {
	o.Port = v
}

// GetProtocols returns the Protocols field value
func (o *CreateAssetDNSRequestOpenPortsInner) GetProtocols() []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS {
	if o == nil {
		var ret []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS
		return ret
	}

	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequestOpenPortsInner) GetProtocolsOk() ([]ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocols, true
}

// SetProtocols sets field value
func (o *CreateAssetDNSRequestOpenPortsInner) SetProtocols(v []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) {
	o.Protocols = v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *CreateAssetDNSRequestOpenPortsInner) GetLocationIds() []string {
	if o == nil || IsNil(o.LocationIds) {
		var ret []string
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequestOpenPortsInner) GetLocationIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LocationIds) {
		return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *CreateAssetDNSRequestOpenPortsInner) HasLocationIds() bool {
	if o != nil && !IsNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []string and assigns it to the LocationIds field.
func (o *CreateAssetDNSRequestOpenPortsInner) SetLocationIds(v []string) {
	o.LocationIds = v
}

func (o CreateAssetDNSRequestOpenPortsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetDNSRequestOpenPortsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port
	toSerialize["protocols"] = o.Protocols
	if !IsNil(o.LocationIds) {
		toSerialize["location_ids"] = o.LocationIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetDNSRequestOpenPortsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
		"protocols",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetDNSRequestOpenPortsInner := _CreateAssetDNSRequestOpenPortsInner{}

	err = json.Unmarshal(data, &varCreateAssetDNSRequestOpenPortsInner)

	if err != nil {
		return err
	}

	*o = CreateAssetDNSRequestOpenPortsInner(varCreateAssetDNSRequestOpenPortsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "port")
		delete(additionalProperties, "protocols")
		delete(additionalProperties, "location_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetDNSRequestOpenPortsInner struct {
	value *CreateAssetDNSRequestOpenPortsInner
	isSet bool
}

func (v NullableCreateAssetDNSRequestOpenPortsInner) Get() *CreateAssetDNSRequestOpenPortsInner {
	return v.value
}

func (v *NullableCreateAssetDNSRequestOpenPortsInner) Set(val *CreateAssetDNSRequestOpenPortsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetDNSRequestOpenPortsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetDNSRequestOpenPortsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetDNSRequestOpenPortsInner(val *CreateAssetDNSRequestOpenPortsInner) *NullableCreateAssetDNSRequestOpenPortsInner {
	return &NullableCreateAssetDNSRequestOpenPortsInner{value: val, isSet: true}
}

func (v NullableCreateAssetDNSRequestOpenPortsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetDNSRequestOpenPortsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


