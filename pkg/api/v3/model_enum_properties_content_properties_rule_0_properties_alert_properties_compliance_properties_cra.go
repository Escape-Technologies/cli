/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA the model 'ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA'
type ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA string

// List of ENUM_PROPERTIES_CONTENT_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_CRA
const (
	ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA_ANNEX_I_1 ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA = "Annex I-1"
	ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA_ARTICLE_11 ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA = "Article-11"
)

// All allowed values of ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA enum
var AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAEnumValues = []ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA{
	"Annex I-1",
	"Article-11",
}

func (v *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA(value)
	for _, existing := range AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA", value)
}

// NewENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAFromValue returns a pointer to a valid ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAFromValue(v string) (*ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA, error) {
	ev := ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA: valid values are %v", v, AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRAEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_CONTENT_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_CRA value
func (v ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) Ptr() *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA {
	return &v
}

type NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA struct {
	value *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA
	isSet bool
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) Get() *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA {
	return v.value
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) Set(val *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA(val *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA {
	return &NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESCRA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

