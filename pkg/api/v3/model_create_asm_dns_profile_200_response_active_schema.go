/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateASMDNSProfile200ResponseActiveSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateASMDNSProfile200ResponseActiveSchema{}

// CreateASMDNSProfile200ResponseActiveSchema struct for CreateASMDNSProfile200ResponseActiveSchema
type CreateASMDNSProfile200ResponseActiveSchema struct {
	Id string `json:"id"`
	Url string `json:"url"`
	Generated bool `json:"generated"`
	AdditionalProperties map[string]interface{}
}

type _CreateASMDNSProfile200ResponseActiveSchema CreateASMDNSProfile200ResponseActiveSchema

// NewCreateASMDNSProfile200ResponseActiveSchema instantiates a new CreateASMDNSProfile200ResponseActiveSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateASMDNSProfile200ResponseActiveSchema(id string, url string, generated bool) *CreateASMDNSProfile200ResponseActiveSchema {
	this := CreateASMDNSProfile200ResponseActiveSchema{}
	this.Id = id
	this.Url = url
	this.Generated = generated
	return &this
}

// NewCreateASMDNSProfile200ResponseActiveSchemaWithDefaults instantiates a new CreateASMDNSProfile200ResponseActiveSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateASMDNSProfile200ResponseActiveSchemaWithDefaults() *CreateASMDNSProfile200ResponseActiveSchema {
	this := CreateASMDNSProfile200ResponseActiveSchema{}
	return &this
}

// GetId returns the Id field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) SetUrl(v string) {
	o.Url = v
}

// GetGenerated returns the Generated field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetGenerated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Generated
}

// GetGeneratedOk returns a tuple with the Generated field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveSchema) GetGeneratedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Generated, true
}

// SetGenerated sets field value
func (o *CreateASMDNSProfile200ResponseActiveSchema) SetGenerated(v bool) {
	o.Generated = v
}

func (o CreateASMDNSProfile200ResponseActiveSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateASMDNSProfile200ResponseActiveSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["generated"] = o.Generated

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateASMDNSProfile200ResponseActiveSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"generated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateASMDNSProfile200ResponseActiveSchema := _CreateASMDNSProfile200ResponseActiveSchema{}

	err = json.Unmarshal(data, &varCreateASMDNSProfile200ResponseActiveSchema)

	if err != nil {
		return err
	}

	*o = CreateASMDNSProfile200ResponseActiveSchema(varCreateASMDNSProfile200ResponseActiveSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "generated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateASMDNSProfile200ResponseActiveSchema struct {
	value *CreateASMDNSProfile200ResponseActiveSchema
	isSet bool
}

func (v NullableCreateASMDNSProfile200ResponseActiveSchema) Get() *CreateASMDNSProfile200ResponseActiveSchema {
	return v.value
}

func (v *NullableCreateASMDNSProfile200ResponseActiveSchema) Set(val *CreateASMDNSProfile200ResponseActiveSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateASMDNSProfile200ResponseActiveSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateASMDNSProfile200ResponseActiveSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateASMDNSProfile200ResponseActiveSchema(val *CreateASMDNSProfile200ResponseActiveSchema) *NullableCreateASMDNSProfile200ResponseActiveSchema {
	return &NullableCreateASMDNSProfile200ResponseActiveSchema{value: val, isSet: true}
}

func (v NullableCreateASMDNSProfile200ResponseActiveSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateASMDNSProfile200ResponseActiveSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


