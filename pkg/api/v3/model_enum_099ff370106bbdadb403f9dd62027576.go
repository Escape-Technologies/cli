/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum099ff370106bbdadb403f9dd62027576 the model 'Enum099ff370106bbdadb403f9dd62027576'
type Enum099ff370106bbdadb403f9dd62027576 string

// List of Enum_099ff370106bbdadb403f9dd62027576
const (
	ENUM099FF370106BBDADB403F9DD62027576_US_EAST_2 Enum099ff370106bbdadb403f9dd62027576 = "us-east-2"
	ENUM099FF370106BBDADB403F9DD62027576_US_EAST_1 Enum099ff370106bbdadb403f9dd62027576 = "us-east-1"
	ENUM099FF370106BBDADB403F9DD62027576_US_WEST_1 Enum099ff370106bbdadb403f9dd62027576 = "us-west-1"
	ENUM099FF370106BBDADB403F9DD62027576_US_WEST_2 Enum099ff370106bbdadb403f9dd62027576 = "us-west-2"
	ENUM099FF370106BBDADB403F9DD62027576_AF_SOUTH_1 Enum099ff370106bbdadb403f9dd62027576 = "af-south-1"
	ENUM099FF370106BBDADB403F9DD62027576_AP_EAST_1 Enum099ff370106bbdadb403f9dd62027576 = "ap-east-1"
	ENUM099FF370106BBDADB403F9DD62027576_AP_SOUTH_1 Enum099ff370106bbdadb403f9dd62027576 = "ap-south-1"
	ENUM099FF370106BBDADB403F9DD62027576_AP_NORTHEAST_3 Enum099ff370106bbdadb403f9dd62027576 = "ap-northeast-3"
	ENUM099FF370106BBDADB403F9DD62027576_AP_NORTHEAST_2 Enum099ff370106bbdadb403f9dd62027576 = "ap-northeast-2"
	ENUM099FF370106BBDADB403F9DD62027576_AP_SOUTHEAST_1 Enum099ff370106bbdadb403f9dd62027576 = "ap-southeast-1"
	ENUM099FF370106BBDADB403F9DD62027576_AP_SOUTHEAST_2 Enum099ff370106bbdadb403f9dd62027576 = "ap-southeast-2"
	ENUM099FF370106BBDADB403F9DD62027576_AP_NORTHEAST_1 Enum099ff370106bbdadb403f9dd62027576 = "ap-northeast-1"
	ENUM099FF370106BBDADB403F9DD62027576_CA_CENTRAL_1 Enum099ff370106bbdadb403f9dd62027576 = "ca-central-1"
	ENUM099FF370106BBDADB403F9DD62027576_CN_NORTH_1 Enum099ff370106bbdadb403f9dd62027576 = "cn-north-1"
	ENUM099FF370106BBDADB403F9DD62027576_CN_NORTHWEST_1 Enum099ff370106bbdadb403f9dd62027576 = "cn-northwest-1"
	ENUM099FF370106BBDADB403F9DD62027576_EU_CENTRAL_1 Enum099ff370106bbdadb403f9dd62027576 = "eu-central-1"
	ENUM099FF370106BBDADB403F9DD62027576_EU_WEST_1 Enum099ff370106bbdadb403f9dd62027576 = "eu-west-1"
	ENUM099FF370106BBDADB403F9DD62027576_EU_WEST_2 Enum099ff370106bbdadb403f9dd62027576 = "eu-west-2"
	ENUM099FF370106BBDADB403F9DD62027576_EU_SOUTH_1 Enum099ff370106bbdadb403f9dd62027576 = "eu-south-1"
	ENUM099FF370106BBDADB403F9DD62027576_EU_WEST_3 Enum099ff370106bbdadb403f9dd62027576 = "eu-west-3"
	ENUM099FF370106BBDADB403F9DD62027576_EU_NORTH_1 Enum099ff370106bbdadb403f9dd62027576 = "eu-north-1"
	ENUM099FF370106BBDADB403F9DD62027576_ME_SOUTH_1 Enum099ff370106bbdadb403f9dd62027576 = "me-south-1"
	ENUM099FF370106BBDADB403F9DD62027576_SA_EAST_1 Enum099ff370106bbdadb403f9dd62027576 = "sa-east-1"
)

// All allowed values of Enum099ff370106bbdadb403f9dd62027576 enum
var AllowedEnum099ff370106bbdadb403f9dd62027576EnumValues = []Enum099ff370106bbdadb403f9dd62027576{
	"us-east-2",
	"us-east-1",
	"us-west-1",
	"us-west-2",
	"af-south-1",
	"ap-east-1",
	"ap-south-1",
	"ap-northeast-3",
	"ap-northeast-2",
	"ap-southeast-1",
	"ap-southeast-2",
	"ap-northeast-1",
	"ca-central-1",
	"cn-north-1",
	"cn-northwest-1",
	"eu-central-1",
	"eu-west-1",
	"eu-west-2",
	"eu-south-1",
	"eu-west-3",
	"eu-north-1",
	"me-south-1",
	"sa-east-1",
}

func (v *Enum099ff370106bbdadb403f9dd62027576) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum099ff370106bbdadb403f9dd62027576(value)
	for _, existing := range AllowedEnum099ff370106bbdadb403f9dd62027576EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum099ff370106bbdadb403f9dd62027576", value)
}

// NewEnum099ff370106bbdadb403f9dd62027576FromValue returns a pointer to a valid Enum099ff370106bbdadb403f9dd62027576
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum099ff370106bbdadb403f9dd62027576FromValue(v string) (*Enum099ff370106bbdadb403f9dd62027576, error) {
	ev := Enum099ff370106bbdadb403f9dd62027576(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum099ff370106bbdadb403f9dd62027576: valid values are %v", v, AllowedEnum099ff370106bbdadb403f9dd62027576EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum099ff370106bbdadb403f9dd62027576) IsValid() bool {
	for _, existing := range AllowedEnum099ff370106bbdadb403f9dd62027576EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_099ff370106bbdadb403f9dd62027576 value
func (v Enum099ff370106bbdadb403f9dd62027576) Ptr() *Enum099ff370106bbdadb403f9dd62027576 {
	return &v
}

type NullableEnum099ff370106bbdadb403f9dd62027576 struct {
	value *Enum099ff370106bbdadb403f9dd62027576
	isSet bool
}

func (v NullableEnum099ff370106bbdadb403f9dd62027576) Get() *Enum099ff370106bbdadb403f9dd62027576 {
	return v.value
}

func (v *NullableEnum099ff370106bbdadb403f9dd62027576) Set(val *Enum099ff370106bbdadb403f9dd62027576) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum099ff370106bbdadb403f9dd62027576) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum099ff370106bbdadb403f9dd62027576) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum099ff370106bbdadb403f9dd62027576(val *Enum099ff370106bbdadb403f9dd62027576) *NullableEnum099ff370106bbdadb403f9dd62027576 {
	return &NullableEnum099ff370106bbdadb403f9dd62027576{value: val, isSet: true}
}

func (v NullableEnum099ff370106bbdadb403f9dd62027576) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum099ff370106bbdadb403f9dd62027576) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

