/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ListIssueActivities200ResponseDataInnerAuthor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssueActivities200ResponseDataInnerAuthor{}

// ListIssueActivities200ResponseDataInnerAuthor struct for ListIssueActivities200ResponseDataInnerAuthor
type ListIssueActivities200ResponseDataInnerAuthor struct {
	Id string `json:"id"`
	Email string `json:"email"`
	AdditionalProperties map[string]interface{}
}

type _ListIssueActivities200ResponseDataInnerAuthor ListIssueActivities200ResponseDataInnerAuthor

// NewListIssueActivities200ResponseDataInnerAuthor instantiates a new ListIssueActivities200ResponseDataInnerAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssueActivities200ResponseDataInnerAuthor(id string, email string) *ListIssueActivities200ResponseDataInnerAuthor {
	this := ListIssueActivities200ResponseDataInnerAuthor{}
	this.Id = id
	this.Email = email
	return &this
}

// NewListIssueActivities200ResponseDataInnerAuthorWithDefaults instantiates a new ListIssueActivities200ResponseDataInnerAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssueActivities200ResponseDataInnerAuthorWithDefaults() *ListIssueActivities200ResponseDataInnerAuthor {
	this := ListIssueActivities200ResponseDataInnerAuthor{}
	return &this
}

// GetId returns the Id field value
func (o *ListIssueActivities200ResponseDataInnerAuthor) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListIssueActivities200ResponseDataInnerAuthor) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListIssueActivities200ResponseDataInnerAuthor) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *ListIssueActivities200ResponseDataInnerAuthor) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *ListIssueActivities200ResponseDataInnerAuthor) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *ListIssueActivities200ResponseDataInnerAuthor) SetEmail(v string) {
	o.Email = v
}

func (o ListIssueActivities200ResponseDataInnerAuthor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssueActivities200ResponseDataInnerAuthor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["email"] = o.Email

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListIssueActivities200ResponseDataInnerAuthor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssueActivities200ResponseDataInnerAuthor := _ListIssueActivities200ResponseDataInnerAuthor{}

	err = json.Unmarshal(data, &varListIssueActivities200ResponseDataInnerAuthor)

	if err != nil {
		return err
	}

	*o = ListIssueActivities200ResponseDataInnerAuthor(varListIssueActivities200ResponseDataInnerAuthor)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListIssueActivities200ResponseDataInnerAuthor struct {
	value *ListIssueActivities200ResponseDataInnerAuthor
	isSet bool
}

func (v NullableListIssueActivities200ResponseDataInnerAuthor) Get() *ListIssueActivities200ResponseDataInnerAuthor {
	return v.value
}

func (v *NullableListIssueActivities200ResponseDataInnerAuthor) Set(val *ListIssueActivities200ResponseDataInnerAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssueActivities200ResponseDataInnerAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssueActivities200ResponseDataInnerAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssueActivities200ResponseDataInnerAuthor(val *ListIssueActivities200ResponseDataInnerAuthor) *NullableListIssueActivities200ResponseDataInnerAuthor {
	return &NullableListIssueActivities200ResponseDataInnerAuthor{value: val, isSet: true}
}

func (v NullableListIssueActivities200ResponseDataInnerAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssueActivities200ResponseDataInnerAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


