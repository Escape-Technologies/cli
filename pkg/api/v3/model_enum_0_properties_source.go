/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUM0PROPERTIESSOURCE the model 'ENUM0PROPERTIESSOURCE'
type ENUM0PROPERTIESSOURCE string

// List of ENUM_0_PROPERTIES_SOURCE
const (
	ENUM0PROPERTIESSOURCE_UPLOADED ENUM0PROPERTIESSOURCE = "UPLOADED"
	ENUM0PROPERTIESSOURCE_GENERATED ENUM0PROPERTIESSOURCE = "GENERATED"
	ENUM0PROPERTIESSOURCE_FOUND ENUM0PROPERTIESSOURCE = "FOUND"
)

// All allowed values of ENUM0PROPERTIESSOURCE enum
var AllowedENUM0PROPERTIESSOURCEEnumValues = []ENUM0PROPERTIESSOURCE{
	"UPLOADED",
	"GENERATED",
	"FOUND",
}

func (v *ENUM0PROPERTIESSOURCE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUM0PROPERTIESSOURCE(value)
	for _, existing := range AllowedENUM0PROPERTIESSOURCEEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUM0PROPERTIESSOURCE", value)
}

// NewENUM0PROPERTIESSOURCEFromValue returns a pointer to a valid ENUM0PROPERTIESSOURCE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUM0PROPERTIESSOURCEFromValue(v string) (*ENUM0PROPERTIESSOURCE, error) {
	ev := ENUM0PROPERTIESSOURCE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUM0PROPERTIESSOURCE: valid values are %v", v, AllowedENUM0PROPERTIESSOURCEEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUM0PROPERTIESSOURCE) IsValid() bool {
	for _, existing := range AllowedENUM0PROPERTIESSOURCEEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_0_PROPERTIES_SOURCE value
func (v ENUM0PROPERTIESSOURCE) Ptr() *ENUM0PROPERTIESSOURCE {
	return &v
}

type NullableENUM0PROPERTIESSOURCE struct {
	value *ENUM0PROPERTIESSOURCE
	isSet bool
}

func (v NullableENUM0PROPERTIESSOURCE) Get() *ENUM0PROPERTIESSOURCE {
	return v.value
}

func (v *NullableENUM0PROPERTIESSOURCE) Set(val *ENUM0PROPERTIESSOURCE) {
	v.value = val
	v.isSet = true
}

func (v NullableENUM0PROPERTIESSOURCE) IsSet() bool {
	return v.isSet
}

func (v *NullableENUM0PROPERTIESSOURCE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUM0PROPERTIESSOURCE(val *ENUM0PROPERTIESSOURCE) *NullableENUM0PROPERTIESSOURCE {
	return &NullableENUM0PROPERTIESSOURCE{value: val, isSet: true}
}

func (v NullableENUM0PROPERTIESSOURCE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUM0PROPERTIESSOURCE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

