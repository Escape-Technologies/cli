/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the EventDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventDetailed{}

// EventDetailed Detailed information about an event
type EventDetailed struct {
	// The issues of the event
	Issues []IssueSummarized `json:"issues,omitempty"`
	// The number of issues of the event
	IssuesCount float32 `json:"issuesCount"`
	// The level of the event
	Level string `json:"level"`
	Scan *ScanDetailed `json:"scan,omitempty"`
	// The id of the scan of the event
	ScanId *string `json:"scanId,omitempty"`
	// The stage of the event
	Stage string `json:"stage"`
	// The title of the event
	Title string `json:"title"`
	AdditionalProperties map[string]interface{}
}

type _EventDetailed EventDetailed

// NewEventDetailed instantiates a new EventDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDetailed(issuesCount float32, level string, stage string, title string) *EventDetailed {
	this := EventDetailed{}
	this.IssuesCount = issuesCount
	this.Level = level
	this.Stage = stage
	this.Title = title
	return &this
}

// NewEventDetailedWithDefaults instantiates a new EventDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDetailedWithDefaults() *EventDetailed {
	this := EventDetailed{}
	return &this
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *EventDetailed) GetIssues() []IssueSummarized {
	if o == nil || IsNil(o.Issues) {
		var ret []IssueSummarized
		return ret
	}
	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetIssuesOk() ([]IssueSummarized, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *EventDetailed) HasIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given []IssueSummarized and assigns it to the Issues field.
func (o *EventDetailed) SetIssues(v []IssueSummarized) {
	o.Issues = v
}

// GetIssuesCount returns the IssuesCount field value
func (o *EventDetailed) GetIssuesCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IssuesCount
}

// GetIssuesCountOk returns a tuple with the IssuesCount field value
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetIssuesCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesCount, true
}

// SetIssuesCount sets field value
func (o *EventDetailed) SetIssuesCount(v float32) {
	o.IssuesCount = v
}

// GetLevel returns the Level field value
func (o *EventDetailed) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *EventDetailed) SetLevel(v string) {
	o.Level = v
}

// GetScan returns the Scan field value if set, zero value otherwise.
func (o *EventDetailed) GetScan() ScanDetailed {
	if o == nil || IsNil(o.Scan) {
		var ret ScanDetailed
		return ret
	}
	return *o.Scan
}

// GetScanOk returns a tuple with the Scan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetScanOk() (*ScanDetailed, bool) {
	if o == nil || IsNil(o.Scan) {
		return nil, false
	}
	return o.Scan, true
}

// HasScan returns a boolean if a field has been set.
func (o *EventDetailed) HasScan() bool {
	if o != nil && !IsNil(o.Scan) {
		return true
	}

	return false
}

// SetScan gets a reference to the given ScanDetailed and assigns it to the Scan field.
func (o *EventDetailed) SetScan(v ScanDetailed) {
	o.Scan = &v
}

// GetScanId returns the ScanId field value if set, zero value otherwise.
func (o *EventDetailed) GetScanId() string {
	if o == nil || IsNil(o.ScanId) {
		var ret string
		return ret
	}
	return *o.ScanId
}

// GetScanIdOk returns a tuple with the ScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetScanIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScanId) {
		return nil, false
	}
	return o.ScanId, true
}

// HasScanId returns a boolean if a field has been set.
func (o *EventDetailed) HasScanId() bool {
	if o != nil && !IsNil(o.ScanId) {
		return true
	}

	return false
}

// SetScanId gets a reference to the given string and assigns it to the ScanId field.
func (o *EventDetailed) SetScanId(v string) {
	o.ScanId = &v
}

// GetStage returns the Stage field value
func (o *EventDetailed) GetStage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *EventDetailed) SetStage(v string) {
	o.Stage = v
}

// GetTitle returns the Title field value
func (o *EventDetailed) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EventDetailed) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EventDetailed) SetTitle(v string) {
	o.Title = v
}

func (o EventDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	toSerialize["issuesCount"] = o.IssuesCount
	toSerialize["level"] = o.Level
	if !IsNil(o.Scan) {
		toSerialize["scan"] = o.Scan
	}
	if !IsNil(o.ScanId) {
		toSerialize["scanId"] = o.ScanId
	}
	toSerialize["stage"] = o.Stage
	toSerialize["title"] = o.Title

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issuesCount",
		"level",
		"stage",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventDetailed := _EventDetailed{}

	err = json.Unmarshal(data, &varEventDetailed)

	if err != nil {
		return err
	}

	*o = EventDetailed(varEventDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "issues")
		delete(additionalProperties, "issuesCount")
		delete(additionalProperties, "level")
		delete(additionalProperties, "scan")
		delete(additionalProperties, "scanId")
		delete(additionalProperties, "stage")
		delete(additionalProperties, "title")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventDetailed struct {
	value *EventDetailed
	isSet bool
}

func (v NullableEventDetailed) Get() *EventDetailed {
	return v.value
}

func (v *NullableEventDetailed) Set(val *EventDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDetailed(val *EventDetailed) *NullableEventDetailed {
	return &NullableEventDetailed{value: val, isSet: true}
}

func (v NullableEventDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


