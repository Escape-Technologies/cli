/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetGITLABRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetGITLABRequest{}

// CreateAssetGITLABRequest struct for CreateAssetGITLABRequest
type CreateAssetGITLABRequest struct {
	AssetClass ENUMREPOSITORY `json:"asset_class"`
	AssetType ENUMGITLABREPOSITORY `json:"asset_type"`
	Url string `json:"url"`
	Name *string `json:"name,omitempty"`
	HttpUrlToRepo *string `json:"http_url_to_repo,omitempty"`
	Description *string `json:"description,omitempty"`
	LocationId *string `json:"location_id,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	BlobBaseUrl *string `json:"blob_base_url,omitempty"`
	GroupId *float32 `json:"group_id,omitempty"`
	GroupFullPath *string `json:"group_full_path,omitempty"`
	GroupWebUrl *string `json:"group_web_url,omitempty"`
	ProjectId *float32 `json:"project_id,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	Visibility *ENUMPROPERTIESVISIBILITY `json:"visibility,omitempty"`
	Group *CreateAssetGITLABRequestGroup `json:"group,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetGITLABRequest CreateAssetGITLABRequest

// NewCreateAssetGITLABRequest instantiates a new CreateAssetGITLABRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetGITLABRequest(assetClass ENUMREPOSITORY, assetType ENUMGITLABREPOSITORY, url string) *CreateAssetGITLABRequest {
	this := CreateAssetGITLABRequest{}
	this.AssetClass = assetClass
	this.AssetType = assetType
	this.Url = url
	return &this
}

// NewCreateAssetGITLABRequestWithDefaults instantiates a new CreateAssetGITLABRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetGITLABRequestWithDefaults() *CreateAssetGITLABRequest {
	this := CreateAssetGITLABRequest{}
	return &this
}

// GetAssetClass returns the AssetClass field value
func (o *CreateAssetGITLABRequest) GetAssetClass() ENUMREPOSITORY {
	if o == nil {
		var ret ENUMREPOSITORY
		return ret
	}

	return o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetAssetClassOk() (*ENUMREPOSITORY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetClass, true
}

// SetAssetClass sets field value
func (o *CreateAssetGITLABRequest) SetAssetClass(v ENUMREPOSITORY) {
	o.AssetClass = v
}

// GetAssetType returns the AssetType field value
func (o *CreateAssetGITLABRequest) GetAssetType() ENUMGITLABREPOSITORY {
	if o == nil {
		var ret ENUMGITLABREPOSITORY
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetAssetTypeOk() (*ENUMGITLABREPOSITORY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *CreateAssetGITLABRequest) SetAssetType(v ENUMGITLABREPOSITORY) {
	o.AssetType = v
}

// GetUrl returns the Url field value
func (o *CreateAssetGITLABRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateAssetGITLABRequest) SetUrl(v string) {
	o.Url = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateAssetGITLABRequest) SetName(v string) {
	o.Name = &v
}

// GetHttpUrlToRepo returns the HttpUrlToRepo field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetHttpUrlToRepo() string {
	if o == nil || IsNil(o.HttpUrlToRepo) {
		var ret string
		return ret
	}
	return *o.HttpUrlToRepo
}

// GetHttpUrlToRepoOk returns a tuple with the HttpUrlToRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetHttpUrlToRepoOk() (*string, bool) {
	if o == nil || IsNil(o.HttpUrlToRepo) {
		return nil, false
	}
	return o.HttpUrlToRepo, true
}

// HasHttpUrlToRepo returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasHttpUrlToRepo() bool {
	if o != nil && !IsNil(o.HttpUrlToRepo) {
		return true
	}

	return false
}

// SetHttpUrlToRepo gets a reference to the given string and assigns it to the HttpUrlToRepo field.
func (o *CreateAssetGITLABRequest) SetHttpUrlToRepo(v string) {
	o.HttpUrlToRepo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateAssetGITLABRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *CreateAssetGITLABRequest) SetLocationId(v string) {
	o.LocationId = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *CreateAssetGITLABRequest) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetBlobBaseUrl returns the BlobBaseUrl field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetBlobBaseUrl() string {
	if o == nil || IsNil(o.BlobBaseUrl) {
		var ret string
		return ret
	}
	return *o.BlobBaseUrl
}

// GetBlobBaseUrlOk returns a tuple with the BlobBaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetBlobBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BlobBaseUrl) {
		return nil, false
	}
	return o.BlobBaseUrl, true
}

// HasBlobBaseUrl returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasBlobBaseUrl() bool {
	if o != nil && !IsNil(o.BlobBaseUrl) {
		return true
	}

	return false
}

// SetBlobBaseUrl gets a reference to the given string and assigns it to the BlobBaseUrl field.
func (o *CreateAssetGITLABRequest) SetBlobBaseUrl(v string) {
	o.BlobBaseUrl = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetGroupId() float32 {
	if o == nil || IsNil(o.GroupId) {
		var ret float32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetGroupIdOk() (*float32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given float32 and assigns it to the GroupId field.
func (o *CreateAssetGITLABRequest) SetGroupId(v float32) {
	o.GroupId = &v
}

// GetGroupFullPath returns the GroupFullPath field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetGroupFullPath() string {
	if o == nil || IsNil(o.GroupFullPath) {
		var ret string
		return ret
	}
	return *o.GroupFullPath
}

// GetGroupFullPathOk returns a tuple with the GroupFullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetGroupFullPathOk() (*string, bool) {
	if o == nil || IsNil(o.GroupFullPath) {
		return nil, false
	}
	return o.GroupFullPath, true
}

// HasGroupFullPath returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasGroupFullPath() bool {
	if o != nil && !IsNil(o.GroupFullPath) {
		return true
	}

	return false
}

// SetGroupFullPath gets a reference to the given string and assigns it to the GroupFullPath field.
func (o *CreateAssetGITLABRequest) SetGroupFullPath(v string) {
	o.GroupFullPath = &v
}

// GetGroupWebUrl returns the GroupWebUrl field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetGroupWebUrl() string {
	if o == nil || IsNil(o.GroupWebUrl) {
		var ret string
		return ret
	}
	return *o.GroupWebUrl
}

// GetGroupWebUrlOk returns a tuple with the GroupWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetGroupWebUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GroupWebUrl) {
		return nil, false
	}
	return o.GroupWebUrl, true
}

// HasGroupWebUrl returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasGroupWebUrl() bool {
	if o != nil && !IsNil(o.GroupWebUrl) {
		return true
	}

	return false
}

// SetGroupWebUrl gets a reference to the given string and assigns it to the GroupWebUrl field.
func (o *CreateAssetGITLABRequest) SetGroupWebUrl(v string) {
	o.GroupWebUrl = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetProjectId() float32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret float32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetProjectIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given float32 and assigns it to the ProjectId field.
func (o *CreateAssetGITLABRequest) SetProjectId(v float32) {
	o.ProjectId = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *CreateAssetGITLABRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetVisibility() ENUMPROPERTIESVISIBILITY {
	if o == nil || IsNil(o.Visibility) {
		var ret ENUMPROPERTIESVISIBILITY
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetVisibilityOk() (*ENUMPROPERTIESVISIBILITY, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given ENUMPROPERTIESVISIBILITY and assigns it to the Visibility field.
func (o *CreateAssetGITLABRequest) SetVisibility(v ENUMPROPERTIESVISIBILITY) {
	o.Visibility = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *CreateAssetGITLABRequest) GetGroup() CreateAssetGITLABRequestGroup {
	if o == nil || IsNil(o.Group) {
		var ret CreateAssetGITLABRequestGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABRequest) GetGroupOk() (*CreateAssetGITLABRequestGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *CreateAssetGITLABRequest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given CreateAssetGITLABRequestGroup and assigns it to the Group field.
func (o *CreateAssetGITLABRequest) SetGroup(v CreateAssetGITLABRequestGroup) {
	o.Group = &v
}

func (o CreateAssetGITLABRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetGITLABRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_class"] = o.AssetClass
	toSerialize["asset_type"] = o.AssetType
	toSerialize["url"] = o.Url
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.HttpUrlToRepo) {
		toSerialize["http_url_to_repo"] = o.HttpUrlToRepo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.DefaultBranch) {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if !IsNil(o.BlobBaseUrl) {
		toSerialize["blob_base_url"] = o.BlobBaseUrl
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.GroupFullPath) {
		toSerialize["group_full_path"] = o.GroupFullPath
	}
	if !IsNil(o.GroupWebUrl) {
		toSerialize["group_web_url"] = o.GroupWebUrl
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetGITLABRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_class",
		"asset_type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetGITLABRequest := _CreateAssetGITLABRequest{}

	err = json.Unmarshal(data, &varCreateAssetGITLABRequest)

	if err != nil {
		return err
	}

	*o = CreateAssetGITLABRequest(varCreateAssetGITLABRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_class")
		delete(additionalProperties, "asset_type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "http_url_to_repo")
		delete(additionalProperties, "description")
		delete(additionalProperties, "location_id")
		delete(additionalProperties, "default_branch")
		delete(additionalProperties, "blob_base_url")
		delete(additionalProperties, "group_id")
		delete(additionalProperties, "group_full_path")
		delete(additionalProperties, "group_web_url")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "archived")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "group")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetGITLABRequest struct {
	value *CreateAssetGITLABRequest
	isSet bool
}

func (v NullableCreateAssetGITLABRequest) Get() *CreateAssetGITLABRequest {
	return v.value
}

func (v *NullableCreateAssetGITLABRequest) Set(val *CreateAssetGITLABRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetGITLABRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetGITLABRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetGITLABRequest(val *CreateAssetGITLABRequest) *NullableCreateAssetGITLABRequest {
	return &NullableCreateAssetGITLABRequest{value: val, isSet: true}
}

func (v NullableCreateAssetGITLABRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetGITLABRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


