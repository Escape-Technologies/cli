/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESPERMISSIONSITEMS the model 'ENUMPROPERTIESPERMISSIONSITEMS'
type ENUMPROPERTIESPERMISSIONSITEMS string

// List of ENUM_PROPERTIES_PERMISSIONS_ITEMS
const (
	ENUMPROPERTIESPERMISSIONSITEMS_ADMIN ENUMPROPERTIESPERMISSIONSITEMS = "ADMIN"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_ASSETS ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_ASSETS"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_CUSTOM_RULES ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_CUSTOM_RULES"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_INTEGRATIONS ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_INTEGRATIONS"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_PROFILES ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_PROFILES"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_RESOURCES ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_RESOURCES"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_TAGS ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_TAGS"
	ENUMPROPERTIESPERMISSIONSITEMS_EDIT_WORKFLOWS ENUMPROPERTIESPERMISSIONSITEMS = "EDIT_WORKFLOWS"
	ENUMPROPERTIESPERMISSIONSITEMS_MANAGE_REPORTING ENUMPROPERTIESPERMISSIONSITEMS = "MANAGE_REPORTING"
	ENUMPROPERTIESPERMISSIONSITEMS_TAG_EDITION ENUMPROPERTIESPERMISSIONSITEMS = "TAG_EDITION"
	ENUMPROPERTIESPERMISSIONSITEMS_VIEW_REPORTING ENUMPROPERTIESPERMISSIONSITEMS = "VIEW_REPORTING"
)

// All allowed values of ENUMPROPERTIESPERMISSIONSITEMS enum
var AllowedENUMPROPERTIESPERMISSIONSITEMSEnumValues = []ENUMPROPERTIESPERMISSIONSITEMS{
	"ADMIN",
	"EDIT_ASSETS",
	"EDIT_CUSTOM_RULES",
	"EDIT_INTEGRATIONS",
	"EDIT_PROFILES",
	"EDIT_RESOURCES",
	"EDIT_TAGS",
	"EDIT_WORKFLOWS",
	"MANAGE_REPORTING",
	"TAG_EDITION",
	"VIEW_REPORTING",
}

func (v *ENUMPROPERTIESPERMISSIONSITEMS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESPERMISSIONSITEMS(value)
	for _, existing := range AllowedENUMPROPERTIESPERMISSIONSITEMSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESPERMISSIONSITEMS", value)
}

// NewENUMPROPERTIESPERMISSIONSITEMSFromValue returns a pointer to a valid ENUMPROPERTIESPERMISSIONSITEMS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESPERMISSIONSITEMSFromValue(v string) (*ENUMPROPERTIESPERMISSIONSITEMS, error) {
	ev := ENUMPROPERTIESPERMISSIONSITEMS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESPERMISSIONSITEMS: valid values are %v", v, AllowedENUMPROPERTIESPERMISSIONSITEMSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESPERMISSIONSITEMS) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESPERMISSIONSITEMSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_PERMISSIONS_ITEMS value
func (v ENUMPROPERTIESPERMISSIONSITEMS) Ptr() *ENUMPROPERTIESPERMISSIONSITEMS {
	return &v
}

type NullableENUMPROPERTIESPERMISSIONSITEMS struct {
	value *ENUMPROPERTIESPERMISSIONSITEMS
	isSet bool
}

func (v NullableENUMPROPERTIESPERMISSIONSITEMS) Get() *ENUMPROPERTIESPERMISSIONSITEMS {
	return v.value
}

func (v *NullableENUMPROPERTIESPERMISSIONSITEMS) Set(val *ENUMPROPERTIESPERMISSIONSITEMS) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESPERMISSIONSITEMS) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESPERMISSIONSITEMS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESPERMISSIONSITEMS(val *ENUMPROPERTIESPERMISSIONSITEMS) *NullableENUMPROPERTIESPERMISSIONSITEMS {
	return &NullableENUMPROPERTIESPERMISSIONSITEMS{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESPERMISSIONSITEMS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESPERMISSIONSITEMS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

