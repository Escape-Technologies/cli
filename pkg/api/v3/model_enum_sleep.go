/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMSLEEP the model 'ENUMSLEEP'
type ENUMSLEEP string

// List of ENUM_SLEEP
const (
	ENUMSLEEP_SLEEP ENUMSLEEP = "sleep"
)

// All allowed values of ENUMSLEEP enum
var AllowedENUMSLEEPEnumValues = []ENUMSLEEP{
	"sleep",
}

func (v *ENUMSLEEP) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMSLEEP(value)
	for _, existing := range AllowedENUMSLEEPEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMSLEEP", value)
}

// NewENUMSLEEPFromValue returns a pointer to a valid ENUMSLEEP
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMSLEEPFromValue(v string) (*ENUMSLEEP, error) {
	ev := ENUMSLEEP(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMSLEEP: valid values are %v", v, AllowedENUMSLEEPEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMSLEEP) IsValid() bool {
	for _, existing := range AllowedENUMSLEEPEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_SLEEP value
func (v ENUMSLEEP) Ptr() *ENUMSLEEP {
	return &v
}

type NullableENUMSLEEP struct {
	value *ENUMSLEEP
	isSet bool
}

func (v NullableENUMSLEEP) Get() *ENUMSLEEP {
	return v.value
}

func (v *NullableENUMSLEEP) Set(val *ENUMSLEEP) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMSLEEP) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMSLEEP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMSLEEP(val *ENUMSLEEP) *NullableENUMSLEEP {
	return &NullableENUMSLEEP{value: val, isSet: true}
}

func (v NullableENUMSLEEP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMSLEEP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

