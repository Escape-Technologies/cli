/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMOPENAPI the model 'ENUMOPENAPI'
type ENUMOPENAPI string

// List of ENUM_OPENAPI
const (
	ENUMOPENAPI_OPENAPI ENUMOPENAPI = "OPENAPI"
)

// All allowed values of ENUMOPENAPI enum
var AllowedENUMOPENAPIEnumValues = []ENUMOPENAPI{
	"OPENAPI",
}

func (v *ENUMOPENAPI) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMOPENAPI(value)
	for _, existing := range AllowedENUMOPENAPIEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMOPENAPI", value)
}

// NewENUMOPENAPIFromValue returns a pointer to a valid ENUMOPENAPI
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMOPENAPIFromValue(v string) (*ENUMOPENAPI, error) {
	ev := ENUMOPENAPI(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMOPENAPI: valid values are %v", v, AllowedENUMOPENAPIEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMOPENAPI) IsValid() bool {
	for _, existing := range AllowedENUMOPENAPIEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_OPENAPI value
func (v ENUMOPENAPI) Ptr() *ENUMOPENAPI {
	return &v
}

type NullableENUMOPENAPI struct {
	value *ENUMOPENAPI
	isSet bool
}

func (v NullableENUMOPENAPI) Get() *ENUMOPENAPI {
	return v.value
}

func (v *NullableENUMOPENAPI) Set(val *ENUMOPENAPI) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMOPENAPI) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMOPENAPI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMOPENAPI(val *ENUMOPENAPI) *NullableENUMOPENAPI {
	return &NullableENUMOPENAPI{value: val, isSet: true}
}

func (v NullableENUMOPENAPI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMOPENAPI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

