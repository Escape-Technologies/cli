/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS the model 'ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS'
type ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS string

// List of ENUM_PROPERTIES_OPEN_PORTS_ITEMS_PROPERTIES_PROTOCOLS_ITEMS
const (
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_HTTP ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "HTTP"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_HTTP2 ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "HTTP2"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_HTTPS ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "HTTPS"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_MSSQL ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "MSSQL"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_MYSQL ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "MYSQL"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_PSQL ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "PSQL"
	ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS_SSH ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS = "SSH"
)

// All allowed values of ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS enum
var AllowedENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSEnumValues = []ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS{
	"HTTP",
	"HTTP2",
	"HTTPS",
	"MSSQL",
	"MYSQL",
	"PSQL",
	"SSH",
}

func (v *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS(value)
	for _, existing := range AllowedENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS", value)
}

// NewENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSFromValue returns a pointer to a valid ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSFromValue(v string) (*ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS, error) {
	ev := ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS: valid values are %v", v, AllowedENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_OPEN_PORTS_ITEMS_PROPERTIES_PROTOCOLS_ITEMS value
func (v ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) Ptr() *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS {
	return &v
}

type NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS struct {
	value *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS
	isSet bool
}

func (v NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) Get() *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS {
	return v.value
}

func (v *NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) Set(val *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS(val *ENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) *NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS {
	return &NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESOPENPORTSITEMSPROPERTIESPROTOCOLSITEMS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

