/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the AuditLogSummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogSummarized{}

// AuditLogSummarized Summarized information about an audit log
type AuditLogSummarized struct {
	// The id of the audit log
	Id string `json:"id"`
	// The action of the audit log
	Action string `json:"action"`
	// The actor of the audit log
	Actor string `json:"actor"`
	// The date of the audit log
	Date string `json:"date"`
	// The target of the audit log
	Target string `json:"target"`
	// The title of the audit log
	Title string `json:"title"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogSummarized AuditLogSummarized

// NewAuditLogSummarized instantiates a new AuditLogSummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogSummarized(id string, action string, actor string, date string, target string, title string) *AuditLogSummarized {
	this := AuditLogSummarized{}
	this.Id = id
	this.Action = action
	this.Actor = actor
	this.Date = date
	this.Target = target
	this.Title = title
	return &this
}

// NewAuditLogSummarizedWithDefaults instantiates a new AuditLogSummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogSummarizedWithDefaults() *AuditLogSummarized {
	this := AuditLogSummarized{}
	return &this
}

// GetId returns the Id field value
func (o *AuditLogSummarized) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuditLogSummarized) SetId(v string) {
	o.Id = v
}

// GetAction returns the Action field value
func (o *AuditLogSummarized) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AuditLogSummarized) SetAction(v string) {
	o.Action = v
}

// GetActor returns the Actor field value
func (o *AuditLogSummarized) GetActor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetActorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *AuditLogSummarized) SetActor(v string) {
	o.Actor = v
}

// GetDate returns the Date field value
func (o *AuditLogSummarized) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AuditLogSummarized) SetDate(v string) {
	o.Date = v
}

// GetTarget returns the Target field value
func (o *AuditLogSummarized) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *AuditLogSummarized) SetTarget(v string) {
	o.Target = v
}

// GetTitle returns the Title field value
func (o *AuditLogSummarized) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *AuditLogSummarized) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *AuditLogSummarized) SetTitle(v string) {
	o.Title = v
}

func (o AuditLogSummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogSummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["action"] = o.Action
	toSerialize["actor"] = o.Actor
	toSerialize["date"] = o.Date
	toSerialize["target"] = o.Target
	toSerialize["title"] = o.Title

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogSummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"action",
		"actor",
		"date",
		"target",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogSummarized := _AuditLogSummarized{}

	err = json.Unmarshal(data, &varAuditLogSummarized)

	if err != nil {
		return err
	}

	*o = AuditLogSummarized(varAuditLogSummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "action")
		delete(additionalProperties, "actor")
		delete(additionalProperties, "date")
		delete(additionalProperties, "target")
		delete(additionalProperties, "title")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogSummarized struct {
	value *AuditLogSummarized
	isSet bool
}

func (v NullableAuditLogSummarized) Get() *AuditLogSummarized {
	return v.value
}

func (v *NullableAuditLogSummarized) Set(val *AuditLogSummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogSummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogSummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogSummarized(val *AuditLogSummarized) *NullableAuditLogSummarized {
	return &NullableAuditLogSummarized{value: val, isSet: true}
}

func (v NullableAuditLogSummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogSummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


