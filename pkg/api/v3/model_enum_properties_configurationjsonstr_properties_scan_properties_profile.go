/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE the model 'ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE'
type ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE string

// List of ENUM_PROPERTIES_CONFIGURATIONJSONSTR_PROPERTIES_SCAN_PROPERTIES_PROFILE
const (
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_SURFACE ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "surface"
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_MARKETING ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "marketing"
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_CICD ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "cicd"
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_DEFAULT ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "default"
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_DEEP ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "deep"
	ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE_UNRESTRICTED ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE = "unrestricted"
)

// All allowed values of ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE enum
var AllowedENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEEnumValues = []ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE{
	"surface",
	"marketing",
	"cicd",
	"default",
	"deep",
	"unrestricted",
}

func (v *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE(value)
	for _, existing := range AllowedENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE", value)
}

// NewENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEFromValue returns a pointer to a valid ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEFromValue(v string) (*ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE, error) {
	ev := ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE: valid values are %v", v, AllowedENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILEEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_CONFIGURATIONJSONSTR_PROPERTIES_SCAN_PROPERTIES_PROFILE value
func (v ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) Ptr() *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE {
	return &v
}

type NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE struct {
	value *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE
	isSet bool
}

func (v NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) Get() *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE {
	return v.value
}

func (v *NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) Set(val *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE(val *ENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) *NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE {
	return &NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESCONFIGURATIONJSONSTRPROPERTIESSCANPROPERTIESPROFILE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

