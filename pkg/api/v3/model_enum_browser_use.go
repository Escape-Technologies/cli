/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMBROWSERUSE the model 'ENUMBROWSERUSE'
type ENUMBROWSERUSE string

// List of ENUM_BROWSER_USE
const (
	ENUMBROWSERUSE_BROWSER_USE ENUMBROWSERUSE = "browser_use"
)

// All allowed values of ENUMBROWSERUSE enum
var AllowedENUMBROWSERUSEEnumValues = []ENUMBROWSERUSE{
	"browser_use",
}

func (v *ENUMBROWSERUSE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMBROWSERUSE(value)
	for _, existing := range AllowedENUMBROWSERUSEEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMBROWSERUSE", value)
}

// NewENUMBROWSERUSEFromValue returns a pointer to a valid ENUMBROWSERUSE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMBROWSERUSEFromValue(v string) (*ENUMBROWSERUSE, error) {
	ev := ENUMBROWSERUSE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMBROWSERUSE: valid values are %v", v, AllowedENUMBROWSERUSEEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMBROWSERUSE) IsValid() bool {
	for _, existing := range AllowedENUMBROWSERUSEEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_BROWSER_USE value
func (v ENUMBROWSERUSE) Ptr() *ENUMBROWSERUSE {
	return &v
}

type NullableENUMBROWSERUSE struct {
	value *ENUMBROWSERUSE
	isSet bool
}

func (v NullableENUMBROWSERUSE) Get() *ENUMBROWSERUSE {
	return v.value
}

func (v *NullableENUMBROWSERUSE) Set(val *ENUMBROWSERUSE) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMBROWSERUSE) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMBROWSERUSE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMBROWSERUSE(val *ENUMBROWSERUSE) *NullableENUMBROWSERUSE {
	return &NullableENUMBROWSERUSE{value: val, isSet: true}
}

func (v NullableENUMBROWSERUSE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMBROWSERUSE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

