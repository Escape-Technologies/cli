/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the SnippetDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnippetDetailed{}

// SnippetDetailed Detailed information about a snippet
type SnippetDetailed struct {
	// The date and time the snippet was created
	CreatedAt string `json:"createdAt"`
	// The id of the snippet
	Id string `json:"id"`
	// The language of the snippet
	Language string `json:"language"`
	// The name of the snippet
	Name string `json:"name"`
	// The snippet of the snippet
	Snippet string `json:"snippet"`
	// The url of the snippet
	Url string `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _SnippetDetailed SnippetDetailed

// NewSnippetDetailed instantiates a new SnippetDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnippetDetailed(createdAt string, id string, language string, name string, snippet string, url string) *SnippetDetailed {
	this := SnippetDetailed{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Language = language
	this.Name = name
	this.Snippet = snippet
	this.Url = url
	return &this
}

// NewSnippetDetailedWithDefaults instantiates a new SnippetDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnippetDetailedWithDefaults() *SnippetDetailed {
	this := SnippetDetailed{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *SnippetDetailed) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SnippetDetailed) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *SnippetDetailed) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SnippetDetailed) SetId(v string) {
	o.Id = v
}

// GetLanguage returns the Language field value
func (o *SnippetDetailed) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *SnippetDetailed) SetLanguage(v string) {
	o.Language = v
}

// GetName returns the Name field value
func (o *SnippetDetailed) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SnippetDetailed) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value
func (o *SnippetDetailed) GetSnippet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetSnippetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snippet, true
}

// SetSnippet sets field value
func (o *SnippetDetailed) SetSnippet(v string) {
	o.Snippet = v
}

// GetUrl returns the Url field value
func (o *SnippetDetailed) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SnippetDetailed) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SnippetDetailed) SetUrl(v string) {
	o.Url = v
}

func (o SnippetDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnippetDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["language"] = o.Language
	toSerialize["name"] = o.Name
	toSerialize["snippet"] = o.Snippet
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnippetDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"language",
		"name",
		"snippet",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnippetDetailed := _SnippetDetailed{}

	err = json.Unmarshal(data, &varSnippetDetailed)

	if err != nil {
		return err
	}

	*o = SnippetDetailed(varSnippetDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "id")
		delete(additionalProperties, "language")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnippetDetailed struct {
	value *SnippetDetailed
	isSet bool
}

func (v NullableSnippetDetailed) Get() *SnippetDetailed {
	return v.value
}

func (v *NullableSnippetDetailed) Set(val *SnippetDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableSnippetDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableSnippetDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnippetDetailed(val *SnippetDetailed) *NullableSnippetDetailed {
	return &NullableSnippetDetailed{value: val, isSet: true}
}

func (v NullableSnippetDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnippetDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


