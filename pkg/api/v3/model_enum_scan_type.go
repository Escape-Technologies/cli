/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumSCANTYPE the model 'EnumSCANTYPE'
type EnumSCANTYPE string

// List of Enum_SCAN_TYPE
const (
	ENUMSCANTYPE_SCAN_TYPE EnumSCANTYPE = "scan.type"
)

// All allowed values of EnumSCANTYPE enum
var AllowedEnumSCANTYPEEnumValues = []EnumSCANTYPE{
	"scan.type",
}

func (v *EnumSCANTYPE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSCANTYPE(value)
	for _, existing := range AllowedEnumSCANTYPEEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumSCANTYPE", value)
}

// NewEnumSCANTYPEFromValue returns a pointer to a valid EnumSCANTYPE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSCANTYPEFromValue(v string) (*EnumSCANTYPE, error) {
	ev := EnumSCANTYPE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSCANTYPE: valid values are %v", v, AllowedEnumSCANTYPEEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSCANTYPE) IsValid() bool {
	for _, existing := range AllowedEnumSCANTYPEEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_SCAN_TYPE value
func (v EnumSCANTYPE) Ptr() *EnumSCANTYPE {
	return &v
}

type NullableEnumSCANTYPE struct {
	value *EnumSCANTYPE
	isSet bool
}

func (v NullableEnumSCANTYPE) Get() *EnumSCANTYPE {
	return v.value
}

func (v *NullableEnumSCANTYPE) Set(val *EnumSCANTYPE) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSCANTYPE) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSCANTYPE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSCANTYPE(val *EnumSCANTYPE) *NullableEnumSCANTYPE {
	return &NullableEnumSCANTYPE{value: val, isSet: true}
}

func (v NullableEnumSCANTYPE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSCANTYPE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

