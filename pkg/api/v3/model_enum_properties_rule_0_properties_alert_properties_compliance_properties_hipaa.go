/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA the model 'ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA'
type ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA string

// List of ENUM_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_HIPAA
const (
	ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA_STANDARD_1 ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA = "Standard-1"
	ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA_STANDARD_2 ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA = "Standard-2"
	ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA_STANDARD_3 ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA = "Standard-3"
	ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA_STANDARD_4 ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA = "Standard-4"
	ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA_STANDARD_5 ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA = "Standard-5"
)

// All allowed values of ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA enum
var AllowedENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAEnumValues = []ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA{
	"Standard-1",
	"Standard-2",
	"Standard-3",
	"Standard-4",
	"Standard-5",
}

func (v *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA(value)
	for _, existing := range AllowedENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA", value)
}

// NewENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAFromValue returns a pointer to a valid ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAFromValue(v string) (*ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA, error) {
	ev := ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA: valid values are %v", v, AllowedENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAAEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_HIPAA value
func (v ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) Ptr() *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA {
	return &v
}

type NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA struct {
	value *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA
	isSet bool
}

func (v NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) Get() *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA {
	return v.value
}

func (v *NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) Set(val *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA(val *ENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) *NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA {
	return &NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHIPAA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

