/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum08b09d97ca82baf197de83a269dac339 the model 'Enum08b09d97ca82baf197de83a269dac339'
type Enum08b09d97ca82baf197de83a269dac339 string

// List of Enum_08b09d97ca82baf197de83a269dac339
const (
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC1 Enum08b09d97ca82baf197de83a269dac339 = "CC1"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC2 Enum08b09d97ca82baf197de83a269dac339 = "CC2"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC4 Enum08b09d97ca82baf197de83a269dac339 = "CC4"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC5 Enum08b09d97ca82baf197de83a269dac339 = "CC5"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC6 Enum08b09d97ca82baf197de83a269dac339 = "CC6"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC7 Enum08b09d97ca82baf197de83a269dac339 = "CC7"
	ENUM08B09D97CA82BAF197DE83A269DAC339_CC9 Enum08b09d97ca82baf197de83a269dac339 = "CC9"
)

// All allowed values of Enum08b09d97ca82baf197de83a269dac339 enum
var AllowedEnum08b09d97ca82baf197de83a269dac339EnumValues = []Enum08b09d97ca82baf197de83a269dac339{
	"CC1",
	"CC2",
	"CC4",
	"CC5",
	"CC6",
	"CC7",
	"CC9",
}

func (v *Enum08b09d97ca82baf197de83a269dac339) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum08b09d97ca82baf197de83a269dac339(value)
	for _, existing := range AllowedEnum08b09d97ca82baf197de83a269dac339EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum08b09d97ca82baf197de83a269dac339", value)
}

// NewEnum08b09d97ca82baf197de83a269dac339FromValue returns a pointer to a valid Enum08b09d97ca82baf197de83a269dac339
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum08b09d97ca82baf197de83a269dac339FromValue(v string) (*Enum08b09d97ca82baf197de83a269dac339, error) {
	ev := Enum08b09d97ca82baf197de83a269dac339(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum08b09d97ca82baf197de83a269dac339: valid values are %v", v, AllowedEnum08b09d97ca82baf197de83a269dac339EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum08b09d97ca82baf197de83a269dac339) IsValid() bool {
	for _, existing := range AllowedEnum08b09d97ca82baf197de83a269dac339EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_08b09d97ca82baf197de83a269dac339 value
func (v Enum08b09d97ca82baf197de83a269dac339) Ptr() *Enum08b09d97ca82baf197de83a269dac339 {
	return &v
}

type NullableEnum08b09d97ca82baf197de83a269dac339 struct {
	value *Enum08b09d97ca82baf197de83a269dac339
	isSet bool
}

func (v NullableEnum08b09d97ca82baf197de83a269dac339) Get() *Enum08b09d97ca82baf197de83a269dac339 {
	return v.value
}

func (v *NullableEnum08b09d97ca82baf197de83a269dac339) Set(val *Enum08b09d97ca82baf197de83a269dac339) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum08b09d97ca82baf197de83a269dac339) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum08b09d97ca82baf197de83a269dac339) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum08b09d97ca82baf197de83a269dac339(val *Enum08b09d97ca82baf197de83a269dac339) *NullableEnum08b09d97ca82baf197de83a269dac339 {
	return &NullableEnum08b09d97ca82baf197de83a269dac339{value: val, isSet: true}
}

func (v NullableEnum08b09d97ca82baf197de83a269dac339) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum08b09d97ca82baf197de83a269dac339) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

