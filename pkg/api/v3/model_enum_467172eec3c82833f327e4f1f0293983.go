/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum467172eec3c82833f327e4f1f0293983 the model 'Enum467172eec3c82833f327e4f1f0293983'
type Enum467172eec3c82833f327e4f1f0293983 string

// List of Enum_467172eec3c82833f327e4f1f0293983
const (
	ENUM467172EEC3C82833F327E4F1F0293983_GRAPHQL Enum467172eec3c82833f327e4f1f0293983 = "GRAPHQL"
	ENUM467172EEC3C82833F327E4F1F0293983_GRPC Enum467172eec3c82833f327e4f1f0293983 = "GRPC"
	ENUM467172EEC3C82833F327E4F1F0293983_REST Enum467172eec3c82833f327e4f1f0293983 = "REST"
)

// All allowed values of Enum467172eec3c82833f327e4f1f0293983 enum
var AllowedEnum467172eec3c82833f327e4f1f0293983EnumValues = []Enum467172eec3c82833f327e4f1f0293983{
	"GRAPHQL",
	"GRPC",
	"REST",
}

func (v *Enum467172eec3c82833f327e4f1f0293983) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum467172eec3c82833f327e4f1f0293983(value)
	for _, existing := range AllowedEnum467172eec3c82833f327e4f1f0293983EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum467172eec3c82833f327e4f1f0293983", value)
}

// NewEnum467172eec3c82833f327e4f1f0293983FromValue returns a pointer to a valid Enum467172eec3c82833f327e4f1f0293983
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum467172eec3c82833f327e4f1f0293983FromValue(v string) (*Enum467172eec3c82833f327e4f1f0293983, error) {
	ev := Enum467172eec3c82833f327e4f1f0293983(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum467172eec3c82833f327e4f1f0293983: valid values are %v", v, AllowedEnum467172eec3c82833f327e4f1f0293983EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum467172eec3c82833f327e4f1f0293983) IsValid() bool {
	for _, existing := range AllowedEnum467172eec3c82833f327e4f1f0293983EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_467172eec3c82833f327e4f1f0293983 value
func (v Enum467172eec3c82833f327e4f1f0293983) Ptr() *Enum467172eec3c82833f327e4f1f0293983 {
	return &v
}

type NullableEnum467172eec3c82833f327e4f1f0293983 struct {
	value *Enum467172eec3c82833f327e4f1f0293983
	isSet bool
}

func (v NullableEnum467172eec3c82833f327e4f1f0293983) Get() *Enum467172eec3c82833f327e4f1f0293983 {
	return v.value
}

func (v *NullableEnum467172eec3c82833f327e4f1f0293983) Set(val *Enum467172eec3c82833f327e4f1f0293983) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum467172eec3c82833f327e4f1f0293983) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum467172eec3c82833f327e4f1f0293983) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum467172eec3c82833f327e4f1f0293983(val *Enum467172eec3c82833f327e4f1f0293983) *NullableEnum467172eec3c82833f327e4f1f0293983 {
	return &NullableEnum467172eec3c82833f327e4f1f0293983{value: val, isSet: true}
}

func (v NullableEnum467172eec3c82833f327e4f1f0293983) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum467172eec3c82833f327e4f1f0293983) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

