/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationFrontendDast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationFrontendDast{}

// ProfileDetailedConfigurationFrontendDast struct for ProfileDetailedConfigurationFrontendDast
type ProfileDetailedConfigurationFrontendDast struct {
	LocationId *string `json:"location_id,omitempty"`
	Mode *ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE `json:"mode,omitempty"`
	MaxDuration *float32 `json:"max_duration,omitempty"`
	Hotstart []string `json:"hotstart,omitempty"`
	BlocklistPatterns []string `json:"blocklist_patterns,omitempty"`
	SkippedApiChecksUrlPatterns []ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner `json:"skipped_api_checks_url_patterns,omitempty"`
	RelaxCorsSecurity *bool `json:"relax_cors_security,omitempty"`
	SinglePageWorker *bool `json:"single_page_worker,omitempty"`
	ParallelWorkers *float32 `json:"parallel_workers,omitempty"`
	UserAgent *string `json:"user_agent,omitempty"`
	UsePersistence *bool `json:"use_persistence,omitempty"`
	EscapeUserHeader *bool `json:"escape_user_header,omitempty"`
	PrefetchSitemap *bool `json:"prefetch_sitemap,omitempty"`
	BlocklistedElementSelectors []string `json:"blocklisted_element_selectors,omitempty"`
	WhitelistElementSelectors []string `json:"whitelist_element_selectors,omitempty"`
	MaxQueryParamsVisits *float32 `json:"max_query_params_visits,omitempty"`
	MaxFragmentsVisits *float32 `json:"max_fragments_visits,omitempty"`
	MaxParameterOccurence *float32 `json:"max_parameter_occurence,omitempty"`
	SecurityChecksEnabled []ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS `json:"security_checks_enabled,omitempty"`
	ApiChecksDuringAuth *bool `json:"api_checks_during_auth,omitempty"`
	AllowedUrlPatterns []string `json:"allowed_url_patterns,omitempty"`
	LogoutDetection *ProfileDetailedConfigurationFrontendDastLogoutDetection `json:"logout_detection,omitempty"`
	FrontendAgenticPentesting *bool `json:"frontend_agentic_pentesting,omitempty"`
	UseLegacyCrawling *bool `json:"use_legacy_crawling,omitempty"`
	StaticCrawling *ProfileDetailedConfigurationFrontendDastStaticCrawling `json:"static_crawling,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationFrontendDast ProfileDetailedConfigurationFrontendDast

// NewProfileDetailedConfigurationFrontendDast instantiates a new ProfileDetailedConfigurationFrontendDast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationFrontendDast() *ProfileDetailedConfigurationFrontendDast {
	this := ProfileDetailedConfigurationFrontendDast{}
	return &this
}

// NewProfileDetailedConfigurationFrontendDastWithDefaults instantiates a new ProfileDetailedConfigurationFrontendDast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationFrontendDastWithDefaults() *ProfileDetailedConfigurationFrontendDast {
	this := ProfileDetailedConfigurationFrontendDast{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *ProfileDetailedConfigurationFrontendDast) SetLocationId(v string) {
	o.LocationId = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetMode() ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE {
	if o == nil || IsNil(o.Mode) {
		var ret ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetModeOk() (*ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE and assigns it to the Mode field.
func (o *ProfileDetailedConfigurationFrontendDast) SetMode(v ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESMODE) {
	o.Mode = &v
}

// GetMaxDuration returns the MaxDuration field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxDuration() float32 {
	if o == nil || IsNil(o.MaxDuration) {
		var ret float32
		return ret
	}
	return *o.MaxDuration
}

// GetMaxDurationOk returns a tuple with the MaxDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxDurationOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxDuration) {
		return nil, false
	}
	return o.MaxDuration, true
}

// HasMaxDuration returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasMaxDuration() bool {
	if o != nil && !IsNil(o.MaxDuration) {
		return true
	}

	return false
}

// SetMaxDuration gets a reference to the given float32 and assigns it to the MaxDuration field.
func (o *ProfileDetailedConfigurationFrontendDast) SetMaxDuration(v float32) {
	o.MaxDuration = &v
}

// GetHotstart returns the Hotstart field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetHotstart() []string {
	if o == nil || IsNil(o.Hotstart) {
		var ret []string
		return ret
	}
	return o.Hotstart
}

// GetHotstartOk returns a tuple with the Hotstart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetHotstartOk() ([]string, bool) {
	if o == nil || IsNil(o.Hotstart) {
		return nil, false
	}
	return o.Hotstart, true
}

// HasHotstart returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasHotstart() bool {
	if o != nil && !IsNil(o.Hotstart) {
		return true
	}

	return false
}

// SetHotstart gets a reference to the given []string and assigns it to the Hotstart field.
func (o *ProfileDetailedConfigurationFrontendDast) SetHotstart(v []string) {
	o.Hotstart = v
}

// GetBlocklistPatterns returns the BlocklistPatterns field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetBlocklistPatterns() []string {
	if o == nil || IsNil(o.BlocklistPatterns) {
		var ret []string
		return ret
	}
	return o.BlocklistPatterns
}

// GetBlocklistPatternsOk returns a tuple with the BlocklistPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetBlocklistPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlocklistPatterns) {
		return nil, false
	}
	return o.BlocklistPatterns, true
}

// HasBlocklistPatterns returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasBlocklistPatterns() bool {
	if o != nil && !IsNil(o.BlocklistPatterns) {
		return true
	}

	return false
}

// SetBlocklistPatterns gets a reference to the given []string and assigns it to the BlocklistPatterns field.
func (o *ProfileDetailedConfigurationFrontendDast) SetBlocklistPatterns(v []string) {
	o.BlocklistPatterns = v
}

// GetSkippedApiChecksUrlPatterns returns the SkippedApiChecksUrlPatterns field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetSkippedApiChecksUrlPatterns() []ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner {
	if o == nil || IsNil(o.SkippedApiChecksUrlPatterns) {
		var ret []ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner
		return ret
	}
	return o.SkippedApiChecksUrlPatterns
}

// GetSkippedApiChecksUrlPatternsOk returns a tuple with the SkippedApiChecksUrlPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetSkippedApiChecksUrlPatternsOk() ([]ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner, bool) {
	if o == nil || IsNil(o.SkippedApiChecksUrlPatterns) {
		return nil, false
	}
	return o.SkippedApiChecksUrlPatterns, true
}

// HasSkippedApiChecksUrlPatterns returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasSkippedApiChecksUrlPatterns() bool {
	if o != nil && !IsNil(o.SkippedApiChecksUrlPatterns) {
		return true
	}

	return false
}

// SetSkippedApiChecksUrlPatterns gets a reference to the given []ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner and assigns it to the SkippedApiChecksUrlPatterns field.
func (o *ProfileDetailedConfigurationFrontendDast) SetSkippedApiChecksUrlPatterns(v []ProfileDetailedConfigurationFrontendDastSkippedApiChecksUrlPatternsInner) {
	o.SkippedApiChecksUrlPatterns = v
}

// GetRelaxCorsSecurity returns the RelaxCorsSecurity field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetRelaxCorsSecurity() bool {
	if o == nil || IsNil(o.RelaxCorsSecurity) {
		var ret bool
		return ret
	}
	return *o.RelaxCorsSecurity
}

// GetRelaxCorsSecurityOk returns a tuple with the RelaxCorsSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetRelaxCorsSecurityOk() (*bool, bool) {
	if o == nil || IsNil(o.RelaxCorsSecurity) {
		return nil, false
	}
	return o.RelaxCorsSecurity, true
}

// HasRelaxCorsSecurity returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasRelaxCorsSecurity() bool {
	if o != nil && !IsNil(o.RelaxCorsSecurity) {
		return true
	}

	return false
}

// SetRelaxCorsSecurity gets a reference to the given bool and assigns it to the RelaxCorsSecurity field.
func (o *ProfileDetailedConfigurationFrontendDast) SetRelaxCorsSecurity(v bool) {
	o.RelaxCorsSecurity = &v
}

// GetSinglePageWorker returns the SinglePageWorker field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetSinglePageWorker() bool {
	if o == nil || IsNil(o.SinglePageWorker) {
		var ret bool
		return ret
	}
	return *o.SinglePageWorker
}

// GetSinglePageWorkerOk returns a tuple with the SinglePageWorker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetSinglePageWorkerOk() (*bool, bool) {
	if o == nil || IsNil(o.SinglePageWorker) {
		return nil, false
	}
	return o.SinglePageWorker, true
}

// HasSinglePageWorker returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasSinglePageWorker() bool {
	if o != nil && !IsNil(o.SinglePageWorker) {
		return true
	}

	return false
}

// SetSinglePageWorker gets a reference to the given bool and assigns it to the SinglePageWorker field.
func (o *ProfileDetailedConfigurationFrontendDast) SetSinglePageWorker(v bool) {
	o.SinglePageWorker = &v
}

// GetParallelWorkers returns the ParallelWorkers field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetParallelWorkers() float32 {
	if o == nil || IsNil(o.ParallelWorkers) {
		var ret float32
		return ret
	}
	return *o.ParallelWorkers
}

// GetParallelWorkersOk returns a tuple with the ParallelWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetParallelWorkersOk() (*float32, bool) {
	if o == nil || IsNil(o.ParallelWorkers) {
		return nil, false
	}
	return o.ParallelWorkers, true
}

// HasParallelWorkers returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasParallelWorkers() bool {
	if o != nil && !IsNil(o.ParallelWorkers) {
		return true
	}

	return false
}

// SetParallelWorkers gets a reference to the given float32 and assigns it to the ParallelWorkers field.
func (o *ProfileDetailedConfigurationFrontendDast) SetParallelWorkers(v float32) {
	o.ParallelWorkers = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *ProfileDetailedConfigurationFrontendDast) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetUsePersistence returns the UsePersistence field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetUsePersistence() bool {
	if o == nil || IsNil(o.UsePersistence) {
		var ret bool
		return ret
	}
	return *o.UsePersistence
}

// GetUsePersistenceOk returns a tuple with the UsePersistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetUsePersistenceOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePersistence) {
		return nil, false
	}
	return o.UsePersistence, true
}

// HasUsePersistence returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasUsePersistence() bool {
	if o != nil && !IsNil(o.UsePersistence) {
		return true
	}

	return false
}

// SetUsePersistence gets a reference to the given bool and assigns it to the UsePersistence field.
func (o *ProfileDetailedConfigurationFrontendDast) SetUsePersistence(v bool) {
	o.UsePersistence = &v
}

// GetEscapeUserHeader returns the EscapeUserHeader field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetEscapeUserHeader() bool {
	if o == nil || IsNil(o.EscapeUserHeader) {
		var ret bool
		return ret
	}
	return *o.EscapeUserHeader
}

// GetEscapeUserHeaderOk returns a tuple with the EscapeUserHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetEscapeUserHeaderOk() (*bool, bool) {
	if o == nil || IsNil(o.EscapeUserHeader) {
		return nil, false
	}
	return o.EscapeUserHeader, true
}

// HasEscapeUserHeader returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasEscapeUserHeader() bool {
	if o != nil && !IsNil(o.EscapeUserHeader) {
		return true
	}

	return false
}

// SetEscapeUserHeader gets a reference to the given bool and assigns it to the EscapeUserHeader field.
func (o *ProfileDetailedConfigurationFrontendDast) SetEscapeUserHeader(v bool) {
	o.EscapeUserHeader = &v
}

// GetPrefetchSitemap returns the PrefetchSitemap field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetPrefetchSitemap() bool {
	if o == nil || IsNil(o.PrefetchSitemap) {
		var ret bool
		return ret
	}
	return *o.PrefetchSitemap
}

// GetPrefetchSitemapOk returns a tuple with the PrefetchSitemap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetPrefetchSitemapOk() (*bool, bool) {
	if o == nil || IsNil(o.PrefetchSitemap) {
		return nil, false
	}
	return o.PrefetchSitemap, true
}

// HasPrefetchSitemap returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasPrefetchSitemap() bool {
	if o != nil && !IsNil(o.PrefetchSitemap) {
		return true
	}

	return false
}

// SetPrefetchSitemap gets a reference to the given bool and assigns it to the PrefetchSitemap field.
func (o *ProfileDetailedConfigurationFrontendDast) SetPrefetchSitemap(v bool) {
	o.PrefetchSitemap = &v
}

// GetBlocklistedElementSelectors returns the BlocklistedElementSelectors field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetBlocklistedElementSelectors() []string {
	if o == nil || IsNil(o.BlocklistedElementSelectors) {
		var ret []string
		return ret
	}
	return o.BlocklistedElementSelectors
}

// GetBlocklistedElementSelectorsOk returns a tuple with the BlocklistedElementSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetBlocklistedElementSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlocklistedElementSelectors) {
		return nil, false
	}
	return o.BlocklistedElementSelectors, true
}

// HasBlocklistedElementSelectors returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasBlocklistedElementSelectors() bool {
	if o != nil && !IsNil(o.BlocklistedElementSelectors) {
		return true
	}

	return false
}

// SetBlocklistedElementSelectors gets a reference to the given []string and assigns it to the BlocklistedElementSelectors field.
func (o *ProfileDetailedConfigurationFrontendDast) SetBlocklistedElementSelectors(v []string) {
	o.BlocklistedElementSelectors = v
}

// GetWhitelistElementSelectors returns the WhitelistElementSelectors field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetWhitelistElementSelectors() []string {
	if o == nil || IsNil(o.WhitelistElementSelectors) {
		var ret []string
		return ret
	}
	return o.WhitelistElementSelectors
}

// GetWhitelistElementSelectorsOk returns a tuple with the WhitelistElementSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetWhitelistElementSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhitelistElementSelectors) {
		return nil, false
	}
	return o.WhitelistElementSelectors, true
}

// HasWhitelistElementSelectors returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasWhitelistElementSelectors() bool {
	if o != nil && !IsNil(o.WhitelistElementSelectors) {
		return true
	}

	return false
}

// SetWhitelistElementSelectors gets a reference to the given []string and assigns it to the WhitelistElementSelectors field.
func (o *ProfileDetailedConfigurationFrontendDast) SetWhitelistElementSelectors(v []string) {
	o.WhitelistElementSelectors = v
}

// GetMaxQueryParamsVisits returns the MaxQueryParamsVisits field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxQueryParamsVisits() float32 {
	if o == nil || IsNil(o.MaxQueryParamsVisits) {
		var ret float32
		return ret
	}
	return *o.MaxQueryParamsVisits
}

// GetMaxQueryParamsVisitsOk returns a tuple with the MaxQueryParamsVisits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxQueryParamsVisitsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxQueryParamsVisits) {
		return nil, false
	}
	return o.MaxQueryParamsVisits, true
}

// HasMaxQueryParamsVisits returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasMaxQueryParamsVisits() bool {
	if o != nil && !IsNil(o.MaxQueryParamsVisits) {
		return true
	}

	return false
}

// SetMaxQueryParamsVisits gets a reference to the given float32 and assigns it to the MaxQueryParamsVisits field.
func (o *ProfileDetailedConfigurationFrontendDast) SetMaxQueryParamsVisits(v float32) {
	o.MaxQueryParamsVisits = &v
}

// GetMaxFragmentsVisits returns the MaxFragmentsVisits field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxFragmentsVisits() float32 {
	if o == nil || IsNil(o.MaxFragmentsVisits) {
		var ret float32
		return ret
	}
	return *o.MaxFragmentsVisits
}

// GetMaxFragmentsVisitsOk returns a tuple with the MaxFragmentsVisits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxFragmentsVisitsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxFragmentsVisits) {
		return nil, false
	}
	return o.MaxFragmentsVisits, true
}

// HasMaxFragmentsVisits returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasMaxFragmentsVisits() bool {
	if o != nil && !IsNil(o.MaxFragmentsVisits) {
		return true
	}

	return false
}

// SetMaxFragmentsVisits gets a reference to the given float32 and assigns it to the MaxFragmentsVisits field.
func (o *ProfileDetailedConfigurationFrontendDast) SetMaxFragmentsVisits(v float32) {
	o.MaxFragmentsVisits = &v
}

// GetMaxParameterOccurence returns the MaxParameterOccurence field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxParameterOccurence() float32 {
	if o == nil || IsNil(o.MaxParameterOccurence) {
		var ret float32
		return ret
	}
	return *o.MaxParameterOccurence
}

// GetMaxParameterOccurenceOk returns a tuple with the MaxParameterOccurence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetMaxParameterOccurenceOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxParameterOccurence) {
		return nil, false
	}
	return o.MaxParameterOccurence, true
}

// HasMaxParameterOccurence returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasMaxParameterOccurence() bool {
	if o != nil && !IsNil(o.MaxParameterOccurence) {
		return true
	}

	return false
}

// SetMaxParameterOccurence gets a reference to the given float32 and assigns it to the MaxParameterOccurence field.
func (o *ProfileDetailedConfigurationFrontendDast) SetMaxParameterOccurence(v float32) {
	o.MaxParameterOccurence = &v
}

// GetSecurityChecksEnabled returns the SecurityChecksEnabled field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetSecurityChecksEnabled() []ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS {
	if o == nil || IsNil(o.SecurityChecksEnabled) {
		var ret []ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS
		return ret
	}
	return o.SecurityChecksEnabled
}

// GetSecurityChecksEnabledOk returns a tuple with the SecurityChecksEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetSecurityChecksEnabledOk() ([]ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS, bool) {
	if o == nil || IsNil(o.SecurityChecksEnabled) {
		return nil, false
	}
	return o.SecurityChecksEnabled, true
}

// HasSecurityChecksEnabled returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasSecurityChecksEnabled() bool {
	if o != nil && !IsNil(o.SecurityChecksEnabled) {
		return true
	}

	return false
}

// SetSecurityChecksEnabled gets a reference to the given []ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS and assigns it to the SecurityChecksEnabled field.
func (o *ProfileDetailedConfigurationFrontendDast) SetSecurityChecksEnabled(v []ENUMPROPERTIESCONFIGURATIONPROPERTIESFRONTENDDASTPROPERTIESSECURITYCHECKSENABLEDITEMS) {
	o.SecurityChecksEnabled = v
}

// GetApiChecksDuringAuth returns the ApiChecksDuringAuth field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetApiChecksDuringAuth() bool {
	if o == nil || IsNil(o.ApiChecksDuringAuth) {
		var ret bool
		return ret
	}
	return *o.ApiChecksDuringAuth
}

// GetApiChecksDuringAuthOk returns a tuple with the ApiChecksDuringAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetApiChecksDuringAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiChecksDuringAuth) {
		return nil, false
	}
	return o.ApiChecksDuringAuth, true
}

// HasApiChecksDuringAuth returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasApiChecksDuringAuth() bool {
	if o != nil && !IsNil(o.ApiChecksDuringAuth) {
		return true
	}

	return false
}

// SetApiChecksDuringAuth gets a reference to the given bool and assigns it to the ApiChecksDuringAuth field.
func (o *ProfileDetailedConfigurationFrontendDast) SetApiChecksDuringAuth(v bool) {
	o.ApiChecksDuringAuth = &v
}

// GetAllowedUrlPatterns returns the AllowedUrlPatterns field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetAllowedUrlPatterns() []string {
	if o == nil || IsNil(o.AllowedUrlPatterns) {
		var ret []string
		return ret
	}
	return o.AllowedUrlPatterns
}

// GetAllowedUrlPatternsOk returns a tuple with the AllowedUrlPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetAllowedUrlPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedUrlPatterns) {
		return nil, false
	}
	return o.AllowedUrlPatterns, true
}

// HasAllowedUrlPatterns returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasAllowedUrlPatterns() bool {
	if o != nil && !IsNil(o.AllowedUrlPatterns) {
		return true
	}

	return false
}

// SetAllowedUrlPatterns gets a reference to the given []string and assigns it to the AllowedUrlPatterns field.
func (o *ProfileDetailedConfigurationFrontendDast) SetAllowedUrlPatterns(v []string) {
	o.AllowedUrlPatterns = v
}

// GetLogoutDetection returns the LogoutDetection field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetLogoutDetection() ProfileDetailedConfigurationFrontendDastLogoutDetection {
	if o == nil || IsNil(o.LogoutDetection) {
		var ret ProfileDetailedConfigurationFrontendDastLogoutDetection
		return ret
	}
	return *o.LogoutDetection
}

// GetLogoutDetectionOk returns a tuple with the LogoutDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetLogoutDetectionOk() (*ProfileDetailedConfigurationFrontendDastLogoutDetection, bool) {
	if o == nil || IsNil(o.LogoutDetection) {
		return nil, false
	}
	return o.LogoutDetection, true
}

// HasLogoutDetection returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasLogoutDetection() bool {
	if o != nil && !IsNil(o.LogoutDetection) {
		return true
	}

	return false
}

// SetLogoutDetection gets a reference to the given ProfileDetailedConfigurationFrontendDastLogoutDetection and assigns it to the LogoutDetection field.
func (o *ProfileDetailedConfigurationFrontendDast) SetLogoutDetection(v ProfileDetailedConfigurationFrontendDastLogoutDetection) {
	o.LogoutDetection = &v
}

// GetFrontendAgenticPentesting returns the FrontendAgenticPentesting field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetFrontendAgenticPentesting() bool {
	if o == nil || IsNil(o.FrontendAgenticPentesting) {
		var ret bool
		return ret
	}
	return *o.FrontendAgenticPentesting
}

// GetFrontendAgenticPentestingOk returns a tuple with the FrontendAgenticPentesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetFrontendAgenticPentestingOk() (*bool, bool) {
	if o == nil || IsNil(o.FrontendAgenticPentesting) {
		return nil, false
	}
	return o.FrontendAgenticPentesting, true
}

// HasFrontendAgenticPentesting returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasFrontendAgenticPentesting() bool {
	if o != nil && !IsNil(o.FrontendAgenticPentesting) {
		return true
	}

	return false
}

// SetFrontendAgenticPentesting gets a reference to the given bool and assigns it to the FrontendAgenticPentesting field.
func (o *ProfileDetailedConfigurationFrontendDast) SetFrontendAgenticPentesting(v bool) {
	o.FrontendAgenticPentesting = &v
}

// GetUseLegacyCrawling returns the UseLegacyCrawling field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetUseLegacyCrawling() bool {
	if o == nil || IsNil(o.UseLegacyCrawling) {
		var ret bool
		return ret
	}
	return *o.UseLegacyCrawling
}

// GetUseLegacyCrawlingOk returns a tuple with the UseLegacyCrawling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetUseLegacyCrawlingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLegacyCrawling) {
		return nil, false
	}
	return o.UseLegacyCrawling, true
}

// HasUseLegacyCrawling returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasUseLegacyCrawling() bool {
	if o != nil && !IsNil(o.UseLegacyCrawling) {
		return true
	}

	return false
}

// SetUseLegacyCrawling gets a reference to the given bool and assigns it to the UseLegacyCrawling field.
func (o *ProfileDetailedConfigurationFrontendDast) SetUseLegacyCrawling(v bool) {
	o.UseLegacyCrawling = &v
}

// GetStaticCrawling returns the StaticCrawling field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDast) GetStaticCrawling() ProfileDetailedConfigurationFrontendDastStaticCrawling {
	if o == nil || IsNil(o.StaticCrawling) {
		var ret ProfileDetailedConfigurationFrontendDastStaticCrawling
		return ret
	}
	return *o.StaticCrawling
}

// GetStaticCrawlingOk returns a tuple with the StaticCrawling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDast) GetStaticCrawlingOk() (*ProfileDetailedConfigurationFrontendDastStaticCrawling, bool) {
	if o == nil || IsNil(o.StaticCrawling) {
		return nil, false
	}
	return o.StaticCrawling, true
}

// HasStaticCrawling returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDast) HasStaticCrawling() bool {
	if o != nil && !IsNil(o.StaticCrawling) {
		return true
	}

	return false
}

// SetStaticCrawling gets a reference to the given ProfileDetailedConfigurationFrontendDastStaticCrawling and assigns it to the StaticCrawling field.
func (o *ProfileDetailedConfigurationFrontendDast) SetStaticCrawling(v ProfileDetailedConfigurationFrontendDastStaticCrawling) {
	o.StaticCrawling = &v
}

func (o ProfileDetailedConfigurationFrontendDast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationFrontendDast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.MaxDuration) {
		toSerialize["max_duration"] = o.MaxDuration
	}
	if !IsNil(o.Hotstart) {
		toSerialize["hotstart"] = o.Hotstart
	}
	if !IsNil(o.BlocklistPatterns) {
		toSerialize["blocklist_patterns"] = o.BlocklistPatterns
	}
	if !IsNil(o.SkippedApiChecksUrlPatterns) {
		toSerialize["skipped_api_checks_url_patterns"] = o.SkippedApiChecksUrlPatterns
	}
	if !IsNil(o.RelaxCorsSecurity) {
		toSerialize["relax_cors_security"] = o.RelaxCorsSecurity
	}
	if !IsNil(o.SinglePageWorker) {
		toSerialize["single_page_worker"] = o.SinglePageWorker
	}
	if !IsNil(o.ParallelWorkers) {
		toSerialize["parallel_workers"] = o.ParallelWorkers
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.UsePersistence) {
		toSerialize["use_persistence"] = o.UsePersistence
	}
	if !IsNil(o.EscapeUserHeader) {
		toSerialize["escape_user_header"] = o.EscapeUserHeader
	}
	if !IsNil(o.PrefetchSitemap) {
		toSerialize["prefetch_sitemap"] = o.PrefetchSitemap
	}
	if !IsNil(o.BlocklistedElementSelectors) {
		toSerialize["blocklisted_element_selectors"] = o.BlocklistedElementSelectors
	}
	if !IsNil(o.WhitelistElementSelectors) {
		toSerialize["whitelist_element_selectors"] = o.WhitelistElementSelectors
	}
	if !IsNil(o.MaxQueryParamsVisits) {
		toSerialize["max_query_params_visits"] = o.MaxQueryParamsVisits
	}
	if !IsNil(o.MaxFragmentsVisits) {
		toSerialize["max_fragments_visits"] = o.MaxFragmentsVisits
	}
	if !IsNil(o.MaxParameterOccurence) {
		toSerialize["max_parameter_occurence"] = o.MaxParameterOccurence
	}
	if !IsNil(o.SecurityChecksEnabled) {
		toSerialize["security_checks_enabled"] = o.SecurityChecksEnabled
	}
	if !IsNil(o.ApiChecksDuringAuth) {
		toSerialize["api_checks_during_auth"] = o.ApiChecksDuringAuth
	}
	if !IsNil(o.AllowedUrlPatterns) {
		toSerialize["allowed_url_patterns"] = o.AllowedUrlPatterns
	}
	if !IsNil(o.LogoutDetection) {
		toSerialize["logout_detection"] = o.LogoutDetection
	}
	if !IsNil(o.FrontendAgenticPentesting) {
		toSerialize["frontend_agentic_pentesting"] = o.FrontendAgenticPentesting
	}
	if !IsNil(o.UseLegacyCrawling) {
		toSerialize["use_legacy_crawling"] = o.UseLegacyCrawling
	}
	if !IsNil(o.StaticCrawling) {
		toSerialize["static_crawling"] = o.StaticCrawling
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationFrontendDast) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationFrontendDast := _ProfileDetailedConfigurationFrontendDast{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationFrontendDast)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationFrontendDast(varProfileDetailedConfigurationFrontendDast)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "location_id")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "max_duration")
		delete(additionalProperties, "hotstart")
		delete(additionalProperties, "blocklist_patterns")
		delete(additionalProperties, "skipped_api_checks_url_patterns")
		delete(additionalProperties, "relax_cors_security")
		delete(additionalProperties, "single_page_worker")
		delete(additionalProperties, "parallel_workers")
		delete(additionalProperties, "user_agent")
		delete(additionalProperties, "use_persistence")
		delete(additionalProperties, "escape_user_header")
		delete(additionalProperties, "prefetch_sitemap")
		delete(additionalProperties, "blocklisted_element_selectors")
		delete(additionalProperties, "whitelist_element_selectors")
		delete(additionalProperties, "max_query_params_visits")
		delete(additionalProperties, "max_fragments_visits")
		delete(additionalProperties, "max_parameter_occurence")
		delete(additionalProperties, "security_checks_enabled")
		delete(additionalProperties, "api_checks_during_auth")
		delete(additionalProperties, "allowed_url_patterns")
		delete(additionalProperties, "logout_detection")
		delete(additionalProperties, "frontend_agentic_pentesting")
		delete(additionalProperties, "use_legacy_crawling")
		delete(additionalProperties, "static_crawling")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationFrontendDast struct {
	value *ProfileDetailedConfigurationFrontendDast
	isSet bool
}

func (v NullableProfileDetailedConfigurationFrontendDast) Get() *ProfileDetailedConfigurationFrontendDast {
	return v.value
}

func (v *NullableProfileDetailedConfigurationFrontendDast) Set(val *ProfileDetailedConfigurationFrontendDast) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationFrontendDast) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationFrontendDast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationFrontendDast(val *ProfileDetailedConfigurationFrontendDast) *NullableProfileDetailedConfigurationFrontendDast {
	return &NullableProfileDetailedConfigurationFrontendDast{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationFrontendDast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationFrontendDast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


