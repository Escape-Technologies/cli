/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetGITHUBREPOSITORYRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetGITHUBREPOSITORYRequest{}

// CreateAssetGITHUBREPOSITORYRequest struct for CreateAssetGITHUBREPOSITORYRequest
type CreateAssetGITHUBREPOSITORYRequest struct {
	AssetClass ENUMREPOSITORY `json:"asset_class"`
	AssetType ENUMGITHUBREPOSITORY `json:"asset_type"`
	Url string `json:"url"`
	Name *string `json:"name,omitempty"`
	HttpUrlToRepo *string `json:"http_url_to_repo,omitempty"`
	Description *string `json:"description,omitempty"`
	LocationId *string `json:"location_id,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	BlobBaseUrl *string `json:"blob_base_url,omitempty"`
	OwnerId *float32 `json:"owner_id,omitempty"`
	OwnerLogin *string `json:"owner_login,omitempty"`
	OwnerHtmlUrl *string `json:"owner_html_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	Clonable *bool `json:"clonable,omitempty"`
	Private *bool `json:"private,omitempty"`
	Org *CreateAssetGITHUBREPOSITORYRequestOrg `json:"org,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetGITHUBREPOSITORYRequest CreateAssetGITHUBREPOSITORYRequest

// NewCreateAssetGITHUBREPOSITORYRequest instantiates a new CreateAssetGITHUBREPOSITORYRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetGITHUBREPOSITORYRequest(assetClass ENUMREPOSITORY, assetType ENUMGITHUBREPOSITORY, url string) *CreateAssetGITHUBREPOSITORYRequest {
	this := CreateAssetGITHUBREPOSITORYRequest{}
	this.AssetClass = assetClass
	this.AssetType = assetType
	this.Url = url
	return &this
}

// NewCreateAssetGITHUBREPOSITORYRequestWithDefaults instantiates a new CreateAssetGITHUBREPOSITORYRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetGITHUBREPOSITORYRequestWithDefaults() *CreateAssetGITHUBREPOSITORYRequest {
	this := CreateAssetGITHUBREPOSITORYRequest{}
	return &this
}

// GetAssetClass returns the AssetClass field value
func (o *CreateAssetGITHUBREPOSITORYRequest) GetAssetClass() ENUMREPOSITORY {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetAssetClassOk() (*ENUMREPOSITORY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetClass, true
}

// SetAssetClass sets field value
func (o *CreateAssetGITHUBREPOSITORYRequest) SetAssetClass(v ENUMREPOSITORY) {
	o.AssetClass = v
}

// GetAssetType returns the AssetType field value
func (o *CreateAssetGITHUBREPOSITORYRequest) GetAssetType() ENUMGITHUBREPOSITORY {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetAssetTypeOk() (*ENUMGITHUBREPOSITORY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *CreateAssetGITHUBREPOSITORYRequest) SetAssetType(v ENUMGITHUBREPOSITORY) {
	o.AssetType = v
}

// GetUrl returns the Url field value
func (o *CreateAssetGITHUBREPOSITORYRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateAssetGITHUBREPOSITORYRequest) SetUrl(v string) {
	o.Url = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetName(v string) {
	o.Name = &v
}

// GetHttpUrlToRepo returns the HttpUrlToRepo field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetHttpUrlToRepo() string {
	if o == nil || IsNil(o.HttpUrlToRepo) {
		var ret string
		return ret
	}
	return *o.HttpUrlToRepo
}

// GetHttpUrlToRepoOk returns a tuple with the HttpUrlToRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetHttpUrlToRepoOk() (*string, bool) {
	if o == nil || IsNil(o.HttpUrlToRepo) {
		return nil, false
	}
	return o.HttpUrlToRepo, true
}

// HasHttpUrlToRepo returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasHttpUrlToRepo() bool {
	if o != nil && !IsNil(o.HttpUrlToRepo) {
		return true
	}

	return false
}

// SetHttpUrlToRepo gets a reference to the given string and assigns it to the HttpUrlToRepo field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetHttpUrlToRepo(v string) {
	o.HttpUrlToRepo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetLocationId(v string) {
	o.LocationId = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetBlobBaseUrl returns the BlobBaseUrl field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetBlobBaseUrl() string {
	if o == nil || IsNil(o.BlobBaseUrl) {
		var ret string
		return ret
	}
	return *o.BlobBaseUrl
}

// GetBlobBaseUrlOk returns a tuple with the BlobBaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetBlobBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BlobBaseUrl) {
		return nil, false
	}
	return o.BlobBaseUrl, true
}

// HasBlobBaseUrl returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasBlobBaseUrl() bool {
	if o != nil && !IsNil(o.BlobBaseUrl) {
		return true
	}

	return false
}

// SetBlobBaseUrl gets a reference to the given string and assigns it to the BlobBaseUrl field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetBlobBaseUrl(v string) {
	o.BlobBaseUrl = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerId() float32 {
	if o == nil || IsNil(o.OwnerId) {
		var ret float32
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given float32 and assigns it to the OwnerId field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetOwnerId(v float32) {
	o.OwnerId = &v
}

// GetOwnerLogin returns the OwnerLogin field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerLogin() string {
	if o == nil || IsNil(o.OwnerLogin) {
		var ret string
		return ret
	}
	return *o.OwnerLogin
}

// GetOwnerLoginOk returns a tuple with the OwnerLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerLoginOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerLogin) {
		return nil, false
	}
	return o.OwnerLogin, true
}

// HasOwnerLogin returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasOwnerLogin() bool {
	if o != nil && !IsNil(o.OwnerLogin) {
		return true
	}

	return false
}

// SetOwnerLogin gets a reference to the given string and assigns it to the OwnerLogin field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetOwnerLogin(v string) {
	o.OwnerLogin = &v
}

// GetOwnerHtmlUrl returns the OwnerHtmlUrl field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerHtmlUrl() string {
	if o == nil || IsNil(o.OwnerHtmlUrl) {
		var ret string
		return ret
	}
	return *o.OwnerHtmlUrl
}

// GetOwnerHtmlUrlOk returns a tuple with the OwnerHtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOwnerHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerHtmlUrl) {
		return nil, false
	}
	return o.OwnerHtmlUrl, true
}

// HasOwnerHtmlUrl returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasOwnerHtmlUrl() bool {
	if o != nil && !IsNil(o.OwnerHtmlUrl) {
		return true
	}

	return false
}

// SetOwnerHtmlUrl gets a reference to the given string and assigns it to the OwnerHtmlUrl field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetOwnerHtmlUrl(v string) {
	o.OwnerHtmlUrl = &v
}

// GetFork returns the Fork field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetFork() bool {
	if o == nil || IsNil(o.Fork) {
		var ret bool
		return ret
	}
	return *o.Fork
}

// GetForkOk returns a tuple with the Fork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetForkOk() (*bool, bool) {
	if o == nil || IsNil(o.Fork) {
		return nil, false
	}
	return o.Fork, true
}

// HasFork returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasFork() bool {
	if o != nil && !IsNil(o.Fork) {
		return true
	}

	return false
}

// SetFork gets a reference to the given bool and assigns it to the Fork field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetFork(v bool) {
	o.Fork = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetClonable returns the Clonable field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetClonable() bool {
	if o == nil || IsNil(o.Clonable) {
		var ret bool
		return ret
	}
	return *o.Clonable
}

// GetClonableOk returns a tuple with the Clonable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetClonableOk() (*bool, bool) {
	if o == nil || IsNil(o.Clonable) {
		return nil, false
	}
	return o.Clonable, true
}

// HasClonable returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasClonable() bool {
	if o != nil && !IsNil(o.Clonable) {
		return true
	}

	return false
}

// SetClonable gets a reference to the given bool and assigns it to the Clonable field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetClonable(v bool) {
	o.Clonable = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetPrivate(v bool) {
	o.Private = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOrg() CreateAssetGITHUBREPOSITORYRequestOrg {
	if o == nil || IsNil(o.Org) {
		var ret CreateAssetGITHUBREPOSITORYRequestOrg
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) GetOrgOk() (*CreateAssetGITHUBREPOSITORYRequestOrg, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *CreateAssetGITHUBREPOSITORYRequest) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given CreateAssetGITHUBREPOSITORYRequestOrg and assigns it to the Org field.
func (o *CreateAssetGITHUBREPOSITORYRequest) SetOrg(v CreateAssetGITHUBREPOSITORYRequestOrg) {
	o.Org = &v
}

func (o CreateAssetGITHUBREPOSITORYRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetGITHUBREPOSITORYRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_class"] = o.AssetClass
	toSerialize["asset_type"] = o.AssetType
	toSerialize["url"] = o.Url
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.HttpUrlToRepo) {
		toSerialize["http_url_to_repo"] = o.HttpUrlToRepo
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.DefaultBranch) {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if !IsNil(o.BlobBaseUrl) {
		toSerialize["blob_base_url"] = o.BlobBaseUrl
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.OwnerLogin) {
		toSerialize["owner_login"] = o.OwnerLogin
	}
	if !IsNil(o.OwnerHtmlUrl) {
		toSerialize["owner_html_url"] = o.OwnerHtmlUrl
	}
	if !IsNil(o.Fork) {
		toSerialize["fork"] = o.Fork
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Clonable) {
		toSerialize["clonable"] = o.Clonable
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetGITHUBREPOSITORYRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_class",
		"asset_type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetGITHUBREPOSITORYRequest := _CreateAssetGITHUBREPOSITORYRequest{}

	err = json.Unmarshal(data, &varCreateAssetGITHUBREPOSITORYRequest)

	if err != nil {
		return err
	}

	*o = CreateAssetGITHUBREPOSITORYRequest(varCreateAssetGITHUBREPOSITORYRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_class")
		delete(additionalProperties, "asset_type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "http_url_to_repo")
		delete(additionalProperties, "description")
		delete(additionalProperties, "location_id")
		delete(additionalProperties, "default_branch")
		delete(additionalProperties, "blob_base_url")
		delete(additionalProperties, "owner_id")
		delete(additionalProperties, "owner_login")
		delete(additionalProperties, "owner_html_url")
		delete(additionalProperties, "fork")
		delete(additionalProperties, "archived")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "clonable")
		delete(additionalProperties, "private")
		delete(additionalProperties, "org")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetGITHUBREPOSITORYRequest struct {
	value *CreateAssetGITHUBREPOSITORYRequest
	isSet bool
}

func (v NullableCreateAssetGITHUBREPOSITORYRequest) Get() *CreateAssetGITHUBREPOSITORYRequest {
	return v.value
}

func (v *NullableCreateAssetGITHUBREPOSITORYRequest) Set(val *CreateAssetGITHUBREPOSITORYRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetGITHUBREPOSITORYRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetGITHUBREPOSITORYRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetGITHUBREPOSITORYRequest(val *CreateAssetGITHUBREPOSITORYRequest) *NullableCreateAssetGITHUBREPOSITORYRequest {
	return &NullableCreateAssetGITHUBREPOSITORYRequest{value: val, isSet: true}
}

func (v NullableCreateAssetGITHUBREPOSITORYRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetGITHUBREPOSITORYRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


