/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateASMDNSProfile200ResponseActiveConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateASMDNSProfile200ResponseActiveConfiguration{}

// CreateASMDNSProfile200ResponseActiveConfiguration struct for CreateASMDNSProfile200ResponseActiveConfiguration
type CreateASMDNSProfile200ResponseActiveConfiguration struct {
	Id string `json:"id"`
	Content interface{} `json:"content,omitempty"`
	IsConfigurationValid bool `json:"isConfigurationValid"`
	IsAuthenticationValid bool `json:"isAuthenticationValid"`
	AuthenticationContent interface{} `json:"authenticationContent,omitempty"`
	AuthenticationProblems []string `json:"authenticationProblems"`
	AdditionalProperties map[string]interface{}
}

type _CreateASMDNSProfile200ResponseActiveConfiguration CreateASMDNSProfile200ResponseActiveConfiguration

// NewCreateASMDNSProfile200ResponseActiveConfiguration instantiates a new CreateASMDNSProfile200ResponseActiveConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateASMDNSProfile200ResponseActiveConfiguration(id string, isConfigurationValid bool, isAuthenticationValid bool, authenticationProblems []string) *CreateASMDNSProfile200ResponseActiveConfiguration {
	this := CreateASMDNSProfile200ResponseActiveConfiguration{}
	this.Id = id
	this.IsConfigurationValid = isConfigurationValid
	this.IsAuthenticationValid = isAuthenticationValid
	this.AuthenticationProblems = authenticationProblems
	return &this
}

// NewCreateASMDNSProfile200ResponseActiveConfigurationWithDefaults instantiates a new CreateASMDNSProfile200ResponseActiveConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateASMDNSProfile200ResponseActiveConfigurationWithDefaults() *CreateASMDNSProfile200ResponseActiveConfiguration {
	this := CreateASMDNSProfile200ResponseActiveConfiguration{}
	return &this
}

// GetId returns the Id field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetId(v string) {
	o.Id = v
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return &o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given interface{} and assigns it to the Content field.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetContent(v interface{}) {
	o.Content = v
}

// GetIsConfigurationValid returns the IsConfigurationValid field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetIsConfigurationValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsConfigurationValid
}

// GetIsConfigurationValidOk returns a tuple with the IsConfigurationValid field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetIsConfigurationValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsConfigurationValid, true
}

// SetIsConfigurationValid sets field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetIsConfigurationValid(v bool) {
	o.IsConfigurationValid = v
}

// GetIsAuthenticationValid returns the IsAuthenticationValid field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetIsAuthenticationValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAuthenticationValid
}

// GetIsAuthenticationValidOk returns a tuple with the IsAuthenticationValid field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetIsAuthenticationValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAuthenticationValid, true
}

// SetIsAuthenticationValid sets field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetIsAuthenticationValid(v bool) {
	o.IsAuthenticationValid = v
}

// GetAuthenticationContent returns the AuthenticationContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetAuthenticationContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AuthenticationContent
}

// GetAuthenticationContentOk returns a tuple with the AuthenticationContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetAuthenticationContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AuthenticationContent) {
		return nil, false
	}
	return &o.AuthenticationContent, true
}

// HasAuthenticationContent returns a boolean if a field has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) HasAuthenticationContent() bool {
	if o != nil && !IsNil(o.AuthenticationContent) {
		return true
	}

	return false
}

// SetAuthenticationContent gets a reference to the given interface{} and assigns it to the AuthenticationContent field.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetAuthenticationContent(v interface{}) {
	o.AuthenticationContent = v
}

// GetAuthenticationProblems returns the AuthenticationProblems field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetAuthenticationProblems() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AuthenticationProblems
}

// GetAuthenticationProblemsOk returns a tuple with the AuthenticationProblems field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) GetAuthenticationProblemsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationProblems, true
}

// SetAuthenticationProblems sets field value
func (o *CreateASMDNSProfile200ResponseActiveConfiguration) SetAuthenticationProblems(v []string) {
	o.AuthenticationProblems = v
}

func (o CreateASMDNSProfile200ResponseActiveConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateASMDNSProfile200ResponseActiveConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	toSerialize["isConfigurationValid"] = o.IsConfigurationValid
	toSerialize["isAuthenticationValid"] = o.IsAuthenticationValid
	if o.AuthenticationContent != nil {
		toSerialize["authenticationContent"] = o.AuthenticationContent
	}
	toSerialize["authenticationProblems"] = o.AuthenticationProblems

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateASMDNSProfile200ResponseActiveConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isConfigurationValid",
		"isAuthenticationValid",
		"authenticationProblems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateASMDNSProfile200ResponseActiveConfiguration := _CreateASMDNSProfile200ResponseActiveConfiguration{}

	err = json.Unmarshal(data, &varCreateASMDNSProfile200ResponseActiveConfiguration)

	if err != nil {
		return err
	}

	*o = CreateASMDNSProfile200ResponseActiveConfiguration(varCreateASMDNSProfile200ResponseActiveConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "content")
		delete(additionalProperties, "isConfigurationValid")
		delete(additionalProperties, "isAuthenticationValid")
		delete(additionalProperties, "authenticationContent")
		delete(additionalProperties, "authenticationProblems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateASMDNSProfile200ResponseActiveConfiguration struct {
	value *CreateASMDNSProfile200ResponseActiveConfiguration
	isSet bool
}

func (v NullableCreateASMDNSProfile200ResponseActiveConfiguration) Get() *CreateASMDNSProfile200ResponseActiveConfiguration {
	return v.value
}

func (v *NullableCreateASMDNSProfile200ResponseActiveConfiguration) Set(val *CreateASMDNSProfile200ResponseActiveConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateASMDNSProfile200ResponseActiveConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateASMDNSProfile200ResponseActiveConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateASMDNSProfile200ResponseActiveConfiguration(val *CreateASMDNSProfile200ResponseActiveConfiguration) *NullableCreateASMDNSProfile200ResponseActiveConfiguration {
	return &NullableCreateASMDNSProfile200ResponseActiveConfiguration{value: val, isSet: true}
}

func (v NullableCreateASMDNSProfile200ResponseActiveConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateASMDNSProfile200ResponseActiveConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


