/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the LocationDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationDetailed{}

// LocationDetailed Detailed information about a location
type LocationDetailed struct {
	// The location ID.
	Id *string `json:"id,omitempty"`
	// The name of the location.
	Name *string `json:"name,omitempty"`
	// The type of the location.
	Type *string `json:"type,omitempty"`
	// Whether the location is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The date and time the location was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date and time the location was last seen.
	LastSeenAt *string `json:"lastSeenAt,omitempty"`
	Links LocationSummarizedLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _LocationDetailed LocationDetailed

// NewLocationDetailed instantiates a new LocationDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationDetailed(links LocationSummarizedLinks) *LocationDetailed {
	this := LocationDetailed{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Location Name"
	this.Name = &name
	var type_ string = "Location Type"
	this.Type = &type_
	var enabled bool = true
	this.Enabled = &enabled
	var createdAt string = "2021-01-01T00:00:00Z"
	this.CreatedAt = &createdAt
	var lastSeenAt string = "2021-01-01T00:00:00Z"
	this.LastSeenAt = &lastSeenAt
	this.Links = links
	return &this
}

// NewLocationDetailedWithDefaults instantiates a new LocationDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationDetailedWithDefaults() *LocationDetailed {
	this := LocationDetailed{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Location Name"
	this.Name = &name
	var type_ string = "Location Type"
	this.Type = &type_
	var enabled bool = true
	this.Enabled = &enabled
	var createdAt string = "2021-01-01T00:00:00Z"
	this.CreatedAt = &createdAt
	var lastSeenAt string = "2021-01-01T00:00:00Z"
	this.LastSeenAt = &lastSeenAt
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocationDetailed) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocationDetailed) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LocationDetailed) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LocationDetailed) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LocationDetailed) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LocationDetailed) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LocationDetailed) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LocationDetailed) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LocationDetailed) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LocationDetailed) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LocationDetailed) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LocationDetailed) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LocationDetailed) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LocationDetailed) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *LocationDetailed) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetLastSeenAt returns the LastSeenAt field value if set, zero value otherwise.
func (o *LocationDetailed) GetLastSeenAt() string {
	if o == nil || IsNil(o.LastSeenAt) {
		var ret string
		return ret
	}
	return *o.LastSeenAt
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetLastSeenAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastSeenAt) {
		return nil, false
	}
	return o.LastSeenAt, true
}

// HasLastSeenAt returns a boolean if a field has been set.
func (o *LocationDetailed) HasLastSeenAt() bool {
	if o != nil && !IsNil(o.LastSeenAt) {
		return true
	}

	return false
}

// SetLastSeenAt gets a reference to the given string and assigns it to the LastSeenAt field.
func (o *LocationDetailed) SetLastSeenAt(v string) {
	o.LastSeenAt = &v
}

// GetLinks returns the Links field value
func (o *LocationDetailed) GetLinks() LocationSummarizedLinks {
	if o == nil {
		var ret LocationSummarizedLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *LocationDetailed) GetLinksOk() (*LocationSummarizedLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *LocationDetailed) SetLinks(v LocationSummarizedLinks) {
	o.Links = v
}

func (o LocationDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.LastSeenAt) {
		toSerialize["lastSeenAt"] = o.LastSeenAt
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationDetailed := _LocationDetailed{}

	err = json.Unmarshal(data, &varLocationDetailed)

	if err != nil {
		return err
	}

	*o = LocationDetailed(varLocationDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "lastSeenAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationDetailed struct {
	value *LocationDetailed
	isSet bool
}

func (v NullableLocationDetailed) Get() *LocationDetailed {
	return v.value
}

func (v *NullableLocationDetailed) Set(val *LocationDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationDetailed(val *LocationDetailed) *NullableLocationDetailed {
	return &NullableLocationDetailed{value: val, isSet: true}
}

func (v NullableLocationDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


