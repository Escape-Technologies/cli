/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumAaccef0c05ed72dfa82b28d54c8e6410 The framework of the asset
type EnumAaccef0c05ed72dfa82b28d54c8e6410 string

// List of Enum_aaccef0c05ed72dfa82b28d54c8e6410
const (
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_ANGULAR EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_ANGULAR"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_JAVASCRIPT EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_JAVASCRIPT"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_JQUERY EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_JQUERY"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_REACT EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_REACT"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_SVELTE EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_SVELTE"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_FRONTEND_VUE EnumAaccef0c05ed72dfa82b28d54c8e6410 = "FRONTEND_VUE"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_GRAPHQL_APOLLO EnumAaccef0c05ed72dfa82b28d54c8e6410 = "GRAPHQL_APOLLO"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_GRAPHQL_GRAPHQLYOGA EnumAaccef0c05ed72dfa82b28d54c8e6410 = "GRAPHQL_GRAPHQLYOGA"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_ASP_NET EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_ASP_NET"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_DJANGO EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_DJANGO"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_EXPRESS_JS EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_EXPRESS_JS"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_FLASK EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_FLASK"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_GIN EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_GIN"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_HONO EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_HONO"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_LARAVEL EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_LARAVEL"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_NESTJS EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_NESTJS"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_NEXTJS EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_NEXTJS"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_NUXTJS EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_NUXTJS"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_RUBY_ON_RAILS EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_RUBY_ON_RAILS"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_SPRING_BOOT EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_SPRING_BOOT"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_REST_SYMFONY EnumAaccef0c05ed72dfa82b28d54c8e6410 = "REST_SYMFONY"
	ENUMAACCEF0C05ED72DFA82B28D54C8E6410_UNKNOWN EnumAaccef0c05ed72dfa82b28d54c8e6410 = "UNKNOWN"
)

// All allowed values of EnumAaccef0c05ed72dfa82b28d54c8e6410 enum
var AllowedEnumAaccef0c05ed72dfa82b28d54c8e6410EnumValues = []EnumAaccef0c05ed72dfa82b28d54c8e6410{
	"FRONTEND_ANGULAR",
	"FRONTEND_JAVASCRIPT",
	"FRONTEND_JQUERY",
	"FRONTEND_REACT",
	"FRONTEND_SVELTE",
	"FRONTEND_VUE",
	"GRAPHQL_APOLLO",
	"GRAPHQL_GRAPHQLYOGA",
	"REST_ASP_NET",
	"REST_DJANGO",
	"REST_EXPRESS_JS",
	"REST_FLASK",
	"REST_GIN",
	"REST_HONO",
	"REST_LARAVEL",
	"REST_NESTJS",
	"REST_NEXTJS",
	"REST_NUXTJS",
	"REST_RUBY_ON_RAILS",
	"REST_SPRING_BOOT",
	"REST_SYMFONY",
	"UNKNOWN",
}

func (v *EnumAaccef0c05ed72dfa82b28d54c8e6410) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAaccef0c05ed72dfa82b28d54c8e6410(value)
	for _, existing := range AllowedEnumAaccef0c05ed72dfa82b28d54c8e6410EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumAaccef0c05ed72dfa82b28d54c8e6410", value)
}

// NewEnumAaccef0c05ed72dfa82b28d54c8e6410FromValue returns a pointer to a valid EnumAaccef0c05ed72dfa82b28d54c8e6410
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAaccef0c05ed72dfa82b28d54c8e6410FromValue(v string) (*EnumAaccef0c05ed72dfa82b28d54c8e6410, error) {
	ev := EnumAaccef0c05ed72dfa82b28d54c8e6410(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAaccef0c05ed72dfa82b28d54c8e6410: valid values are %v", v, AllowedEnumAaccef0c05ed72dfa82b28d54c8e6410EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAaccef0c05ed72dfa82b28d54c8e6410) IsValid() bool {
	for _, existing := range AllowedEnumAaccef0c05ed72dfa82b28d54c8e6410EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_aaccef0c05ed72dfa82b28d54c8e6410 value
func (v EnumAaccef0c05ed72dfa82b28d54c8e6410) Ptr() *EnumAaccef0c05ed72dfa82b28d54c8e6410 {
	return &v
}

type NullableEnumAaccef0c05ed72dfa82b28d54c8e6410 struct {
	value *EnumAaccef0c05ed72dfa82b28d54c8e6410
	isSet bool
}

func (v NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) Get() *EnumAaccef0c05ed72dfa82b28d54c8e6410 {
	return v.value
}

func (v *NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) Set(val *EnumAaccef0c05ed72dfa82b28d54c8e6410) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAaccef0c05ed72dfa82b28d54c8e6410(val *EnumAaccef0c05ed72dfa82b28d54c8e6410) *NullableEnumAaccef0c05ed72dfa82b28d54c8e6410 {
	return &NullableEnumAaccef0c05ed72dfa82b28d54c8e6410{value: val, isSet: true}
}

func (v NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAaccef0c05ed72dfa82b28d54c8e6410) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

