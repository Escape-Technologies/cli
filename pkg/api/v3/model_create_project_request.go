/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateProjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectRequest{}

// CreateProjectRequest struct for CreateProjectRequest
type CreateProjectRequest struct {
	// The name of the project
	Name string `json:"name"`
	// The slug of the project
	Slug string `json:"slug"`
	// An optional list of role bindings to create for the project
	Bindings []CreateProjectRequestBindingsInner `json:"bindings"`
	AdditionalProperties map[string]interface{}
}

type _CreateProjectRequest CreateProjectRequest

// NewCreateProjectRequest instantiates a new CreateProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectRequest(name string, slug string, bindings []CreateProjectRequestBindingsInner) *CreateProjectRequest {
	this := CreateProjectRequest{}
	this.Name = name
	this.Slug = slug
	this.Bindings = bindings
	return &this
}

// NewCreateProjectRequestWithDefaults instantiates a new CreateProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectRequestWithDefaults() *CreateProjectRequest {
	this := CreateProjectRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateProjectRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProjectRequest) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *CreateProjectRequest) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *CreateProjectRequest) SetSlug(v string) {
	o.Slug = v
}

// GetBindings returns the Bindings field value
func (o *CreateProjectRequest) GetBindings() []CreateProjectRequestBindingsInner {
	if o == nil {
		var ret []CreateProjectRequestBindingsInner
		return ret
	}

	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetBindingsOk() ([]CreateProjectRequestBindingsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bindings, true
}

// SetBindings sets field value
func (o *CreateProjectRequest) SetBindings(v []CreateProjectRequestBindingsInner) {
	o.Bindings = v
}

func (o CreateProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	toSerialize["bindings"] = o.Bindings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateProjectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"slug",
		"bindings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProjectRequest := _CreateProjectRequest{}

	err = json.Unmarshal(data, &varCreateProjectRequest)

	if err != nil {
		return err
	}

	*o = CreateProjectRequest(varCreateProjectRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "bindings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateProjectRequest struct {
	value *CreateProjectRequest
	isSet bool
}

func (v NullableCreateProjectRequest) Get() *CreateProjectRequest {
	return v.value
}

func (v *NullableCreateProjectRequest) Set(val *CreateProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectRequest(val *CreateProjectRequest) *NullableCreateProjectRequest {
	return &NullableCreateProjectRequest{value: val, isSet: true}
}

func (v NullableCreateProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


