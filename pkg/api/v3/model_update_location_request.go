/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the UpdateLocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLocationRequest{}

// UpdateLocationRequest struct for UpdateLocationRequest
type UpdateLocationRequest struct {
	// The name of the location.
	Name *string `json:"name,omitempty"`
	// Whether the location is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The SSH public key of the location.
	SshPublicKey *string `json:"sshPublicKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLocationRequest UpdateLocationRequest

// NewUpdateLocationRequest instantiates a new UpdateLocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLocationRequest() *UpdateLocationRequest {
	this := UpdateLocationRequest{}
	return &this
}

// NewUpdateLocationRequestWithDefaults instantiates a new UpdateLocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLocationRequestWithDefaults() *UpdateLocationRequest {
	this := UpdateLocationRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLocationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateLocationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLocationRequest) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateLocationRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateLocationRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateLocationRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSshPublicKey returns the SshPublicKey field value if set, zero value otherwise.
func (o *UpdateLocationRequest) GetSshPublicKey() string {
	if o == nil || IsNil(o.SshPublicKey) {
		var ret string
		return ret
	}
	return *o.SshPublicKey
}

// GetSshPublicKeyOk returns a tuple with the SshPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetSshPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SshPublicKey) {
		return nil, false
	}
	return o.SshPublicKey, true
}

// HasSshPublicKey returns a boolean if a field has been set.
func (o *UpdateLocationRequest) HasSshPublicKey() bool {
	if o != nil && !IsNil(o.SshPublicKey) {
		return true
	}

	return false
}

// SetSshPublicKey gets a reference to the given string and assigns it to the SshPublicKey field.
func (o *UpdateLocationRequest) SetSshPublicKey(v string) {
	o.SshPublicKey = &v
}

func (o UpdateLocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SshPublicKey) {
		toSerialize["sshPublicKey"] = o.SshPublicKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLocationRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateLocationRequest := _UpdateLocationRequest{}

	err = json.Unmarshal(data, &varUpdateLocationRequest)

	if err != nil {
		return err
	}

	*o = UpdateLocationRequest(varUpdateLocationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "sshPublicKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLocationRequest struct {
	value *UpdateLocationRequest
	isSet bool
}

func (v NullableUpdateLocationRequest) Get() *UpdateLocationRequest {
	return v.value
}

func (v *NullableUpdateLocationRequest) Set(val *UpdateLocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLocationRequest(val *UpdateLocationRequest) *NullableUpdateLocationRequest {
	return &NullableUpdateLocationRequest{value: val, isSet: true}
}

func (v NullableUpdateLocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


