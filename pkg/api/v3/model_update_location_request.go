/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateLocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLocationRequest{}

// UpdateLocationRequest struct for UpdateLocationRequest
type UpdateLocationRequest struct {
	// The name of the location.
	Name string `json:"name"`
	// Whether the location is enabled.
	Enabled bool `json:"enabled"`
	// The SSH public key of the location.
	SshPublicKey string `json:"sshPublicKey"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLocationRequest UpdateLocationRequest

// NewUpdateLocationRequest instantiates a new UpdateLocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLocationRequest(name string, enabled bool, sshPublicKey string) *UpdateLocationRequest {
	this := UpdateLocationRequest{}
	this.Name = name
	this.Enabled = enabled
	this.SshPublicKey = sshPublicKey
	return &this
}

// NewUpdateLocationRequestWithDefaults instantiates a new UpdateLocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLocationRequestWithDefaults() *UpdateLocationRequest {
	this := UpdateLocationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateLocationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateLocationRequest) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *UpdateLocationRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UpdateLocationRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSshPublicKey returns the SshPublicKey field value
func (o *UpdateLocationRequest) GetSshPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshPublicKey
}

// GetSshPublicKeyOk returns a tuple with the SshPublicKey field value
// and a boolean to check if the value has been set.
func (o *UpdateLocationRequest) GetSshPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshPublicKey, true
}

// SetSshPublicKey sets field value
func (o *UpdateLocationRequest) SetSshPublicKey(v string) {
	o.SshPublicKey = v
}

func (o UpdateLocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["sshPublicKey"] = o.SshPublicKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"enabled",
		"sshPublicKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLocationRequest := _UpdateLocationRequest{}

	err = json.Unmarshal(data, &varUpdateLocationRequest)

	if err != nil {
		return err
	}

	*o = UpdateLocationRequest(varUpdateLocationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "sshPublicKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLocationRequest struct {
	value *UpdateLocationRequest
	isSet bool
}

func (v NullableUpdateLocationRequest) Get() *UpdateLocationRequest {
	return v.value
}

func (v *NullableUpdateLocationRequest) Set(val *UpdateLocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLocationRequest(val *UpdateLocationRequest) *NullableUpdateLocationRequest {
	return &NullableUpdateLocationRequest{value: val, isSet: true}
}

func (v NullableUpdateLocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


