/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum86a1dbd1e59066b43cae362cb77c7472 the model 'Enum86a1dbd1e59066b43cae362cb77c7472'
type Enum86a1dbd1e59066b43cae362cb77c7472 string

// List of Enum_86a1dbd1e59066b43cae362cb77c7472
const (
	ENUM86A1DBD1E59066B43CAE362CB77C7472_SSH Enum86a1dbd1e59066b43cae362cb77c7472 = "SSH"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_HTTP Enum86a1dbd1e59066b43cae362cb77c7472 = "HTTP"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_HTTP2 Enum86a1dbd1e59066b43cae362cb77c7472 = "HTTP2"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_HTTPS Enum86a1dbd1e59066b43cae362cb77c7472 = "HTTPS"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_PSQL Enum86a1dbd1e59066b43cae362cb77c7472 = "PSQL"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_MYSQL Enum86a1dbd1e59066b43cae362cb77c7472 = "MYSQL"
	ENUM86A1DBD1E59066B43CAE362CB77C7472_MSSQL Enum86a1dbd1e59066b43cae362cb77c7472 = "MSSQL"
)

// All allowed values of Enum86a1dbd1e59066b43cae362cb77c7472 enum
var AllowedEnum86a1dbd1e59066b43cae362cb77c7472EnumValues = []Enum86a1dbd1e59066b43cae362cb77c7472{
	"SSH",
	"HTTP",
	"HTTP2",
	"HTTPS",
	"PSQL",
	"MYSQL",
	"MSSQL",
}

func (v *Enum86a1dbd1e59066b43cae362cb77c7472) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum86a1dbd1e59066b43cae362cb77c7472(value)
	for _, existing := range AllowedEnum86a1dbd1e59066b43cae362cb77c7472EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum86a1dbd1e59066b43cae362cb77c7472", value)
}

// NewEnum86a1dbd1e59066b43cae362cb77c7472FromValue returns a pointer to a valid Enum86a1dbd1e59066b43cae362cb77c7472
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum86a1dbd1e59066b43cae362cb77c7472FromValue(v string) (*Enum86a1dbd1e59066b43cae362cb77c7472, error) {
	ev := Enum86a1dbd1e59066b43cae362cb77c7472(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum86a1dbd1e59066b43cae362cb77c7472: valid values are %v", v, AllowedEnum86a1dbd1e59066b43cae362cb77c7472EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum86a1dbd1e59066b43cae362cb77c7472) IsValid() bool {
	for _, existing := range AllowedEnum86a1dbd1e59066b43cae362cb77c7472EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_86a1dbd1e59066b43cae362cb77c7472 value
func (v Enum86a1dbd1e59066b43cae362cb77c7472) Ptr() *Enum86a1dbd1e59066b43cae362cb77c7472 {
	return &v
}

type NullableEnum86a1dbd1e59066b43cae362cb77c7472 struct {
	value *Enum86a1dbd1e59066b43cae362cb77c7472
	isSet bool
}

func (v NullableEnum86a1dbd1e59066b43cae362cb77c7472) Get() *Enum86a1dbd1e59066b43cae362cb77c7472 {
	return v.value
}

func (v *NullableEnum86a1dbd1e59066b43cae362cb77c7472) Set(val *Enum86a1dbd1e59066b43cae362cb77c7472) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum86a1dbd1e59066b43cae362cb77c7472) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum86a1dbd1e59066b43cae362cb77c7472) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum86a1dbd1e59066b43cae362cb77c7472(val *Enum86a1dbd1e59066b43cae362cb77c7472) *NullableEnum86a1dbd1e59066b43cae362cb77c7472 {
	return &NullableEnum86a1dbd1e59066b43cae362cb77c7472{value: val, isSet: true}
}

func (v NullableEnum86a1dbd1e59066b43cae362cb77c7472) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum86a1dbd1e59066b43cae362cb77c7472) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

