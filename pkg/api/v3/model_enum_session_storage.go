/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumSESSIONSTORAGE the model 'EnumSESSIONSTORAGE'
type EnumSESSIONSTORAGE string

// List of Enum_SESSION_STORAGE
const (
	ENUMSESSIONSTORAGE_SESSION_STORAGE EnumSESSIONSTORAGE = "session_storage"
)

// All allowed values of EnumSESSIONSTORAGE enum
var AllowedEnumSESSIONSTORAGEEnumValues = []EnumSESSIONSTORAGE{
	"session_storage",
}

func (v *EnumSESSIONSTORAGE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSESSIONSTORAGE(value)
	for _, existing := range AllowedEnumSESSIONSTORAGEEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumSESSIONSTORAGE", value)
}

// NewEnumSESSIONSTORAGEFromValue returns a pointer to a valid EnumSESSIONSTORAGE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSESSIONSTORAGEFromValue(v string) (*EnumSESSIONSTORAGE, error) {
	ev := EnumSESSIONSTORAGE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSESSIONSTORAGE: valid values are %v", v, AllowedEnumSESSIONSTORAGEEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSESSIONSTORAGE) IsValid() bool {
	for _, existing := range AllowedEnumSESSIONSTORAGEEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_SESSION_STORAGE value
func (v EnumSESSIONSTORAGE) Ptr() *EnumSESSIONSTORAGE {
	return &v
}

type NullableEnumSESSIONSTORAGE struct {
	value *EnumSESSIONSTORAGE
	isSet bool
}

func (v NullableEnumSESSIONSTORAGE) Get() *EnumSESSIONSTORAGE {
	return v.value
}

func (v *NullableEnumSESSIONSTORAGE) Set(val *EnumSESSIONSTORAGE) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSESSIONSTORAGE) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSESSIONSTORAGE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSESSIONSTORAGE(val *EnumSESSIONSTORAGE) *NullableEnumSESSIONSTORAGE {
	return &NullableEnumSESSIONSTORAGE{value: val, isSet: true}
}

func (v NullableEnumSESSIONSTORAGE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSESSIONSTORAGE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

