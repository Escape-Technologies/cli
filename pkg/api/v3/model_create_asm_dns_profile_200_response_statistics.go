/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateASMDNSProfile200ResponseStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateASMDNSProfile200ResponseStatistics{}

// CreateASMDNSProfile200ResponseStatistics struct for CreateASMDNSProfile200ResponseStatistics
type CreateASMDNSProfile200ResponseStatistics struct {
	Issues CreateASMDNSProfile200ResponseStatisticsIssues `json:"issues"`
	AdditionalProperties map[string]interface{}
}

type _CreateASMDNSProfile200ResponseStatistics CreateASMDNSProfile200ResponseStatistics

// NewCreateASMDNSProfile200ResponseStatistics instantiates a new CreateASMDNSProfile200ResponseStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateASMDNSProfile200ResponseStatistics(issues CreateASMDNSProfile200ResponseStatisticsIssues) *CreateASMDNSProfile200ResponseStatistics {
	this := CreateASMDNSProfile200ResponseStatistics{}
	this.Issues = issues
	return &this
}

// NewCreateASMDNSProfile200ResponseStatisticsWithDefaults instantiates a new CreateASMDNSProfile200ResponseStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateASMDNSProfile200ResponseStatisticsWithDefaults() *CreateASMDNSProfile200ResponseStatistics {
	this := CreateASMDNSProfile200ResponseStatistics{}
	return &this
}

// GetIssues returns the Issues field value
func (o *CreateASMDNSProfile200ResponseStatistics) GetIssues() CreateASMDNSProfile200ResponseStatisticsIssues {
	if o == nil {
		var ret CreateASMDNSProfile200ResponseStatisticsIssues
		return ret
	}

	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfile200ResponseStatistics) GetIssuesOk() (*CreateASMDNSProfile200ResponseStatisticsIssues, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issues, true
}

// SetIssues sets field value
func (o *CreateASMDNSProfile200ResponseStatistics) SetIssues(v CreateASMDNSProfile200ResponseStatisticsIssues) {
	o.Issues = v
}

func (o CreateASMDNSProfile200ResponseStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateASMDNSProfile200ResponseStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issues"] = o.Issues

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateASMDNSProfile200ResponseStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateASMDNSProfile200ResponseStatistics := _CreateASMDNSProfile200ResponseStatistics{}

	err = json.Unmarshal(data, &varCreateASMDNSProfile200ResponseStatistics)

	if err != nil {
		return err
	}

	*o = CreateASMDNSProfile200ResponseStatistics(varCreateASMDNSProfile200ResponseStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "issues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateASMDNSProfile200ResponseStatistics struct {
	value *CreateASMDNSProfile200ResponseStatistics
	isSet bool
}

func (v NullableCreateASMDNSProfile200ResponseStatistics) Get() *CreateASMDNSProfile200ResponseStatistics {
	return v.value
}

func (v *NullableCreateASMDNSProfile200ResponseStatistics) Set(val *CreateASMDNSProfile200ResponseStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateASMDNSProfile200ResponseStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateASMDNSProfile200ResponseStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateASMDNSProfile200ResponseStatistics(val *CreateASMDNSProfile200ResponseStatistics) *NullableCreateASMDNSProfile200ResponseStatistics {
	return &NullableCreateASMDNSProfile200ResponseStatistics{value: val, isSet: true}
}

func (v NullableCreateASMDNSProfile200ResponseStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateASMDNSProfile200ResponseStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


