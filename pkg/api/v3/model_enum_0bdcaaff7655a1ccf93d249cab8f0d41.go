/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum0bdcaaff7655a1ccf93d249cab8f0d41 the model 'Enum0bdcaaff7655a1ccf93d249cab8f0d41'
type Enum0bdcaaff7655a1ccf93d249cab8f0d41 string

// List of Enum_0bdcaaff7655a1ccf93d249cab8f0d41
const (
	ENUM0BDCAAFF7655A1CCF93D249CAB8F0D41_DEVELOPMENT Enum0bdcaaff7655a1ccf93d249cab8f0d41 = "DEVELOPMENT"
	ENUM0BDCAAFF7655A1CCF93D249CAB8F0D41_STAGING Enum0bdcaaff7655a1ccf93d249cab8f0d41 = "STAGING"
	ENUM0BDCAAFF7655A1CCF93D249CAB8F0D41_PRODUCTION Enum0bdcaaff7655a1ccf93d249cab8f0d41 = "PRODUCTION"
)

// All allowed values of Enum0bdcaaff7655a1ccf93d249cab8f0d41 enum
var AllowedEnum0bdcaaff7655a1ccf93d249cab8f0d41EnumValues = []Enum0bdcaaff7655a1ccf93d249cab8f0d41{
	"DEVELOPMENT",
	"STAGING",
	"PRODUCTION",
}

func (v *Enum0bdcaaff7655a1ccf93d249cab8f0d41) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum0bdcaaff7655a1ccf93d249cab8f0d41(value)
	for _, existing := range AllowedEnum0bdcaaff7655a1ccf93d249cab8f0d41EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum0bdcaaff7655a1ccf93d249cab8f0d41", value)
}

// NewEnum0bdcaaff7655a1ccf93d249cab8f0d41FromValue returns a pointer to a valid Enum0bdcaaff7655a1ccf93d249cab8f0d41
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum0bdcaaff7655a1ccf93d249cab8f0d41FromValue(v string) (*Enum0bdcaaff7655a1ccf93d249cab8f0d41, error) {
	ev := Enum0bdcaaff7655a1ccf93d249cab8f0d41(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum0bdcaaff7655a1ccf93d249cab8f0d41: valid values are %v", v, AllowedEnum0bdcaaff7655a1ccf93d249cab8f0d41EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum0bdcaaff7655a1ccf93d249cab8f0d41) IsValid() bool {
	for _, existing := range AllowedEnum0bdcaaff7655a1ccf93d249cab8f0d41EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_0bdcaaff7655a1ccf93d249cab8f0d41 value
func (v Enum0bdcaaff7655a1ccf93d249cab8f0d41) Ptr() *Enum0bdcaaff7655a1ccf93d249cab8f0d41 {
	return &v
}

type NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41 struct {
	value *Enum0bdcaaff7655a1ccf93d249cab8f0d41
	isSet bool
}

func (v NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) Get() *Enum0bdcaaff7655a1ccf93d249cab8f0d41 {
	return v.value
}

func (v *NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) Set(val *Enum0bdcaaff7655a1ccf93d249cab8f0d41) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum0bdcaaff7655a1ccf93d249cab8f0d41(val *Enum0bdcaaff7655a1ccf93d249cab8f0d41) *NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41 {
	return &NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41{value: val, isSet: true}
}

func (v NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum0bdcaaff7655a1ccf93d249cab8f0d41) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

