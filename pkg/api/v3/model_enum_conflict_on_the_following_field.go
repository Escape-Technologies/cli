/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumCONFLICTONTHEFOLLOWINGFIELD the model 'EnumCONFLICTONTHEFOLLOWINGFIELD'
type EnumCONFLICTONTHEFOLLOWINGFIELD string

// List of Enum_CONFLICT_ON_THE_FOLLOWING_FIELD
const (
	ENUMCONFLICTONTHEFOLLOWINGFIELD_CONFLICT_ON_THE_FOLLOWING_FIELD EnumCONFLICTONTHEFOLLOWINGFIELD = "Conflict on the following field"
)

// All allowed values of EnumCONFLICTONTHEFOLLOWINGFIELD enum
var AllowedEnumCONFLICTONTHEFOLLOWINGFIELDEnumValues = []EnumCONFLICTONTHEFOLLOWINGFIELD{
	"Conflict on the following field",
}

func (v *EnumCONFLICTONTHEFOLLOWINGFIELD) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCONFLICTONTHEFOLLOWINGFIELD(value)
	for _, existing := range AllowedEnumCONFLICTONTHEFOLLOWINGFIELDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumCONFLICTONTHEFOLLOWINGFIELD", value)
}

// NewEnumCONFLICTONTHEFOLLOWINGFIELDFromValue returns a pointer to a valid EnumCONFLICTONTHEFOLLOWINGFIELD
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCONFLICTONTHEFOLLOWINGFIELDFromValue(v string) (*EnumCONFLICTONTHEFOLLOWINGFIELD, error) {
	ev := EnumCONFLICTONTHEFOLLOWINGFIELD(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCONFLICTONTHEFOLLOWINGFIELD: valid values are %v", v, AllowedEnumCONFLICTONTHEFOLLOWINGFIELDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCONFLICTONTHEFOLLOWINGFIELD) IsValid() bool {
	for _, existing := range AllowedEnumCONFLICTONTHEFOLLOWINGFIELDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_CONFLICT_ON_THE_FOLLOWING_FIELD value
func (v EnumCONFLICTONTHEFOLLOWINGFIELD) Ptr() *EnumCONFLICTONTHEFOLLOWINGFIELD {
	return &v
}

type NullableEnumCONFLICTONTHEFOLLOWINGFIELD struct {
	value *EnumCONFLICTONTHEFOLLOWINGFIELD
	isSet bool
}

func (v NullableEnumCONFLICTONTHEFOLLOWINGFIELD) Get() *EnumCONFLICTONTHEFOLLOWINGFIELD {
	return v.value
}

func (v *NullableEnumCONFLICTONTHEFOLLOWINGFIELD) Set(val *EnumCONFLICTONTHEFOLLOWINGFIELD) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCONFLICTONTHEFOLLOWINGFIELD) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCONFLICTONTHEFOLLOWINGFIELD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCONFLICTONTHEFOLLOWINGFIELD(val *EnumCONFLICTONTHEFOLLOWINGFIELD) *NullableEnumCONFLICTONTHEFOLLOWINGFIELD {
	return &NullableEnumCONFLICTONTHEFOLLOWINGFIELD{value: val, isSet: true}
}

func (v NullableEnumCONFLICTONTHEFOLLOWINGFIELD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCONFLICTONTHEFOLLOWINGFIELD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

