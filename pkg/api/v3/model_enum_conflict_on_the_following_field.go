/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMCONFLICTONTHEFOLLOWINGFIELD the model 'ENUMCONFLICTONTHEFOLLOWINGFIELD'
type ENUMCONFLICTONTHEFOLLOWINGFIELD string

// List of ENUM_CONFLICT_ON_THE_FOLLOWING_FIELD
const (
	ENUMCONFLICTONTHEFOLLOWINGFIELD_CONFLICT_ON_THE_FOLLOWING_FIELD ENUMCONFLICTONTHEFOLLOWINGFIELD = "Conflict on the following field"
)

// All allowed values of ENUMCONFLICTONTHEFOLLOWINGFIELD enum
var AllowedENUMCONFLICTONTHEFOLLOWINGFIELDEnumValues = []ENUMCONFLICTONTHEFOLLOWINGFIELD{
	"Conflict on the following field",
}

func (v *ENUMCONFLICTONTHEFOLLOWINGFIELD) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMCONFLICTONTHEFOLLOWINGFIELD(value)
	for _, existing := range AllowedENUMCONFLICTONTHEFOLLOWINGFIELDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMCONFLICTONTHEFOLLOWINGFIELD", value)
}

// NewENUMCONFLICTONTHEFOLLOWINGFIELDFromValue returns a pointer to a valid ENUMCONFLICTONTHEFOLLOWINGFIELD
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMCONFLICTONTHEFOLLOWINGFIELDFromValue(v string) (*ENUMCONFLICTONTHEFOLLOWINGFIELD, error) {
	ev := ENUMCONFLICTONTHEFOLLOWINGFIELD(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMCONFLICTONTHEFOLLOWINGFIELD: valid values are %v", v, AllowedENUMCONFLICTONTHEFOLLOWINGFIELDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMCONFLICTONTHEFOLLOWINGFIELD) IsValid() bool {
	for _, existing := range AllowedENUMCONFLICTONTHEFOLLOWINGFIELDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_CONFLICT_ON_THE_FOLLOWING_FIELD value
func (v ENUMCONFLICTONTHEFOLLOWINGFIELD) Ptr() *ENUMCONFLICTONTHEFOLLOWINGFIELD {
	return &v
}

type NullableENUMCONFLICTONTHEFOLLOWINGFIELD struct {
	value *ENUMCONFLICTONTHEFOLLOWINGFIELD
	isSet bool
}

func (v NullableENUMCONFLICTONTHEFOLLOWINGFIELD) Get() *ENUMCONFLICTONTHEFOLLOWINGFIELD {
	return v.value
}

func (v *NullableENUMCONFLICTONTHEFOLLOWINGFIELD) Set(val *ENUMCONFLICTONTHEFOLLOWINGFIELD) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMCONFLICTONTHEFOLLOWINGFIELD) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMCONFLICTONTHEFOLLOWINGFIELD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMCONFLICTONTHEFOLLOWINGFIELD(val *ENUMCONFLICTONTHEFOLLOWINGFIELD) *NullableENUMCONFLICTONTHEFOLLOWINGFIELD {
	return &NullableENUMCONFLICTONTHEFOLLOWINGFIELD{value: val, isSet: true}
}

func (v NullableENUMCONFLICTONTHEFOLLOWINGFIELD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMCONFLICTONTHEFOLLOWINGFIELD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

