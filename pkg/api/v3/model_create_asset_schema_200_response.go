/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)


// CreateAssetSchema200Response struct for CreateAssetSchema200Response
type CreateAssetSchema200Response struct {
	BurpsuiteExport *BurpsuiteExport
	GraphQLSchema *GraphQLSchema
	HarExport *HarExport
	Insomnia *Insomnia
	OpenAPI *OpenAPI
	PostmanCollection *PostmanCollection
	WPJSON *WPJSON
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateAssetSchema200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BurpsuiteExport
	err = json.Unmarshal(data, &dst.BurpsuiteExport);
	if err == nil {
		jsonBurpsuiteExport, _ := json.Marshal(dst.BurpsuiteExport)
		if string(jsonBurpsuiteExport) == "{}" { // empty struct
			dst.BurpsuiteExport = nil
		} else {
			return nil // data stored in dst.BurpsuiteExport, return on the first match
		}
	} else {
		dst.BurpsuiteExport = nil
	}

	// try to unmarshal JSON data into GraphQLSchema
	err = json.Unmarshal(data, &dst.GraphQLSchema);
	if err == nil {
		jsonGraphQLSchema, _ := json.Marshal(dst.GraphQLSchema)
		if string(jsonGraphQLSchema) == "{}" { // empty struct
			dst.GraphQLSchema = nil
		} else {
			return nil // data stored in dst.GraphQLSchema, return on the first match
		}
	} else {
		dst.GraphQLSchema = nil
	}

	// try to unmarshal JSON data into HarExport
	err = json.Unmarshal(data, &dst.HarExport);
	if err == nil {
		jsonHarExport, _ := json.Marshal(dst.HarExport)
		if string(jsonHarExport) == "{}" { // empty struct
			dst.HarExport = nil
		} else {
			return nil // data stored in dst.HarExport, return on the first match
		}
	} else {
		dst.HarExport = nil
	}

	// try to unmarshal JSON data into Insomnia
	err = json.Unmarshal(data, &dst.Insomnia);
	if err == nil {
		jsonInsomnia, _ := json.Marshal(dst.Insomnia)
		if string(jsonInsomnia) == "{}" { // empty struct
			dst.Insomnia = nil
		} else {
			return nil // data stored in dst.Insomnia, return on the first match
		}
	} else {
		dst.Insomnia = nil
	}

	// try to unmarshal JSON data into OpenAPI
	err = json.Unmarshal(data, &dst.OpenAPI);
	if err == nil {
		jsonOpenAPI, _ := json.Marshal(dst.OpenAPI)
		if string(jsonOpenAPI) == "{}" { // empty struct
			dst.OpenAPI = nil
		} else {
			return nil // data stored in dst.OpenAPI, return on the first match
		}
	} else {
		dst.OpenAPI = nil
	}

	// try to unmarshal JSON data into PostmanCollection
	err = json.Unmarshal(data, &dst.PostmanCollection);
	if err == nil {
		jsonPostmanCollection, _ := json.Marshal(dst.PostmanCollection)
		if string(jsonPostmanCollection) == "{}" { // empty struct
			dst.PostmanCollection = nil
		} else {
			return nil // data stored in dst.PostmanCollection, return on the first match
		}
	} else {
		dst.PostmanCollection = nil
	}

	// try to unmarshal JSON data into WPJSON
	err = json.Unmarshal(data, &dst.WPJSON);
	if err == nil {
		jsonWPJSON, _ := json.Marshal(dst.WPJSON)
		if string(jsonWPJSON) == "{}" { // empty struct
			dst.WPJSON = nil
		} else {
			return nil // data stored in dst.WPJSON, return on the first match
		}
	} else {
		dst.WPJSON = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateAssetSchema200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAssetSchema200Response) MarshalJSON() ([]byte, error) {
	if src.BurpsuiteExport != nil {
		return json.Marshal(&src.BurpsuiteExport)
	}

	if src.GraphQLSchema != nil {
		return json.Marshal(&src.GraphQLSchema)
	}

	if src.HarExport != nil {
		return json.Marshal(&src.HarExport)
	}

	if src.Insomnia != nil {
		return json.Marshal(&src.Insomnia)
	}

	if src.OpenAPI != nil {
		return json.Marshal(&src.OpenAPI)
	}

	if src.PostmanCollection != nil {
		return json.Marshal(&src.PostmanCollection)
	}

	if src.WPJSON != nil {
		return json.Marshal(&src.WPJSON)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateAssetSchema200Response struct {
	value *CreateAssetSchema200Response
	isSet bool
}

func (v NullableCreateAssetSchema200Response) Get() *CreateAssetSchema200Response {
	return v.value
}

func (v *NullableCreateAssetSchema200Response) Set(val *CreateAssetSchema200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetSchema200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetSchema200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetSchema200Response(val *CreateAssetSchema200Response) *NullableCreateAssetSchema200Response {
	return &NullableCreateAssetSchema200Response{value: val, isSet: true}
}

func (v NullableCreateAssetSchema200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetSchema200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


