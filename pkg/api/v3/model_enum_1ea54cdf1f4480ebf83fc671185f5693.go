/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum1ea54cdf1f4480ebf83fc671185f5693 the model 'Enum1ea54cdf1f4480ebf83fc671185f5693'
type Enum1ea54cdf1f4480ebf83fc671185f5693 string

// List of Enum_1ea54cdf1f4480ebf83fc671185f5693
const (
	ENUM1EA54CDF1F4480EBF83FC671185F5693_CRITICAL_FINDING Enum1ea54cdf1f4480ebf83fc671185f5693 = "CRITICAL_FINDING"
	ENUM1EA54CDF1F4480EBF83FC671185F5693_EXPOSED Enum1ea54cdf1f4480ebf83fc671185f5693 = "EXPOSED"
	ENUM1EA54CDF1F4480EBF83FC671185F5693_OPEN_SCHEMA Enum1ea54cdf1f4480ebf83fc671185f5693 = "OPEN_SCHEMA"
	ENUM1EA54CDF1F4480EBF83FC671185F5693_PROD_ONLY_MODE Enum1ea54cdf1f4480ebf83fc671185f5693 = "PROD_ONLY_MODE"
	ENUM1EA54CDF1F4480EBF83FC671185F5693_SENSITIVE_DATA Enum1ea54cdf1f4480ebf83fc671185f5693 = "SENSITIVE_DATA"
	ENUM1EA54CDF1F4480EBF83FC671185F5693_UNAUTHENTICATED Enum1ea54cdf1f4480ebf83fc671185f5693 = "UNAUTHENTICATED"
)

// All allowed values of Enum1ea54cdf1f4480ebf83fc671185f5693 enum
var AllowedEnum1ea54cdf1f4480ebf83fc671185f5693EnumValues = []Enum1ea54cdf1f4480ebf83fc671185f5693{
	"CRITICAL_FINDING",
	"EXPOSED",
	"OPEN_SCHEMA",
	"PROD_ONLY_MODE",
	"SENSITIVE_DATA",
	"UNAUTHENTICATED",
}

func (v *Enum1ea54cdf1f4480ebf83fc671185f5693) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum1ea54cdf1f4480ebf83fc671185f5693(value)
	for _, existing := range AllowedEnum1ea54cdf1f4480ebf83fc671185f5693EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum1ea54cdf1f4480ebf83fc671185f5693", value)
}

// NewEnum1ea54cdf1f4480ebf83fc671185f5693FromValue returns a pointer to a valid Enum1ea54cdf1f4480ebf83fc671185f5693
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum1ea54cdf1f4480ebf83fc671185f5693FromValue(v string) (*Enum1ea54cdf1f4480ebf83fc671185f5693, error) {
	ev := Enum1ea54cdf1f4480ebf83fc671185f5693(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum1ea54cdf1f4480ebf83fc671185f5693: valid values are %v", v, AllowedEnum1ea54cdf1f4480ebf83fc671185f5693EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum1ea54cdf1f4480ebf83fc671185f5693) IsValid() bool {
	for _, existing := range AllowedEnum1ea54cdf1f4480ebf83fc671185f5693EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_1ea54cdf1f4480ebf83fc671185f5693 value
func (v Enum1ea54cdf1f4480ebf83fc671185f5693) Ptr() *Enum1ea54cdf1f4480ebf83fc671185f5693 {
	return &v
}

type NullableEnum1ea54cdf1f4480ebf83fc671185f5693 struct {
	value *Enum1ea54cdf1f4480ebf83fc671185f5693
	isSet bool
}

func (v NullableEnum1ea54cdf1f4480ebf83fc671185f5693) Get() *Enum1ea54cdf1f4480ebf83fc671185f5693 {
	return v.value
}

func (v *NullableEnum1ea54cdf1f4480ebf83fc671185f5693) Set(val *Enum1ea54cdf1f4480ebf83fc671185f5693) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum1ea54cdf1f4480ebf83fc671185f5693) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum1ea54cdf1f4480ebf83fc671185f5693) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum1ea54cdf1f4480ebf83fc671185f5693(val *Enum1ea54cdf1f4480ebf83fc671185f5693) *NullableEnum1ea54cdf1f4480ebf83fc671185f5693 {
	return &NullableEnum1ea54cdf1f4480ebf83fc671185f5693{value: val, isSet: true}
}

func (v NullableEnum1ea54cdf1f4480ebf83fc671185f5693) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum1ea54cdf1f4480ebf83fc671185f5693) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

