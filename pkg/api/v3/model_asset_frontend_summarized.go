/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the AssetFrontendSummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetFrontendSummarized{}

// AssetFrontendSummarized Summarized information about an asset frontend
type AssetFrontendSummarized struct {
	// The url of the asset frontend
	Url string `json:"url"`
	// The type of the asset frontend
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _AssetFrontendSummarized AssetFrontendSummarized

// NewAssetFrontendSummarized instantiates a new AssetFrontendSummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetFrontendSummarized(url string, type_ string) *AssetFrontendSummarized {
	this := AssetFrontendSummarized{}
	this.Url = url
	this.Type = type_
	return &this
}

// NewAssetFrontendSummarizedWithDefaults instantiates a new AssetFrontendSummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetFrontendSummarizedWithDefaults() *AssetFrontendSummarized {
	this := AssetFrontendSummarized{}
	return &this
}

// GetUrl returns the Url field value
func (o *AssetFrontendSummarized) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AssetFrontendSummarized) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AssetFrontendSummarized) SetUrl(v string) {
	o.Url = v
}

// GetType returns the Type field value
func (o *AssetFrontendSummarized) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssetFrontendSummarized) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssetFrontendSummarized) SetType(v string) {
	o.Type = v
}

func (o AssetFrontendSummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetFrontendSummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AssetFrontendSummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetFrontendSummarized := _AssetFrontendSummarized{}

	err = json.Unmarshal(data, &varAssetFrontendSummarized)

	if err != nil {
		return err
	}

	*o = AssetFrontendSummarized(varAssetFrontendSummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetFrontendSummarized struct {
	value *AssetFrontendSummarized
	isSet bool
}

func (v NullableAssetFrontendSummarized) Get() *AssetFrontendSummarized {
	return v.value
}

func (v *NullableAssetFrontendSummarized) Set(val *AssetFrontendSummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetFrontendSummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetFrontendSummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetFrontendSummarized(val *AssetFrontendSummarized) *NullableAssetFrontendSummarized {
	return &NullableAssetFrontendSummarized{value: val, isSet: true}
}

func (v NullableAssetFrontendSummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetFrontendSummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


