/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMCLICK the model 'ENUMCLICK'
type ENUMCLICK string

// List of ENUM_CLICK
const (
	ENUMCLICK_CLICK ENUMCLICK = "click"
)

// All allowed values of ENUMCLICK enum
var AllowedENUMCLICKEnumValues = []ENUMCLICK{
	"click",
}

func (v *ENUMCLICK) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMCLICK(value)
	for _, existing := range AllowedENUMCLICKEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMCLICK", value)
}

// NewENUMCLICKFromValue returns a pointer to a valid ENUMCLICK
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMCLICKFromValue(v string) (*ENUMCLICK, error) {
	ev := ENUMCLICK(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMCLICK: valid values are %v", v, AllowedENUMCLICKEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMCLICK) IsValid() bool {
	for _, existing := range AllowedENUMCLICKEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_CLICK value
func (v ENUMCLICK) Ptr() *ENUMCLICK {
	return &v
}

type NullableENUMCLICK struct {
	value *ENUMCLICK
	isSet bool
}

func (v NullableENUMCLICK) Get() *ENUMCLICK {
	return v.value
}

func (v *NullableENUMCLICK) Set(val *ENUMCLICK) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMCLICK) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMCLICK) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMCLICK(val *ENUMCLICK) *NullableENUMCLICK {
	return &NullableENUMCLICK{value: val, isSet: true}
}

func (v NullableENUMCLICK) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMCLICK) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

