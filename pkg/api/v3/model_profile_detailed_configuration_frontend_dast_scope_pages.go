/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationFrontendDastScopePages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationFrontendDastScopePages{}

// ProfileDetailedConfigurationFrontendDastScopePages struct for ProfileDetailedConfigurationFrontendDastScopePages
type ProfileDetailedConfigurationFrontendDastScopePages struct {
	AllowlistUrlPatterns []string `json:"allowlist_url_patterns,omitempty"`
	BlocklistPatterns []string `json:"blocklist_patterns,omitempty"`
	AllowlistElementSelectors []string `json:"allowlist_element_selectors,omitempty"`
	BlocklistElementSelectors []string `json:"blocklist_element_selectors,omitempty"`
	MaxUniqueValuesPerQueryParam *float32 `json:"max_unique_values_per_query_param,omitempty"`
	MaxUniqueFragmentsPerPage *float32 `json:"max_unique_fragments_per_page,omitempty"`
	MaxParameterizedUrlVariations *float32 `json:"max_parameterized_url_variations,omitempty"`
	OnlyInscopeCrawlingLogs *bool `json:"only_inscope_crawling_logs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationFrontendDastScopePages ProfileDetailedConfigurationFrontendDastScopePages

// NewProfileDetailedConfigurationFrontendDastScopePages instantiates a new ProfileDetailedConfigurationFrontendDastScopePages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationFrontendDastScopePages() *ProfileDetailedConfigurationFrontendDastScopePages {
	this := ProfileDetailedConfigurationFrontendDastScopePages{}
	return &this
}

// NewProfileDetailedConfigurationFrontendDastScopePagesWithDefaults instantiates a new ProfileDetailedConfigurationFrontendDastScopePages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationFrontendDastScopePagesWithDefaults() *ProfileDetailedConfigurationFrontendDastScopePages {
	this := ProfileDetailedConfigurationFrontendDastScopePages{}
	return &this
}

// GetAllowlistUrlPatterns returns the AllowlistUrlPatterns field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetAllowlistUrlPatterns() []string {
	if o == nil || IsNil(o.AllowlistUrlPatterns) {
		var ret []string
		return ret
	}
	return o.AllowlistUrlPatterns
}

// GetAllowlistUrlPatternsOk returns a tuple with the AllowlistUrlPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetAllowlistUrlPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowlistUrlPatterns) {
		return nil, false
	}
	return o.AllowlistUrlPatterns, true
}

// HasAllowlistUrlPatterns returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasAllowlistUrlPatterns() bool {
	if o != nil && !IsNil(o.AllowlistUrlPatterns) {
		return true
	}

	return false
}

// SetAllowlistUrlPatterns gets a reference to the given []string and assigns it to the AllowlistUrlPatterns field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetAllowlistUrlPatterns(v []string) {
	o.AllowlistUrlPatterns = v
}

// GetBlocklistPatterns returns the BlocklistPatterns field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetBlocklistPatterns() []string {
	if o == nil || IsNil(o.BlocklistPatterns) {
		var ret []string
		return ret
	}
	return o.BlocklistPatterns
}

// GetBlocklistPatternsOk returns a tuple with the BlocklistPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetBlocklistPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlocklistPatterns) {
		return nil, false
	}
	return o.BlocklistPatterns, true
}

// HasBlocklistPatterns returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasBlocklistPatterns() bool {
	if o != nil && !IsNil(o.BlocklistPatterns) {
		return true
	}

	return false
}

// SetBlocklistPatterns gets a reference to the given []string and assigns it to the BlocklistPatterns field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetBlocklistPatterns(v []string) {
	o.BlocklistPatterns = v
}

// GetAllowlistElementSelectors returns the AllowlistElementSelectors field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetAllowlistElementSelectors() []string {
	if o == nil || IsNil(o.AllowlistElementSelectors) {
		var ret []string
		return ret
	}
	return o.AllowlistElementSelectors
}

// GetAllowlistElementSelectorsOk returns a tuple with the AllowlistElementSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetAllowlistElementSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowlistElementSelectors) {
		return nil, false
	}
	return o.AllowlistElementSelectors, true
}

// HasAllowlistElementSelectors returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasAllowlistElementSelectors() bool {
	if o != nil && !IsNil(o.AllowlistElementSelectors) {
		return true
	}

	return false
}

// SetAllowlistElementSelectors gets a reference to the given []string and assigns it to the AllowlistElementSelectors field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetAllowlistElementSelectors(v []string) {
	o.AllowlistElementSelectors = v
}

// GetBlocklistElementSelectors returns the BlocklistElementSelectors field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetBlocklistElementSelectors() []string {
	if o == nil || IsNil(o.BlocklistElementSelectors) {
		var ret []string
		return ret
	}
	return o.BlocklistElementSelectors
}

// GetBlocklistElementSelectorsOk returns a tuple with the BlocklistElementSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetBlocklistElementSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlocklistElementSelectors) {
		return nil, false
	}
	return o.BlocklistElementSelectors, true
}

// HasBlocklistElementSelectors returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasBlocklistElementSelectors() bool {
	if o != nil && !IsNil(o.BlocklistElementSelectors) {
		return true
	}

	return false
}

// SetBlocklistElementSelectors gets a reference to the given []string and assigns it to the BlocklistElementSelectors field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetBlocklistElementSelectors(v []string) {
	o.BlocklistElementSelectors = v
}

// GetMaxUniqueValuesPerQueryParam returns the MaxUniqueValuesPerQueryParam field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxUniqueValuesPerQueryParam() float32 {
	if o == nil || IsNil(o.MaxUniqueValuesPerQueryParam) {
		var ret float32
		return ret
	}
	return *o.MaxUniqueValuesPerQueryParam
}

// GetMaxUniqueValuesPerQueryParamOk returns a tuple with the MaxUniqueValuesPerQueryParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxUniqueValuesPerQueryParamOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxUniqueValuesPerQueryParam) {
		return nil, false
	}
	return o.MaxUniqueValuesPerQueryParam, true
}

// HasMaxUniqueValuesPerQueryParam returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasMaxUniqueValuesPerQueryParam() bool {
	if o != nil && !IsNil(o.MaxUniqueValuesPerQueryParam) {
		return true
	}

	return false
}

// SetMaxUniqueValuesPerQueryParam gets a reference to the given float32 and assigns it to the MaxUniqueValuesPerQueryParam field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetMaxUniqueValuesPerQueryParam(v float32) {
	o.MaxUniqueValuesPerQueryParam = &v
}

// GetMaxUniqueFragmentsPerPage returns the MaxUniqueFragmentsPerPage field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxUniqueFragmentsPerPage() float32 {
	if o == nil || IsNil(o.MaxUniqueFragmentsPerPage) {
		var ret float32
		return ret
	}
	return *o.MaxUniqueFragmentsPerPage
}

// GetMaxUniqueFragmentsPerPageOk returns a tuple with the MaxUniqueFragmentsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxUniqueFragmentsPerPageOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxUniqueFragmentsPerPage) {
		return nil, false
	}
	return o.MaxUniqueFragmentsPerPage, true
}

// HasMaxUniqueFragmentsPerPage returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasMaxUniqueFragmentsPerPage() bool {
	if o != nil && !IsNil(o.MaxUniqueFragmentsPerPage) {
		return true
	}

	return false
}

// SetMaxUniqueFragmentsPerPage gets a reference to the given float32 and assigns it to the MaxUniqueFragmentsPerPage field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetMaxUniqueFragmentsPerPage(v float32) {
	o.MaxUniqueFragmentsPerPage = &v
}

// GetMaxParameterizedUrlVariations returns the MaxParameterizedUrlVariations field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxParameterizedUrlVariations() float32 {
	if o == nil || IsNil(o.MaxParameterizedUrlVariations) {
		var ret float32
		return ret
	}
	return *o.MaxParameterizedUrlVariations
}

// GetMaxParameterizedUrlVariationsOk returns a tuple with the MaxParameterizedUrlVariations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetMaxParameterizedUrlVariationsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxParameterizedUrlVariations) {
		return nil, false
	}
	return o.MaxParameterizedUrlVariations, true
}

// HasMaxParameterizedUrlVariations returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasMaxParameterizedUrlVariations() bool {
	if o != nil && !IsNil(o.MaxParameterizedUrlVariations) {
		return true
	}

	return false
}

// SetMaxParameterizedUrlVariations gets a reference to the given float32 and assigns it to the MaxParameterizedUrlVariations field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetMaxParameterizedUrlVariations(v float32) {
	o.MaxParameterizedUrlVariations = &v
}

// GetOnlyInscopeCrawlingLogs returns the OnlyInscopeCrawlingLogs field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetOnlyInscopeCrawlingLogs() bool {
	if o == nil || IsNil(o.OnlyInscopeCrawlingLogs) {
		var ret bool
		return ret
	}
	return *o.OnlyInscopeCrawlingLogs
}

// GetOnlyInscopeCrawlingLogsOk returns a tuple with the OnlyInscopeCrawlingLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) GetOnlyInscopeCrawlingLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyInscopeCrawlingLogs) {
		return nil, false
	}
	return o.OnlyInscopeCrawlingLogs, true
}

// HasOnlyInscopeCrawlingLogs returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) HasOnlyInscopeCrawlingLogs() bool {
	if o != nil && !IsNil(o.OnlyInscopeCrawlingLogs) {
		return true
	}

	return false
}

// SetOnlyInscopeCrawlingLogs gets a reference to the given bool and assigns it to the OnlyInscopeCrawlingLogs field.
func (o *ProfileDetailedConfigurationFrontendDastScopePages) SetOnlyInscopeCrawlingLogs(v bool) {
	o.OnlyInscopeCrawlingLogs = &v
}

func (o ProfileDetailedConfigurationFrontendDastScopePages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationFrontendDastScopePages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowlistUrlPatterns) {
		toSerialize["allowlist_url_patterns"] = o.AllowlistUrlPatterns
	}
	if !IsNil(o.BlocklistPatterns) {
		toSerialize["blocklist_patterns"] = o.BlocklistPatterns
	}
	if !IsNil(o.AllowlistElementSelectors) {
		toSerialize["allowlist_element_selectors"] = o.AllowlistElementSelectors
	}
	if !IsNil(o.BlocklistElementSelectors) {
		toSerialize["blocklist_element_selectors"] = o.BlocklistElementSelectors
	}
	if !IsNil(o.MaxUniqueValuesPerQueryParam) {
		toSerialize["max_unique_values_per_query_param"] = o.MaxUniqueValuesPerQueryParam
	}
	if !IsNil(o.MaxUniqueFragmentsPerPage) {
		toSerialize["max_unique_fragments_per_page"] = o.MaxUniqueFragmentsPerPage
	}
	if !IsNil(o.MaxParameterizedUrlVariations) {
		toSerialize["max_parameterized_url_variations"] = o.MaxParameterizedUrlVariations
	}
	if !IsNil(o.OnlyInscopeCrawlingLogs) {
		toSerialize["only_inscope_crawling_logs"] = o.OnlyInscopeCrawlingLogs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationFrontendDastScopePages) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationFrontendDastScopePages := _ProfileDetailedConfigurationFrontendDastScopePages{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationFrontendDastScopePages)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationFrontendDastScopePages(varProfileDetailedConfigurationFrontendDastScopePages)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowlist_url_patterns")
		delete(additionalProperties, "blocklist_patterns")
		delete(additionalProperties, "allowlist_element_selectors")
		delete(additionalProperties, "blocklist_element_selectors")
		delete(additionalProperties, "max_unique_values_per_query_param")
		delete(additionalProperties, "max_unique_fragments_per_page")
		delete(additionalProperties, "max_parameterized_url_variations")
		delete(additionalProperties, "only_inscope_crawling_logs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationFrontendDastScopePages struct {
	value *ProfileDetailedConfigurationFrontendDastScopePages
	isSet bool
}

func (v NullableProfileDetailedConfigurationFrontendDastScopePages) Get() *ProfileDetailedConfigurationFrontendDastScopePages {
	return v.value
}

func (v *NullableProfileDetailedConfigurationFrontendDastScopePages) Set(val *ProfileDetailedConfigurationFrontendDastScopePages) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationFrontendDastScopePages) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationFrontendDastScopePages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationFrontendDastScopePages(val *ProfileDetailedConfigurationFrontendDastScopePages) *NullableProfileDetailedConfigurationFrontendDastScopePages {
	return &NullableProfileDetailedConfigurationFrontendDastScopePages{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationFrontendDastScopePages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationFrontendDastScopePages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


