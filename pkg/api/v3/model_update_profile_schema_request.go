/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProfileSchemaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProfileSchemaRequest{}

// UpdateProfileSchemaRequest struct for UpdateProfileSchemaRequest
type UpdateProfileSchemaRequest struct {
	// The profile ID
	ProfileId string `json:"profileId"`
	// The schema URL
	SchemaUrl string `json:"schemaUrl"`
	// Whether the schema is uploaded
	Uploaded bool `json:"uploaded"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProfileSchemaRequest UpdateProfileSchemaRequest

// NewUpdateProfileSchemaRequest instantiates a new UpdateProfileSchemaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfileSchemaRequest(profileId string, schemaUrl string, uploaded bool) *UpdateProfileSchemaRequest {
	this := UpdateProfileSchemaRequest{}
	this.ProfileId = profileId
	this.SchemaUrl = schemaUrl
	this.Uploaded = uploaded
	return &this
}

// NewUpdateProfileSchemaRequestWithDefaults instantiates a new UpdateProfileSchemaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfileSchemaRequestWithDefaults() *UpdateProfileSchemaRequest {
	this := UpdateProfileSchemaRequest{}
	return &this
}

// GetProfileId returns the ProfileId field value
func (o *UpdateProfileSchemaRequest) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileSchemaRequest) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *UpdateProfileSchemaRequest) SetProfileId(v string) {
	o.ProfileId = v
}

// GetSchemaUrl returns the SchemaUrl field value
func (o *UpdateProfileSchemaRequest) GetSchemaUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaUrl
}

// GetSchemaUrlOk returns a tuple with the SchemaUrl field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileSchemaRequest) GetSchemaUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaUrl, true
}

// SetSchemaUrl sets field value
func (o *UpdateProfileSchemaRequest) SetSchemaUrl(v string) {
	o.SchemaUrl = v
}

// GetUploaded returns the Uploaded field value
func (o *UpdateProfileSchemaRequest) GetUploaded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Uploaded
}

// GetUploadedOk returns a tuple with the Uploaded field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileSchemaRequest) GetUploadedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uploaded, true
}

// SetUploaded sets field value
func (o *UpdateProfileSchemaRequest) SetUploaded(v bool) {
	o.Uploaded = v
}

func (o UpdateProfileSchemaRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProfileSchemaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["profileId"] = o.ProfileId
	toSerialize["schemaUrl"] = o.SchemaUrl
	toSerialize["uploaded"] = o.Uploaded

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProfileSchemaRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"profileId",
		"schemaUrl",
		"uploaded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProfileSchemaRequest := _UpdateProfileSchemaRequest{}

	err = json.Unmarshal(data, &varUpdateProfileSchemaRequest)

	if err != nil {
		return err
	}

	*o = UpdateProfileSchemaRequest(varUpdateProfileSchemaRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "profileId")
		delete(additionalProperties, "schemaUrl")
		delete(additionalProperties, "uploaded")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProfileSchemaRequest struct {
	value *UpdateProfileSchemaRequest
	isSet bool
}

func (v NullableUpdateProfileSchemaRequest) Get() *UpdateProfileSchemaRequest {
	return v.value
}

func (v *NullableUpdateProfileSchemaRequest) Set(val *UpdateProfileSchemaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfileSchemaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfileSchemaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfileSchemaRequest(val *UpdateProfileSchemaRequest) *NullableUpdateProfileSchemaRequest {
	return &NullableUpdateProfileSchemaRequest{value: val, isSet: true}
}

func (v NullableUpdateProfileSchemaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfileSchemaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


