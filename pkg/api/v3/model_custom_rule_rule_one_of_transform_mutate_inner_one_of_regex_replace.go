/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace{}

// CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace struct for CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace
type CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace struct {
	Pattern string `json:"pattern"`
	Replacement string `json:"replacement"`
	AdditionalProperties map[string]interface{}
}

type _CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace

// NewCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace instantiates a new CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace(pattern string, replacement string) *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace {
	this := CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace{}
	this.Pattern = pattern
	this.Replacement = replacement
	return &this
}

// NewCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplaceWithDefaults instantiates a new CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplaceWithDefaults() *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace {
	this := CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace{}
	return &this
}

// GetPattern returns the Pattern field value
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) GetPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) GetPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) SetPattern(v string) {
	o.Pattern = v
}

// GetReplacement returns the Replacement field value
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) GetReplacement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) GetReplacementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replacement, true
}

// SetReplacement sets field value
func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) SetReplacement(v string) {
	o.Replacement = v
}

func (o CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pattern"] = o.Pattern
	toSerialize["replacement"] = o.Replacement

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pattern",
		"replacement",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace := _CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace{}

	err = json.Unmarshal(data, &varCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace)

	if err != nil {
		return err
	}

	*o = CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace(varCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pattern")
		delete(additionalProperties, "replacement")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace struct {
	value *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace
	isSet bool
}

func (v NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) Get() *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace {
	return v.value
}

func (v *NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) Set(val *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace(val *CustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) *NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace {
	return &NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace{value: val, isSet: true}
}

func (v NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRuleRuleOneOfTransformMutateInnerOneOfRegexReplace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


