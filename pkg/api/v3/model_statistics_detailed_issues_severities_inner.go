/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the StatisticsDetailedIssuesSeveritiesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticsDetailedIssuesSeveritiesInner{}

// StatisticsDetailedIssuesSeveritiesInner struct for StatisticsDetailedIssuesSeveritiesInner
type StatisticsDetailedIssuesSeveritiesInner struct {
	// The severity of the issue
	Severity string `json:"severity"`
	// The count of the issue
	Count float32 `json:"count"`
	AdditionalProperties map[string]interface{}
}

type _StatisticsDetailedIssuesSeveritiesInner StatisticsDetailedIssuesSeveritiesInner

// NewStatisticsDetailedIssuesSeveritiesInner instantiates a new StatisticsDetailedIssuesSeveritiesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticsDetailedIssuesSeveritiesInner(severity string, count float32) *StatisticsDetailedIssuesSeveritiesInner {
	this := StatisticsDetailedIssuesSeveritiesInner{}
	this.Severity = severity
	this.Count = count
	return &this
}

// NewStatisticsDetailedIssuesSeveritiesInnerWithDefaults instantiates a new StatisticsDetailedIssuesSeveritiesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsDetailedIssuesSeveritiesInnerWithDefaults() *StatisticsDetailedIssuesSeveritiesInner {
	this := StatisticsDetailedIssuesSeveritiesInner{}
	return &this
}

// GetSeverity returns the Severity field value
func (o *StatisticsDetailedIssuesSeveritiesInner) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *StatisticsDetailedIssuesSeveritiesInner) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *StatisticsDetailedIssuesSeveritiesInner) SetSeverity(v string) {
	o.Severity = v
}

// GetCount returns the Count field value
func (o *StatisticsDetailedIssuesSeveritiesInner) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StatisticsDetailedIssuesSeveritiesInner) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StatisticsDetailedIssuesSeveritiesInner) SetCount(v float32) {
	o.Count = v
}

func (o StatisticsDetailedIssuesSeveritiesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticsDetailedIssuesSeveritiesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["severity"] = o.Severity
	toSerialize["count"] = o.Count

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatisticsDetailedIssuesSeveritiesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"severity",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatisticsDetailedIssuesSeveritiesInner := _StatisticsDetailedIssuesSeveritiesInner{}

	err = json.Unmarshal(data, &varStatisticsDetailedIssuesSeveritiesInner)

	if err != nil {
		return err
	}

	*o = StatisticsDetailedIssuesSeveritiesInner(varStatisticsDetailedIssuesSeveritiesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "severity")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatisticsDetailedIssuesSeveritiesInner struct {
	value *StatisticsDetailedIssuesSeveritiesInner
	isSet bool
}

func (v NullableStatisticsDetailedIssuesSeveritiesInner) Get() *StatisticsDetailedIssuesSeveritiesInner {
	return v.value
}

func (v *NullableStatisticsDetailedIssuesSeveritiesInner) Set(val *StatisticsDetailedIssuesSeveritiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsDetailedIssuesSeveritiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsDetailedIssuesSeveritiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsDetailedIssuesSeveritiesInner(val *StatisticsDetailedIssuesSeveritiesInner) *NullableStatisticsDetailedIssuesSeveritiesInner {
	return &NullableStatisticsDetailedIssuesSeveritiesInner{value: val, isSet: true}
}

func (v NullableStatisticsDetailedIssuesSeveritiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsDetailedIssuesSeveritiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


