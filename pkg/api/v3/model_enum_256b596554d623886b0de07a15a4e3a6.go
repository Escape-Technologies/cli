/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum256b596554d623886b0de07a15a4e3a6 the model 'Enum256b596554d623886b0de07a15a4e3a6'
type Enum256b596554d623886b0de07a15a4e3a6 string

// List of Enum_256b596554d623886b0de07a15a4e3a6
const (
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_DJANGO Enum256b596554d623886b0de07a15a4e3a6 = "REST_DJANGO"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_FLASK Enum256b596554d623886b0de07a15a4e3a6 = "REST_FLASK"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_EXPRESS_JS Enum256b596554d623886b0de07a15a4e3a6 = "REST_EXPRESS_JS"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_SPRING_BOOT Enum256b596554d623886b0de07a15a4e3a6 = "REST_SPRING_BOOT"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_RUBY_ON_RAILS Enum256b596554d623886b0de07a15a4e3a6 = "REST_RUBY_ON_RAILS"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_ASP_NET Enum256b596554d623886b0de07a15a4e3a6 = "REST_ASP_NET"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_LARAVEL Enum256b596554d623886b0de07a15a4e3a6 = "REST_LARAVEL"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_NESTJS Enum256b596554d623886b0de07a15a4e3a6 = "REST_NESTJS"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_SYMFONY Enum256b596554d623886b0de07a15a4e3a6 = "REST_SYMFONY"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_GIN Enum256b596554d623886b0de07a15a4e3a6 = "REST_GIN"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_HONO Enum256b596554d623886b0de07a15a4e3a6 = "REST_HONO"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_NEXTJS Enum256b596554d623886b0de07a15a4e3a6 = "REST_NEXTJS"
	ENUM256B596554D623886B0DE07A15A4E3A6_REST_NUXTJS Enum256b596554d623886b0de07a15a4e3a6 = "REST_NUXTJS"
)

// All allowed values of Enum256b596554d623886b0de07a15a4e3a6 enum
var AllowedEnum256b596554d623886b0de07a15a4e3a6EnumValues = []Enum256b596554d623886b0de07a15a4e3a6{
	"REST_DJANGO",
	"REST_FLASK",
	"REST_EXPRESS_JS",
	"REST_SPRING_BOOT",
	"REST_RUBY_ON_RAILS",
	"REST_ASP_NET",
	"REST_LARAVEL",
	"REST_NESTJS",
	"REST_SYMFONY",
	"REST_GIN",
	"REST_HONO",
	"REST_NEXTJS",
	"REST_NUXTJS",
}

func (v *Enum256b596554d623886b0de07a15a4e3a6) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum256b596554d623886b0de07a15a4e3a6(value)
	for _, existing := range AllowedEnum256b596554d623886b0de07a15a4e3a6EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum256b596554d623886b0de07a15a4e3a6", value)
}

// NewEnum256b596554d623886b0de07a15a4e3a6FromValue returns a pointer to a valid Enum256b596554d623886b0de07a15a4e3a6
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum256b596554d623886b0de07a15a4e3a6FromValue(v string) (*Enum256b596554d623886b0de07a15a4e3a6, error) {
	ev := Enum256b596554d623886b0de07a15a4e3a6(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum256b596554d623886b0de07a15a4e3a6: valid values are %v", v, AllowedEnum256b596554d623886b0de07a15a4e3a6EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum256b596554d623886b0de07a15a4e3a6) IsValid() bool {
	for _, existing := range AllowedEnum256b596554d623886b0de07a15a4e3a6EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_256b596554d623886b0de07a15a4e3a6 value
func (v Enum256b596554d623886b0de07a15a4e3a6) Ptr() *Enum256b596554d623886b0de07a15a4e3a6 {
	return &v
}

type NullableEnum256b596554d623886b0de07a15a4e3a6 struct {
	value *Enum256b596554d623886b0de07a15a4e3a6
	isSet bool
}

func (v NullableEnum256b596554d623886b0de07a15a4e3a6) Get() *Enum256b596554d623886b0de07a15a4e3a6 {
	return v.value
}

func (v *NullableEnum256b596554d623886b0de07a15a4e3a6) Set(val *Enum256b596554d623886b0de07a15a4e3a6) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum256b596554d623886b0de07a15a4e3a6) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum256b596554d623886b0de07a15a4e3a6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum256b596554d623886b0de07a15a4e3a6(val *Enum256b596554d623886b0de07a15a4e3a6) *NullableEnum256b596554d623886b0de07a15a4e3a6 {
	return &NullableEnum256b596554d623886b0de07a15a4e3a6{value: val, isSet: true}
}

func (v NullableEnum256b596554d623886b0de07a15a4e3a6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum256b596554d623886b0de07a15a4e3a6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

