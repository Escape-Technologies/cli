/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationSecurityTests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationSecurityTests{}

// ProfileDetailedConfigurationSecurityTests struct for ProfileDetailedConfigurationSecurityTests
type ProfileDetailedConfigurationSecurityTests struct {
	DoNotFuzzParams []string `json:"do_not_fuzz_params,omitempty"`
	MaxAttemptsPerPath *float32 `json:"max_attempts_per_path,omitempty"`
	MaxRequestsPerPath *float32 `json:"max_requests_per_path,omitempty"`
	HighNumberOfCustomScalars *ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars `json:"high_number_of_custom_scalars,omitempty"`
	HighNumberOfPci *ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars `json:"high_number_of_pci,omitempty"`
	HighNumberOfPii *ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars `json:"high_number_of_pii,omitempty"`
	HighNumberOfPhi *ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars `json:"high_number_of_phi,omitempty"`
	HighNumberOfSecrets *ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars `json:"high_number_of_secrets,omitempty"`
	Agentic *ProfileDetailedConfigurationSecurityTestsAgentic `json:"agentic,omitempty"`
	AirflowConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"airflow_config_exposure,omitempty"`
	AlibabaCanalLeak *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"alibaba_canal_leak,omitempty"`
	AnsibleConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ansible_config_exposure,omitempty"`
	AppspecExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"appspec_exposure,omitempty"`
	AppveyorConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"appveyor_config_exposure,omitempty"`
	ArbitraryTokenScope *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"arbitrary_token_scope,omitempty"`
	AuthBypass *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"auth_bypass,omitempty"`
	AwsAccessToken *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"aws_access_token,omitempty"`
	AwsConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"aws_config_exposure,omitempty"`
	AwsDockerConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"aws_docker_config_exposure,omitempty"`
	AwstatsConfigExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"awstats_config_exposure,omitempty"`
	AwstatsExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"awstats_exposure,omitempty"`
	AzureTenantIdExposure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"azure_tenant_id_exposure,omitempty"`
	Bola *ProfileDetailedConfigurationSecurityTestsBola `json:"bola,omitempty"`
	CharacterLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"character_limit,omitempty"`
	Command *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"command,omitempty"`
	ConsoleError *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"console_error,omitempty"`
	ContentSecurityPolicy *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"content_security_policy,omitempty"`
	Cors *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"cors,omitempty"`
	CrashingPage *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"crashing_page,omitempty"`
	Crlf *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"crlf,omitempty"`
	CsrfGetBased *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"csrf_get_based,omitempty"`
	CsrfPostBased *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"csrf_post_based,omitempty"`
	DebugMode *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"debug_mode,omitempty"`
	DirectoryListing *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"directory_listing,omitempty"`
	DirectoryTraversal *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"directory_traversal,omitempty"`
	Dkim *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"dkim,omitempty"`
	Dmarc *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"dmarc,omitempty"`
	Loopback *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"loopback,omitempty"`
	PermisiveSpf *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"permisive_spf,omitempty"`
	DnsrecordTxtLength *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"dnsrecord_txt_length,omitempty"`
	DnsrecordTxtSensitive *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"dnsrecord_txt_sensitive,omitempty"`
	DnssecDisabled *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"dnssec_disabled,omitempty"`
	DomainTakeover *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"domain_takeover,omitempty"`
	DuplicatedObject *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"duplicated_object,omitempty"`
	ErrorTypeInconsistency *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"error_type_inconsistency,omitempty"`
	ExcessiveBrowserPermissions *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"excessive_browser_permissions,omitempty"`
	ExposedMysqlConfig *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"exposed_mysql_config,omitempty"`
	ExposedSettingsPhp *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"exposed_settings_php,omitempty"`
	ExposedSourcemap *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"exposed_sourcemap,omitempty"`
	ExposedSqlDumps *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"exposed_sql_dumps,omitempty"`
	FileDisclosure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"file_disclosure,omitempty"`
	FileInclusion *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"file_inclusion,omitempty"`
	ForcedBrowsing *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"forced_browsing,omitempty"`
	FrontendLocalstorageSensitiveData *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"frontend_localstorage_sensitive_data,omitempty"`
	GraphqlAliasLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_alias_limit,omitempty"`
	GraphqlApq *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_apq,omitempty"`
	GraphqlBatchLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_batch_limit,omitempty"`
	GraphqlCircularIntrospection *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_circular_introspection,omitempty"`
	GraphqlContentType *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_content_type,omitempty"`
	GraphqlDepthLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_depth_limit,omitempty"`
	GraphqlDirectiveOverload *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_directive_overload,omitempty"`
	GraphqlExtensionDisclosure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_extension_disclosure,omitempty"`
	GraphqlFieldDuplication *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_field_duplication,omitempty"`
	GraphqlFieldLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_field_limit,omitempty"`
	GraphqlFieldSuggestion *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_field_suggestion,omitempty"`
	GraphqlRecursiveFragment *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_recursive_fragment,omitempty"`
	GraphqlResponseFormat *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_response_format,omitempty"`
	GraphqlWidthLimit *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"graphql_width_limit,omitempty"`
	GuessableCookieValue *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"guessable_cookie_value,omitempty"`
	HeaderAccessControlAllowOrigin *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_access_control_allow_origin,omitempty"`
	HeaderCacheControl *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_cache_control,omitempty"`
	HeaderContentSecurityPolicy *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_content_security_policy,omitempty"`
	HeaderContentType *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_content_type,omitempty"`
	HeaderLeak *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_leak,omitempty"`
	HeaderSetCookie *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_set_cookie,omitempty"`
	Headers *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"headers,omitempty"`
	HeaderStrictTransportSecurity *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_strict_transport_security,omitempty"`
	HeaderXContentTypeOptions *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_x_content_type_options,omitempty"`
	HeaderXFrameOptions *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"header_x_frame_options,omitempty"`
	HtmlInjection *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"html_injection,omitempty"`
	HttpParamPollution *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"http_param_pollution,omitempty"`
	IdeEnabled *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ide_enabled,omitempty"`
	ImproperInput *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"improper_input,omitempty"`
	ImproperInputStored *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"improper_input_stored,omitempty"`
	IntrospectionEnabled *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"introspection_enabled,omitempty"`
	InvalidAllof *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"invalid_allof,omitempty"`
	InvalidParametersInPath *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"invalid_parameters_in_path,omitempty"`
	InvalidPersistedQuery *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"invalid_persisted_query,omitempty"`
	InvalidRefs *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"invalid_refs,omitempty"`
	JwtAlgConfusion *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"jwt_alg_confusion,omitempty"`
	JwtAlgNone *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"jwt_alg_none,omitempty"`
	ExposedJwt *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"exposed_jwt,omitempty"`
	JwtSignCheck *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"jwt_sign_check,omitempty"`
	LargeJsonInput *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"large_json_input,omitempty"`
	LeakingAuthentication *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"leaking_authentication,omitempty"`
	LlmDetection *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_detection,omitempty"`
	LlmExcessiveAgency *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_excessive_agency,omitempty"`
	LlmInsecureOutputHandling *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_insecure_output_handling,omitempty"`
	LlmInsecurePluginDesign *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_insecure_plugin_design,omitempty"`
	LlmJailBreak *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_jail_break,omitempty"`
	LlmModelDos *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_model_dos,omitempty"`
	LlmModelTheft *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_model_theft,omitempty"`
	LlmOverreliance *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_overreliance,omitempty"`
	LlmPromptInjection *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_prompt_injection,omitempty"`
	LlmSensitiveInformationDisclosure *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_sensitive_information_disclosure,omitempty"`
	LlmSupplyChainVulnerabilities *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_supply_chain_vulnerabilities,omitempty"`
	LlmTrainingDataPoisoning *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"llm_training_data_poisoning,omitempty"`
	Log4shell *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"log4shell,omitempty"`
	MassAssignment *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"mass_assignment,omitempty"`
	MismatchingPersistedQueriesAndSchema *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"mismatching_persisted_queries_and_schema,omitempty"`
	Nosql *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"nosql,omitempty"`
	NosqlStored *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"nosql_stored,omitempty"`
	Nuclei *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"nuclei,omitempty"`
	OpenPort *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"open_port,omitempty"`
	OpenRedirect *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"open_redirect,omitempty"`
	PaginationMissing *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"pagination_missing,omitempty"`
	PasswordFieldAutocompletion *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"password_field_autocompletion,omitempty"`
	PermissiveJsonInput *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"permissive_json_input,omitempty"`
	PositiveIntegerValidation *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"positive_integer_validation,omitempty"`
	PotentialCve *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"potential_cve,omitempty"`
	PrivateData *ProfileDetailedConfigurationSecurityTestsPrivateData `json:"private_data,omitempty"`
	PrivateFields *ProfileDetailedConfigurationSecurityTestsPrivateData `json:"private_fields,omitempty"`
	PrivateIp *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"private_ip,omitempty"`
	PublicStateAlteringOperation *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"public_state_altering_operation,omitempty"`
	ReflectedUrlParameter *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"reflected_url_parameter,omitempty"`
	RequestSmuggling *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"request_smuggling,omitempty"`
	RequestUrlOverride *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"request_url_override,omitempty"`
	ResourceLimitingBypass *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"resource_limiting_bypass,omitempty"`
	ResponseSize *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"response_size,omitempty"`
	ResponseTypeMismatch *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"response_type_mismatch,omitempty"`
	SecurityChecks *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"security_checks,omitempty"`
	SensitiveComments *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"sensitive_comments,omitempty"`
	SensitiveEndpointBruteforce *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"sensitive_endpoint_bruteforce,omitempty"`
	ServerError *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"server_error,omitempty"`
	SoftwareComponentLeak *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"software_component_leak,omitempty"`
	SpringbootActuatorDump *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_dump,omitempty"`
	SpringbootActuatorEnv *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_env,omitempty"`
	SpringbootActuatorHeapdump *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_heapdump,omitempty"`
	SpringbootActuatorLogfile *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_logfile,omitempty"`
	SpringbootActuatorMappings *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_mappings,omitempty"`
	SpringbootActuatorRestart *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_restart,omitempty"`
	SpringbootActuatorShutdown *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_shutdown,omitempty"`
	SpringbootActuatorTrace *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"springboot_actuator_trace,omitempty"`
	Sql *ProfileDetailedConfigurationSecurityTestsSql `json:"sql,omitempty"`
	SslCertificate *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ssl_certificate,omitempty"`
	Ssl *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ssl,omitempty"`
	SsrfHeader *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ssrf_header,omitempty"`
	Ssrf *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ssrf,omitempty"`
	Ssti *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"ssti,omitempty"`
	Stacktrace *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"stacktrace,omitempty"`
	SubresourceIntegrityMissing *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"subresource_integrity_missing,omitempty"`
	SwaggerRules *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"swagger_rules,omitempty"`
	TenantIsolation *ProfileDetailedConfigurationSecurityTestsTenantIsolation `json:"tenant_isolation,omitempty"`
	Timeout *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"timeout,omitempty"`
	TlsConfigurationCipher *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_cipher,omitempty"`
	TlsConfigurationKey *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_key,omitempty"`
	TlsConfigurationProtocol *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_protocol,omitempty"`
	TlsConfigurationServerDefault *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_server_default,omitempty"`
	TlsConfigurationServerPref *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_server_pref,omitempty"`
	TlsConfigurationVuln *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"tls_configuration_vuln,omitempty"`
	TypingMisconfiguration *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"typing_misconfiguration,omitempty"`
	UndefinedObject *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"undefined_object,omitempty"`
	UnhandledEndpoint *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"unhandled_endpoint,omitempty"`
	UnreachableServer *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"unreachable_server,omitempty"`
	UnsafeFunctionUse *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"unsafe_function_use,omitempty"`
	WafBypass *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"waf_bypass,omitempty"`
	WordpressOembedEndpointExposed *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"wordpress_oembed_endpoint_exposed,omitempty"`
	WordpressRdfFeedUserExposed *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"wordpress_rdf_feed_user_exposed,omitempty"`
	WordpressRestApiUsersExposed *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"wordpress_rest_api_users_exposed,omitempty"`
	WordpressWpCronExposed *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"wordpress_wp_cron_exposed,omitempty"`
	WordpressXmlrpcPhpExposed *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"wordpress_xmlrpc_php_exposed,omitempty"`
	XssViaDomainTakeover *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"xss_via_domain_takeover,omitempty"`
	Xxe *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"xxe,omitempty"`
	ZombieObject *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"zombie_object,omitempty"`
	FlaskSessionCookie *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"flask_session_cookie,omitempty"`
	RowLevelSecurity *ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure `json:"row_level_security,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationSecurityTests ProfileDetailedConfigurationSecurityTests

// NewProfileDetailedConfigurationSecurityTests instantiates a new ProfileDetailedConfigurationSecurityTests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationSecurityTests() *ProfileDetailedConfigurationSecurityTests {
	this := ProfileDetailedConfigurationSecurityTests{}
	return &this
}

// NewProfileDetailedConfigurationSecurityTestsWithDefaults instantiates a new ProfileDetailedConfigurationSecurityTests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationSecurityTestsWithDefaults() *ProfileDetailedConfigurationSecurityTests {
	this := ProfileDetailedConfigurationSecurityTests{}
	return &this
}

// GetDoNotFuzzParams returns the DoNotFuzzParams field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDoNotFuzzParams() []string {
	if o == nil || IsNil(o.DoNotFuzzParams) {
		var ret []string
		return ret
	}
	return o.DoNotFuzzParams
}

// GetDoNotFuzzParamsOk returns a tuple with the DoNotFuzzParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDoNotFuzzParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.DoNotFuzzParams) {
		return nil, false
	}
	return o.DoNotFuzzParams, true
}

// HasDoNotFuzzParams returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDoNotFuzzParams() bool {
	if o != nil && !IsNil(o.DoNotFuzzParams) {
		return true
	}

	return false
}

// SetDoNotFuzzParams gets a reference to the given []string and assigns it to the DoNotFuzzParams field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDoNotFuzzParams(v []string) {
	o.DoNotFuzzParams = v
}

// GetMaxAttemptsPerPath returns the MaxAttemptsPerPath field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetMaxAttemptsPerPath() float32 {
	if o == nil || IsNil(o.MaxAttemptsPerPath) {
		var ret float32
		return ret
	}
	return *o.MaxAttemptsPerPath
}

// GetMaxAttemptsPerPathOk returns a tuple with the MaxAttemptsPerPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetMaxAttemptsPerPathOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxAttemptsPerPath) {
		return nil, false
	}
	return o.MaxAttemptsPerPath, true
}

// HasMaxAttemptsPerPath returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasMaxAttemptsPerPath() bool {
	if o != nil && !IsNil(o.MaxAttemptsPerPath) {
		return true
	}

	return false
}

// SetMaxAttemptsPerPath gets a reference to the given float32 and assigns it to the MaxAttemptsPerPath field.
func (o *ProfileDetailedConfigurationSecurityTests) SetMaxAttemptsPerPath(v float32) {
	o.MaxAttemptsPerPath = &v
}

// GetMaxRequestsPerPath returns the MaxRequestsPerPath field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetMaxRequestsPerPath() float32 {
	if o == nil || IsNil(o.MaxRequestsPerPath) {
		var ret float32
		return ret
	}
	return *o.MaxRequestsPerPath
}

// GetMaxRequestsPerPathOk returns a tuple with the MaxRequestsPerPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetMaxRequestsPerPathOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxRequestsPerPath) {
		return nil, false
	}
	return o.MaxRequestsPerPath, true
}

// HasMaxRequestsPerPath returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasMaxRequestsPerPath() bool {
	if o != nil && !IsNil(o.MaxRequestsPerPath) {
		return true
	}

	return false
}

// SetMaxRequestsPerPath gets a reference to the given float32 and assigns it to the MaxRequestsPerPath field.
func (o *ProfileDetailedConfigurationSecurityTests) SetMaxRequestsPerPath(v float32) {
	o.MaxRequestsPerPath = &v
}

// GetHighNumberOfCustomScalars returns the HighNumberOfCustomScalars field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfCustomScalars() ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars {
	if o == nil || IsNil(o.HighNumberOfCustomScalars) {
		var ret ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars
		return ret
	}
	return *o.HighNumberOfCustomScalars
}

// GetHighNumberOfCustomScalarsOk returns a tuple with the HighNumberOfCustomScalars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfCustomScalarsOk() (*ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars, bool) {
	if o == nil || IsNil(o.HighNumberOfCustomScalars) {
		return nil, false
	}
	return o.HighNumberOfCustomScalars, true
}

// HasHighNumberOfCustomScalars returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHighNumberOfCustomScalars() bool {
	if o != nil && !IsNil(o.HighNumberOfCustomScalars) {
		return true
	}

	return false
}

// SetHighNumberOfCustomScalars gets a reference to the given ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars and assigns it to the HighNumberOfCustomScalars field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHighNumberOfCustomScalars(v ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars) {
	o.HighNumberOfCustomScalars = &v
}

// GetHighNumberOfPci returns the HighNumberOfPci field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPci() ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars {
	if o == nil || IsNil(o.HighNumberOfPci) {
		var ret ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars
		return ret
	}
	return *o.HighNumberOfPci
}

// GetHighNumberOfPciOk returns a tuple with the HighNumberOfPci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPciOk() (*ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars, bool) {
	if o == nil || IsNil(o.HighNumberOfPci) {
		return nil, false
	}
	return o.HighNumberOfPci, true
}

// HasHighNumberOfPci returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHighNumberOfPci() bool {
	if o != nil && !IsNil(o.HighNumberOfPci) {
		return true
	}

	return false
}

// SetHighNumberOfPci gets a reference to the given ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars and assigns it to the HighNumberOfPci field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHighNumberOfPci(v ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars) {
	o.HighNumberOfPci = &v
}

// GetHighNumberOfPii returns the HighNumberOfPii field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPii() ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars {
	if o == nil || IsNil(o.HighNumberOfPii) {
		var ret ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars
		return ret
	}
	return *o.HighNumberOfPii
}

// GetHighNumberOfPiiOk returns a tuple with the HighNumberOfPii field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPiiOk() (*ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars, bool) {
	if o == nil || IsNil(o.HighNumberOfPii) {
		return nil, false
	}
	return o.HighNumberOfPii, true
}

// HasHighNumberOfPii returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHighNumberOfPii() bool {
	if o != nil && !IsNil(o.HighNumberOfPii) {
		return true
	}

	return false
}

// SetHighNumberOfPii gets a reference to the given ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars and assigns it to the HighNumberOfPii field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHighNumberOfPii(v ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars) {
	o.HighNumberOfPii = &v
}

// GetHighNumberOfPhi returns the HighNumberOfPhi field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPhi() ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars {
	if o == nil || IsNil(o.HighNumberOfPhi) {
		var ret ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars
		return ret
	}
	return *o.HighNumberOfPhi
}

// GetHighNumberOfPhiOk returns a tuple with the HighNumberOfPhi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfPhiOk() (*ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars, bool) {
	if o == nil || IsNil(o.HighNumberOfPhi) {
		return nil, false
	}
	return o.HighNumberOfPhi, true
}

// HasHighNumberOfPhi returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHighNumberOfPhi() bool {
	if o != nil && !IsNil(o.HighNumberOfPhi) {
		return true
	}

	return false
}

// SetHighNumberOfPhi gets a reference to the given ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars and assigns it to the HighNumberOfPhi field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHighNumberOfPhi(v ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars) {
	o.HighNumberOfPhi = &v
}

// GetHighNumberOfSecrets returns the HighNumberOfSecrets field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfSecrets() ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars {
	if o == nil || IsNil(o.HighNumberOfSecrets) {
		var ret ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars
		return ret
	}
	return *o.HighNumberOfSecrets
}

// GetHighNumberOfSecretsOk returns a tuple with the HighNumberOfSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHighNumberOfSecretsOk() (*ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars, bool) {
	if o == nil || IsNil(o.HighNumberOfSecrets) {
		return nil, false
	}
	return o.HighNumberOfSecrets, true
}

// HasHighNumberOfSecrets returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHighNumberOfSecrets() bool {
	if o != nil && !IsNil(o.HighNumberOfSecrets) {
		return true
	}

	return false
}

// SetHighNumberOfSecrets gets a reference to the given ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars and assigns it to the HighNumberOfSecrets field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHighNumberOfSecrets(v ProfileDetailedConfigurationSecurityTestsHighNumberOfCustomScalars) {
	o.HighNumberOfSecrets = &v
}

// GetAgentic returns the Agentic field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAgentic() ProfileDetailedConfigurationSecurityTestsAgentic {
	if o == nil || IsNil(o.Agentic) {
		var ret ProfileDetailedConfigurationSecurityTestsAgentic
		return ret
	}
	return *o.Agentic
}

// GetAgenticOk returns a tuple with the Agentic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAgenticOk() (*ProfileDetailedConfigurationSecurityTestsAgentic, bool) {
	if o == nil || IsNil(o.Agentic) {
		return nil, false
	}
	return o.Agentic, true
}

// HasAgentic returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAgentic() bool {
	if o != nil && !IsNil(o.Agentic) {
		return true
	}

	return false
}

// SetAgentic gets a reference to the given ProfileDetailedConfigurationSecurityTestsAgentic and assigns it to the Agentic field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAgentic(v ProfileDetailedConfigurationSecurityTestsAgentic) {
	o.Agentic = &v
}

// GetAirflowConfigExposure returns the AirflowConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAirflowConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AirflowConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AirflowConfigExposure
}

// GetAirflowConfigExposureOk returns a tuple with the AirflowConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAirflowConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AirflowConfigExposure) {
		return nil, false
	}
	return o.AirflowConfigExposure, true
}

// HasAirflowConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAirflowConfigExposure() bool {
	if o != nil && !IsNil(o.AirflowConfigExposure) {
		return true
	}

	return false
}

// SetAirflowConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AirflowConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAirflowConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AirflowConfigExposure = &v
}

// GetAlibabaCanalLeak returns the AlibabaCanalLeak field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAlibabaCanalLeak() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AlibabaCanalLeak) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AlibabaCanalLeak
}

// GetAlibabaCanalLeakOk returns a tuple with the AlibabaCanalLeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAlibabaCanalLeakOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AlibabaCanalLeak) {
		return nil, false
	}
	return o.AlibabaCanalLeak, true
}

// HasAlibabaCanalLeak returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAlibabaCanalLeak() bool {
	if o != nil && !IsNil(o.AlibabaCanalLeak) {
		return true
	}

	return false
}

// SetAlibabaCanalLeak gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AlibabaCanalLeak field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAlibabaCanalLeak(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AlibabaCanalLeak = &v
}

// GetAnsibleConfigExposure returns the AnsibleConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAnsibleConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AnsibleConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AnsibleConfigExposure
}

// GetAnsibleConfigExposureOk returns a tuple with the AnsibleConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAnsibleConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AnsibleConfigExposure) {
		return nil, false
	}
	return o.AnsibleConfigExposure, true
}

// HasAnsibleConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAnsibleConfigExposure() bool {
	if o != nil && !IsNil(o.AnsibleConfigExposure) {
		return true
	}

	return false
}

// SetAnsibleConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AnsibleConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAnsibleConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AnsibleConfigExposure = &v
}

// GetAppspecExposure returns the AppspecExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAppspecExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AppspecExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AppspecExposure
}

// GetAppspecExposureOk returns a tuple with the AppspecExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAppspecExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AppspecExposure) {
		return nil, false
	}
	return o.AppspecExposure, true
}

// HasAppspecExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAppspecExposure() bool {
	if o != nil && !IsNil(o.AppspecExposure) {
		return true
	}

	return false
}

// SetAppspecExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AppspecExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAppspecExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AppspecExposure = &v
}

// GetAppveyorConfigExposure returns the AppveyorConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAppveyorConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AppveyorConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AppveyorConfigExposure
}

// GetAppveyorConfigExposureOk returns a tuple with the AppveyorConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAppveyorConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AppveyorConfigExposure) {
		return nil, false
	}
	return o.AppveyorConfigExposure, true
}

// HasAppveyorConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAppveyorConfigExposure() bool {
	if o != nil && !IsNil(o.AppveyorConfigExposure) {
		return true
	}

	return false
}

// SetAppveyorConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AppveyorConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAppveyorConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AppveyorConfigExposure = &v
}

// GetArbitraryTokenScope returns the ArbitraryTokenScope field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetArbitraryTokenScope() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ArbitraryTokenScope) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ArbitraryTokenScope
}

// GetArbitraryTokenScopeOk returns a tuple with the ArbitraryTokenScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetArbitraryTokenScopeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ArbitraryTokenScope) {
		return nil, false
	}
	return o.ArbitraryTokenScope, true
}

// HasArbitraryTokenScope returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasArbitraryTokenScope() bool {
	if o != nil && !IsNil(o.ArbitraryTokenScope) {
		return true
	}

	return false
}

// SetArbitraryTokenScope gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ArbitraryTokenScope field.
func (o *ProfileDetailedConfigurationSecurityTests) SetArbitraryTokenScope(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ArbitraryTokenScope = &v
}

// GetAuthBypass returns the AuthBypass field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAuthBypass() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AuthBypass) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AuthBypass
}

// GetAuthBypassOk returns a tuple with the AuthBypass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAuthBypassOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AuthBypass) {
		return nil, false
	}
	return o.AuthBypass, true
}

// HasAuthBypass returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAuthBypass() bool {
	if o != nil && !IsNil(o.AuthBypass) {
		return true
	}

	return false
}

// SetAuthBypass gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AuthBypass field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAuthBypass(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AuthBypass = &v
}

// GetAwsAccessToken returns the AwsAccessToken field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsAccessToken() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AwsAccessToken) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AwsAccessToken
}

// GetAwsAccessTokenOk returns a tuple with the AwsAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsAccessTokenOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AwsAccessToken) {
		return nil, false
	}
	return o.AwsAccessToken, true
}

// HasAwsAccessToken returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAwsAccessToken() bool {
	if o != nil && !IsNil(o.AwsAccessToken) {
		return true
	}

	return false
}

// SetAwsAccessToken gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AwsAccessToken field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAwsAccessToken(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AwsAccessToken = &v
}

// GetAwsConfigExposure returns the AwsConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AwsConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AwsConfigExposure
}

// GetAwsConfigExposureOk returns a tuple with the AwsConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AwsConfigExposure) {
		return nil, false
	}
	return o.AwsConfigExposure, true
}

// HasAwsConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAwsConfigExposure() bool {
	if o != nil && !IsNil(o.AwsConfigExposure) {
		return true
	}

	return false
}

// SetAwsConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AwsConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAwsConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AwsConfigExposure = &v
}

// GetAwsDockerConfigExposure returns the AwsDockerConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsDockerConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AwsDockerConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AwsDockerConfigExposure
}

// GetAwsDockerConfigExposureOk returns a tuple with the AwsDockerConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwsDockerConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AwsDockerConfigExposure) {
		return nil, false
	}
	return o.AwsDockerConfigExposure, true
}

// HasAwsDockerConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAwsDockerConfigExposure() bool {
	if o != nil && !IsNil(o.AwsDockerConfigExposure) {
		return true
	}

	return false
}

// SetAwsDockerConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AwsDockerConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAwsDockerConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AwsDockerConfigExposure = &v
}

// GetAwstatsConfigExposure returns the AwstatsConfigExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwstatsConfigExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AwstatsConfigExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AwstatsConfigExposure
}

// GetAwstatsConfigExposureOk returns a tuple with the AwstatsConfigExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwstatsConfigExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AwstatsConfigExposure) {
		return nil, false
	}
	return o.AwstatsConfigExposure, true
}

// HasAwstatsConfigExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAwstatsConfigExposure() bool {
	if o != nil && !IsNil(o.AwstatsConfigExposure) {
		return true
	}

	return false
}

// SetAwstatsConfigExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AwstatsConfigExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAwstatsConfigExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AwstatsConfigExposure = &v
}

// GetAwstatsExposure returns the AwstatsExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwstatsExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AwstatsExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AwstatsExposure
}

// GetAwstatsExposureOk returns a tuple with the AwstatsExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAwstatsExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AwstatsExposure) {
		return nil, false
	}
	return o.AwstatsExposure, true
}

// HasAwstatsExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAwstatsExposure() bool {
	if o != nil && !IsNil(o.AwstatsExposure) {
		return true
	}

	return false
}

// SetAwstatsExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AwstatsExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAwstatsExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AwstatsExposure = &v
}

// GetAzureTenantIdExposure returns the AzureTenantIdExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetAzureTenantIdExposure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.AzureTenantIdExposure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.AzureTenantIdExposure
}

// GetAzureTenantIdExposureOk returns a tuple with the AzureTenantIdExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetAzureTenantIdExposureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.AzureTenantIdExposure) {
		return nil, false
	}
	return o.AzureTenantIdExposure, true
}

// HasAzureTenantIdExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasAzureTenantIdExposure() bool {
	if o != nil && !IsNil(o.AzureTenantIdExposure) {
		return true
	}

	return false
}

// SetAzureTenantIdExposure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the AzureTenantIdExposure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetAzureTenantIdExposure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.AzureTenantIdExposure = &v
}

// GetBola returns the Bola field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetBola() ProfileDetailedConfigurationSecurityTestsBola {
	if o == nil || IsNil(o.Bola) {
		var ret ProfileDetailedConfigurationSecurityTestsBola
		return ret
	}
	return *o.Bola
}

// GetBolaOk returns a tuple with the Bola field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetBolaOk() (*ProfileDetailedConfigurationSecurityTestsBola, bool) {
	if o == nil || IsNil(o.Bola) {
		return nil, false
	}
	return o.Bola, true
}

// HasBola returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasBola() bool {
	if o != nil && !IsNil(o.Bola) {
		return true
	}

	return false
}

// SetBola gets a reference to the given ProfileDetailedConfigurationSecurityTestsBola and assigns it to the Bola field.
func (o *ProfileDetailedConfigurationSecurityTests) SetBola(v ProfileDetailedConfigurationSecurityTestsBola) {
	o.Bola = &v
}

// GetCharacterLimit returns the CharacterLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCharacterLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.CharacterLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.CharacterLimit
}

// GetCharacterLimitOk returns a tuple with the CharacterLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCharacterLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.CharacterLimit) {
		return nil, false
	}
	return o.CharacterLimit, true
}

// HasCharacterLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCharacterLimit() bool {
	if o != nil && !IsNil(o.CharacterLimit) {
		return true
	}

	return false
}

// SetCharacterLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the CharacterLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCharacterLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.CharacterLimit = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCommand() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Command) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCommandOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Command field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCommand(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Command = &v
}

// GetConsoleError returns the ConsoleError field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetConsoleError() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ConsoleError) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ConsoleError
}

// GetConsoleErrorOk returns a tuple with the ConsoleError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetConsoleErrorOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ConsoleError) {
		return nil, false
	}
	return o.ConsoleError, true
}

// HasConsoleError returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasConsoleError() bool {
	if o != nil && !IsNil(o.ConsoleError) {
		return true
	}

	return false
}

// SetConsoleError gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ConsoleError field.
func (o *ProfileDetailedConfigurationSecurityTests) SetConsoleError(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ConsoleError = &v
}

// GetContentSecurityPolicy returns the ContentSecurityPolicy field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetContentSecurityPolicy() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ContentSecurityPolicy) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ContentSecurityPolicy
}

// GetContentSecurityPolicyOk returns a tuple with the ContentSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetContentSecurityPolicyOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ContentSecurityPolicy) {
		return nil, false
	}
	return o.ContentSecurityPolicy, true
}

// HasContentSecurityPolicy returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasContentSecurityPolicy() bool {
	if o != nil && !IsNil(o.ContentSecurityPolicy) {
		return true
	}

	return false
}

// SetContentSecurityPolicy gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ContentSecurityPolicy field.
func (o *ProfileDetailedConfigurationSecurityTests) SetContentSecurityPolicy(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ContentSecurityPolicy = &v
}

// GetCors returns the Cors field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCors() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Cors) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Cors
}

// GetCorsOk returns a tuple with the Cors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCorsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Cors) {
		return nil, false
	}
	return o.Cors, true
}

// HasCors returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCors() bool {
	if o != nil && !IsNil(o.Cors) {
		return true
	}

	return false
}

// SetCors gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Cors field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCors(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Cors = &v
}

// GetCrashingPage returns the CrashingPage field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCrashingPage() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.CrashingPage) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.CrashingPage
}

// GetCrashingPageOk returns a tuple with the CrashingPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCrashingPageOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.CrashingPage) {
		return nil, false
	}
	return o.CrashingPage, true
}

// HasCrashingPage returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCrashingPage() bool {
	if o != nil && !IsNil(o.CrashingPage) {
		return true
	}

	return false
}

// SetCrashingPage gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the CrashingPage field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCrashingPage(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.CrashingPage = &v
}

// GetCrlf returns the Crlf field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCrlf() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Crlf) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Crlf
}

// GetCrlfOk returns a tuple with the Crlf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCrlfOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Crlf) {
		return nil, false
	}
	return o.Crlf, true
}

// HasCrlf returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCrlf() bool {
	if o != nil && !IsNil(o.Crlf) {
		return true
	}

	return false
}

// SetCrlf gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Crlf field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCrlf(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Crlf = &v
}

// GetCsrfGetBased returns the CsrfGetBased field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCsrfGetBased() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.CsrfGetBased) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.CsrfGetBased
}

// GetCsrfGetBasedOk returns a tuple with the CsrfGetBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCsrfGetBasedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.CsrfGetBased) {
		return nil, false
	}
	return o.CsrfGetBased, true
}

// HasCsrfGetBased returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCsrfGetBased() bool {
	if o != nil && !IsNil(o.CsrfGetBased) {
		return true
	}

	return false
}

// SetCsrfGetBased gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the CsrfGetBased field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCsrfGetBased(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.CsrfGetBased = &v
}

// GetCsrfPostBased returns the CsrfPostBased field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetCsrfPostBased() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.CsrfPostBased) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.CsrfPostBased
}

// GetCsrfPostBasedOk returns a tuple with the CsrfPostBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetCsrfPostBasedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.CsrfPostBased) {
		return nil, false
	}
	return o.CsrfPostBased, true
}

// HasCsrfPostBased returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasCsrfPostBased() bool {
	if o != nil && !IsNil(o.CsrfPostBased) {
		return true
	}

	return false
}

// SetCsrfPostBased gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the CsrfPostBased field.
func (o *ProfileDetailedConfigurationSecurityTests) SetCsrfPostBased(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.CsrfPostBased = &v
}

// GetDebugMode returns the DebugMode field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDebugMode() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DebugMode) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DebugMode
}

// GetDebugModeOk returns a tuple with the DebugMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDebugModeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DebugMode) {
		return nil, false
	}
	return o.DebugMode, true
}

// HasDebugMode returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDebugMode() bool {
	if o != nil && !IsNil(o.DebugMode) {
		return true
	}

	return false
}

// SetDebugMode gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DebugMode field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDebugMode(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DebugMode = &v
}

// GetDirectoryListing returns the DirectoryListing field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDirectoryListing() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DirectoryListing) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DirectoryListing
}

// GetDirectoryListingOk returns a tuple with the DirectoryListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDirectoryListingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DirectoryListing) {
		return nil, false
	}
	return o.DirectoryListing, true
}

// HasDirectoryListing returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDirectoryListing() bool {
	if o != nil && !IsNil(o.DirectoryListing) {
		return true
	}

	return false
}

// SetDirectoryListing gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DirectoryListing field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDirectoryListing(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DirectoryListing = &v
}

// GetDirectoryTraversal returns the DirectoryTraversal field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDirectoryTraversal() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DirectoryTraversal) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DirectoryTraversal
}

// GetDirectoryTraversalOk returns a tuple with the DirectoryTraversal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDirectoryTraversalOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DirectoryTraversal) {
		return nil, false
	}
	return o.DirectoryTraversal, true
}

// HasDirectoryTraversal returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDirectoryTraversal() bool {
	if o != nil && !IsNil(o.DirectoryTraversal) {
		return true
	}

	return false
}

// SetDirectoryTraversal gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DirectoryTraversal field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDirectoryTraversal(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DirectoryTraversal = &v
}

// GetDkim returns the Dkim field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDkim() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Dkim) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Dkim
}

// GetDkimOk returns a tuple with the Dkim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDkimOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Dkim) {
		return nil, false
	}
	return o.Dkim, true
}

// HasDkim returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDkim() bool {
	if o != nil && !IsNil(o.Dkim) {
		return true
	}

	return false
}

// SetDkim gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Dkim field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDkim(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Dkim = &v
}

// GetDmarc returns the Dmarc field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDmarc() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Dmarc) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Dmarc
}

// GetDmarcOk returns a tuple with the Dmarc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDmarcOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Dmarc) {
		return nil, false
	}
	return o.Dmarc, true
}

// HasDmarc returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDmarc() bool {
	if o != nil && !IsNil(o.Dmarc) {
		return true
	}

	return false
}

// SetDmarc gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Dmarc field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDmarc(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Dmarc = &v
}

// GetLoopback returns the Loopback field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLoopback() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Loopback) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Loopback
}

// GetLoopbackOk returns a tuple with the Loopback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLoopbackOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Loopback) {
		return nil, false
	}
	return o.Loopback, true
}

// HasLoopback returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLoopback() bool {
	if o != nil && !IsNil(o.Loopback) {
		return true
	}

	return false
}

// SetLoopback gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Loopback field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLoopback(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Loopback = &v
}

// GetPermisiveSpf returns the PermisiveSpf field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPermisiveSpf() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PermisiveSpf) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PermisiveSpf
}

// GetPermisiveSpfOk returns a tuple with the PermisiveSpf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPermisiveSpfOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PermisiveSpf) {
		return nil, false
	}
	return o.PermisiveSpf, true
}

// HasPermisiveSpf returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPermisiveSpf() bool {
	if o != nil && !IsNil(o.PermisiveSpf) {
		return true
	}

	return false
}

// SetPermisiveSpf gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PermisiveSpf field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPermisiveSpf(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PermisiveSpf = &v
}

// GetDnsrecordTxtLength returns the DnsrecordTxtLength field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnsrecordTxtLength() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DnsrecordTxtLength) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DnsrecordTxtLength
}

// GetDnsrecordTxtLengthOk returns a tuple with the DnsrecordTxtLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnsrecordTxtLengthOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DnsrecordTxtLength) {
		return nil, false
	}
	return o.DnsrecordTxtLength, true
}

// HasDnsrecordTxtLength returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDnsrecordTxtLength() bool {
	if o != nil && !IsNil(o.DnsrecordTxtLength) {
		return true
	}

	return false
}

// SetDnsrecordTxtLength gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DnsrecordTxtLength field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDnsrecordTxtLength(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DnsrecordTxtLength = &v
}

// GetDnsrecordTxtSensitive returns the DnsrecordTxtSensitive field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnsrecordTxtSensitive() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DnsrecordTxtSensitive) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DnsrecordTxtSensitive
}

// GetDnsrecordTxtSensitiveOk returns a tuple with the DnsrecordTxtSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnsrecordTxtSensitiveOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DnsrecordTxtSensitive) {
		return nil, false
	}
	return o.DnsrecordTxtSensitive, true
}

// HasDnsrecordTxtSensitive returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDnsrecordTxtSensitive() bool {
	if o != nil && !IsNil(o.DnsrecordTxtSensitive) {
		return true
	}

	return false
}

// SetDnsrecordTxtSensitive gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DnsrecordTxtSensitive field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDnsrecordTxtSensitive(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DnsrecordTxtSensitive = &v
}

// GetDnssecDisabled returns the DnssecDisabled field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnssecDisabled() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DnssecDisabled) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DnssecDisabled
}

// GetDnssecDisabledOk returns a tuple with the DnssecDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDnssecDisabledOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DnssecDisabled) {
		return nil, false
	}
	return o.DnssecDisabled, true
}

// HasDnssecDisabled returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDnssecDisabled() bool {
	if o != nil && !IsNil(o.DnssecDisabled) {
		return true
	}

	return false
}

// SetDnssecDisabled gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DnssecDisabled field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDnssecDisabled(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DnssecDisabled = &v
}

// GetDomainTakeover returns the DomainTakeover field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDomainTakeover() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DomainTakeover) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DomainTakeover
}

// GetDomainTakeoverOk returns a tuple with the DomainTakeover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDomainTakeoverOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DomainTakeover) {
		return nil, false
	}
	return o.DomainTakeover, true
}

// HasDomainTakeover returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDomainTakeover() bool {
	if o != nil && !IsNil(o.DomainTakeover) {
		return true
	}

	return false
}

// SetDomainTakeover gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DomainTakeover field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDomainTakeover(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DomainTakeover = &v
}

// GetDuplicatedObject returns the DuplicatedObject field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetDuplicatedObject() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.DuplicatedObject) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.DuplicatedObject
}

// GetDuplicatedObjectOk returns a tuple with the DuplicatedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetDuplicatedObjectOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.DuplicatedObject) {
		return nil, false
	}
	return o.DuplicatedObject, true
}

// HasDuplicatedObject returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasDuplicatedObject() bool {
	if o != nil && !IsNil(o.DuplicatedObject) {
		return true
	}

	return false
}

// SetDuplicatedObject gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the DuplicatedObject field.
func (o *ProfileDetailedConfigurationSecurityTests) SetDuplicatedObject(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.DuplicatedObject = &v
}

// GetErrorTypeInconsistency returns the ErrorTypeInconsistency field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetErrorTypeInconsistency() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ErrorTypeInconsistency) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ErrorTypeInconsistency
}

// GetErrorTypeInconsistencyOk returns a tuple with the ErrorTypeInconsistency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetErrorTypeInconsistencyOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ErrorTypeInconsistency) {
		return nil, false
	}
	return o.ErrorTypeInconsistency, true
}

// HasErrorTypeInconsistency returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasErrorTypeInconsistency() bool {
	if o != nil && !IsNil(o.ErrorTypeInconsistency) {
		return true
	}

	return false
}

// SetErrorTypeInconsistency gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ErrorTypeInconsistency field.
func (o *ProfileDetailedConfigurationSecurityTests) SetErrorTypeInconsistency(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ErrorTypeInconsistency = &v
}

// GetExcessiveBrowserPermissions returns the ExcessiveBrowserPermissions field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExcessiveBrowserPermissions() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExcessiveBrowserPermissions) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExcessiveBrowserPermissions
}

// GetExcessiveBrowserPermissionsOk returns a tuple with the ExcessiveBrowserPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExcessiveBrowserPermissionsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExcessiveBrowserPermissions) {
		return nil, false
	}
	return o.ExcessiveBrowserPermissions, true
}

// HasExcessiveBrowserPermissions returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExcessiveBrowserPermissions() bool {
	if o != nil && !IsNil(o.ExcessiveBrowserPermissions) {
		return true
	}

	return false
}

// SetExcessiveBrowserPermissions gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExcessiveBrowserPermissions field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExcessiveBrowserPermissions(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExcessiveBrowserPermissions = &v
}

// GetExposedMysqlConfig returns the ExposedMysqlConfig field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedMysqlConfig() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExposedMysqlConfig) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExposedMysqlConfig
}

// GetExposedMysqlConfigOk returns a tuple with the ExposedMysqlConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedMysqlConfigOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExposedMysqlConfig) {
		return nil, false
	}
	return o.ExposedMysqlConfig, true
}

// HasExposedMysqlConfig returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExposedMysqlConfig() bool {
	if o != nil && !IsNil(o.ExposedMysqlConfig) {
		return true
	}

	return false
}

// SetExposedMysqlConfig gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExposedMysqlConfig field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExposedMysqlConfig(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExposedMysqlConfig = &v
}

// GetExposedSettingsPhp returns the ExposedSettingsPhp field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSettingsPhp() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExposedSettingsPhp) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExposedSettingsPhp
}

// GetExposedSettingsPhpOk returns a tuple with the ExposedSettingsPhp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSettingsPhpOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExposedSettingsPhp) {
		return nil, false
	}
	return o.ExposedSettingsPhp, true
}

// HasExposedSettingsPhp returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExposedSettingsPhp() bool {
	if o != nil && !IsNil(o.ExposedSettingsPhp) {
		return true
	}

	return false
}

// SetExposedSettingsPhp gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExposedSettingsPhp field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExposedSettingsPhp(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExposedSettingsPhp = &v
}

// GetExposedSourcemap returns the ExposedSourcemap field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSourcemap() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExposedSourcemap) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExposedSourcemap
}

// GetExposedSourcemapOk returns a tuple with the ExposedSourcemap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSourcemapOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExposedSourcemap) {
		return nil, false
	}
	return o.ExposedSourcemap, true
}

// HasExposedSourcemap returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExposedSourcemap() bool {
	if o != nil && !IsNil(o.ExposedSourcemap) {
		return true
	}

	return false
}

// SetExposedSourcemap gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExposedSourcemap field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExposedSourcemap(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExposedSourcemap = &v
}

// GetExposedSqlDumps returns the ExposedSqlDumps field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSqlDumps() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExposedSqlDumps) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExposedSqlDumps
}

// GetExposedSqlDumpsOk returns a tuple with the ExposedSqlDumps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedSqlDumpsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExposedSqlDumps) {
		return nil, false
	}
	return o.ExposedSqlDumps, true
}

// HasExposedSqlDumps returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExposedSqlDumps() bool {
	if o != nil && !IsNil(o.ExposedSqlDumps) {
		return true
	}

	return false
}

// SetExposedSqlDumps gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExposedSqlDumps field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExposedSqlDumps(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExposedSqlDumps = &v
}

// GetFileDisclosure returns the FileDisclosure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetFileDisclosure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.FileDisclosure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.FileDisclosure
}

// GetFileDisclosureOk returns a tuple with the FileDisclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetFileDisclosureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.FileDisclosure) {
		return nil, false
	}
	return o.FileDisclosure, true
}

// HasFileDisclosure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasFileDisclosure() bool {
	if o != nil && !IsNil(o.FileDisclosure) {
		return true
	}

	return false
}

// SetFileDisclosure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the FileDisclosure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetFileDisclosure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.FileDisclosure = &v
}

// GetFileInclusion returns the FileInclusion field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetFileInclusion() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.FileInclusion) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.FileInclusion
}

// GetFileInclusionOk returns a tuple with the FileInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetFileInclusionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.FileInclusion) {
		return nil, false
	}
	return o.FileInclusion, true
}

// HasFileInclusion returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasFileInclusion() bool {
	if o != nil && !IsNil(o.FileInclusion) {
		return true
	}

	return false
}

// SetFileInclusion gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the FileInclusion field.
func (o *ProfileDetailedConfigurationSecurityTests) SetFileInclusion(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.FileInclusion = &v
}

// GetForcedBrowsing returns the ForcedBrowsing field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetForcedBrowsing() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ForcedBrowsing) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ForcedBrowsing
}

// GetForcedBrowsingOk returns a tuple with the ForcedBrowsing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetForcedBrowsingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ForcedBrowsing) {
		return nil, false
	}
	return o.ForcedBrowsing, true
}

// HasForcedBrowsing returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasForcedBrowsing() bool {
	if o != nil && !IsNil(o.ForcedBrowsing) {
		return true
	}

	return false
}

// SetForcedBrowsing gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ForcedBrowsing field.
func (o *ProfileDetailedConfigurationSecurityTests) SetForcedBrowsing(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ForcedBrowsing = &v
}

// GetFrontendLocalstorageSensitiveData returns the FrontendLocalstorageSensitiveData field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetFrontendLocalstorageSensitiveData() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.FrontendLocalstorageSensitiveData) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.FrontendLocalstorageSensitiveData
}

// GetFrontendLocalstorageSensitiveDataOk returns a tuple with the FrontendLocalstorageSensitiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetFrontendLocalstorageSensitiveDataOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.FrontendLocalstorageSensitiveData) {
		return nil, false
	}
	return o.FrontendLocalstorageSensitiveData, true
}

// HasFrontendLocalstorageSensitiveData returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasFrontendLocalstorageSensitiveData() bool {
	if o != nil && !IsNil(o.FrontendLocalstorageSensitiveData) {
		return true
	}

	return false
}

// SetFrontendLocalstorageSensitiveData gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the FrontendLocalstorageSensitiveData field.
func (o *ProfileDetailedConfigurationSecurityTests) SetFrontendLocalstorageSensitiveData(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.FrontendLocalstorageSensitiveData = &v
}

// GetGraphqlAliasLimit returns the GraphqlAliasLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlAliasLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlAliasLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlAliasLimit
}

// GetGraphqlAliasLimitOk returns a tuple with the GraphqlAliasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlAliasLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlAliasLimit) {
		return nil, false
	}
	return o.GraphqlAliasLimit, true
}

// HasGraphqlAliasLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlAliasLimit() bool {
	if o != nil && !IsNil(o.GraphqlAliasLimit) {
		return true
	}

	return false
}

// SetGraphqlAliasLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlAliasLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlAliasLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlAliasLimit = &v
}

// GetGraphqlApq returns the GraphqlApq field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlApq() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlApq) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlApq
}

// GetGraphqlApqOk returns a tuple with the GraphqlApq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlApqOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlApq) {
		return nil, false
	}
	return o.GraphqlApq, true
}

// HasGraphqlApq returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlApq() bool {
	if o != nil && !IsNil(o.GraphqlApq) {
		return true
	}

	return false
}

// SetGraphqlApq gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlApq field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlApq(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlApq = &v
}

// GetGraphqlBatchLimit returns the GraphqlBatchLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlBatchLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlBatchLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlBatchLimit
}

// GetGraphqlBatchLimitOk returns a tuple with the GraphqlBatchLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlBatchLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlBatchLimit) {
		return nil, false
	}
	return o.GraphqlBatchLimit, true
}

// HasGraphqlBatchLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlBatchLimit() bool {
	if o != nil && !IsNil(o.GraphqlBatchLimit) {
		return true
	}

	return false
}

// SetGraphqlBatchLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlBatchLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlBatchLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlBatchLimit = &v
}

// GetGraphqlCircularIntrospection returns the GraphqlCircularIntrospection field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlCircularIntrospection() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlCircularIntrospection) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlCircularIntrospection
}

// GetGraphqlCircularIntrospectionOk returns a tuple with the GraphqlCircularIntrospection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlCircularIntrospectionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlCircularIntrospection) {
		return nil, false
	}
	return o.GraphqlCircularIntrospection, true
}

// HasGraphqlCircularIntrospection returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlCircularIntrospection() bool {
	if o != nil && !IsNil(o.GraphqlCircularIntrospection) {
		return true
	}

	return false
}

// SetGraphqlCircularIntrospection gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlCircularIntrospection field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlCircularIntrospection(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlCircularIntrospection = &v
}

// GetGraphqlContentType returns the GraphqlContentType field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlContentType() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlContentType) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlContentType
}

// GetGraphqlContentTypeOk returns a tuple with the GraphqlContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlContentTypeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlContentType) {
		return nil, false
	}
	return o.GraphqlContentType, true
}

// HasGraphqlContentType returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlContentType() bool {
	if o != nil && !IsNil(o.GraphqlContentType) {
		return true
	}

	return false
}

// SetGraphqlContentType gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlContentType field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlContentType(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlContentType = &v
}

// GetGraphqlDepthLimit returns the GraphqlDepthLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlDepthLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlDepthLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlDepthLimit
}

// GetGraphqlDepthLimitOk returns a tuple with the GraphqlDepthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlDepthLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlDepthLimit) {
		return nil, false
	}
	return o.GraphqlDepthLimit, true
}

// HasGraphqlDepthLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlDepthLimit() bool {
	if o != nil && !IsNil(o.GraphqlDepthLimit) {
		return true
	}

	return false
}

// SetGraphqlDepthLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlDepthLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlDepthLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlDepthLimit = &v
}

// GetGraphqlDirectiveOverload returns the GraphqlDirectiveOverload field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlDirectiveOverload() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlDirectiveOverload) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlDirectiveOverload
}

// GetGraphqlDirectiveOverloadOk returns a tuple with the GraphqlDirectiveOverload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlDirectiveOverloadOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlDirectiveOverload) {
		return nil, false
	}
	return o.GraphqlDirectiveOverload, true
}

// HasGraphqlDirectiveOverload returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlDirectiveOverload() bool {
	if o != nil && !IsNil(o.GraphqlDirectiveOverload) {
		return true
	}

	return false
}

// SetGraphqlDirectiveOverload gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlDirectiveOverload field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlDirectiveOverload(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlDirectiveOverload = &v
}

// GetGraphqlExtensionDisclosure returns the GraphqlExtensionDisclosure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlExtensionDisclosure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlExtensionDisclosure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlExtensionDisclosure
}

// GetGraphqlExtensionDisclosureOk returns a tuple with the GraphqlExtensionDisclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlExtensionDisclosureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlExtensionDisclosure) {
		return nil, false
	}
	return o.GraphqlExtensionDisclosure, true
}

// HasGraphqlExtensionDisclosure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlExtensionDisclosure() bool {
	if o != nil && !IsNil(o.GraphqlExtensionDisclosure) {
		return true
	}

	return false
}

// SetGraphqlExtensionDisclosure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlExtensionDisclosure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlExtensionDisclosure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlExtensionDisclosure = &v
}

// GetGraphqlFieldDuplication returns the GraphqlFieldDuplication field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldDuplication() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlFieldDuplication) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlFieldDuplication
}

// GetGraphqlFieldDuplicationOk returns a tuple with the GraphqlFieldDuplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldDuplicationOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlFieldDuplication) {
		return nil, false
	}
	return o.GraphqlFieldDuplication, true
}

// HasGraphqlFieldDuplication returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlFieldDuplication() bool {
	if o != nil && !IsNil(o.GraphqlFieldDuplication) {
		return true
	}

	return false
}

// SetGraphqlFieldDuplication gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlFieldDuplication field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlFieldDuplication(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlFieldDuplication = &v
}

// GetGraphqlFieldLimit returns the GraphqlFieldLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlFieldLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlFieldLimit
}

// GetGraphqlFieldLimitOk returns a tuple with the GraphqlFieldLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlFieldLimit) {
		return nil, false
	}
	return o.GraphqlFieldLimit, true
}

// HasGraphqlFieldLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlFieldLimit() bool {
	if o != nil && !IsNil(o.GraphqlFieldLimit) {
		return true
	}

	return false
}

// SetGraphqlFieldLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlFieldLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlFieldLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlFieldLimit = &v
}

// GetGraphqlFieldSuggestion returns the GraphqlFieldSuggestion field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldSuggestion() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlFieldSuggestion) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlFieldSuggestion
}

// GetGraphqlFieldSuggestionOk returns a tuple with the GraphqlFieldSuggestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlFieldSuggestionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlFieldSuggestion) {
		return nil, false
	}
	return o.GraphqlFieldSuggestion, true
}

// HasGraphqlFieldSuggestion returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlFieldSuggestion() bool {
	if o != nil && !IsNil(o.GraphqlFieldSuggestion) {
		return true
	}

	return false
}

// SetGraphqlFieldSuggestion gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlFieldSuggestion field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlFieldSuggestion(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlFieldSuggestion = &v
}

// GetGraphqlRecursiveFragment returns the GraphqlRecursiveFragment field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlRecursiveFragment() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlRecursiveFragment) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlRecursiveFragment
}

// GetGraphqlRecursiveFragmentOk returns a tuple with the GraphqlRecursiveFragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlRecursiveFragmentOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlRecursiveFragment) {
		return nil, false
	}
	return o.GraphqlRecursiveFragment, true
}

// HasGraphqlRecursiveFragment returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlRecursiveFragment() bool {
	if o != nil && !IsNil(o.GraphqlRecursiveFragment) {
		return true
	}

	return false
}

// SetGraphqlRecursiveFragment gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlRecursiveFragment field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlRecursiveFragment(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlRecursiveFragment = &v
}

// GetGraphqlResponseFormat returns the GraphqlResponseFormat field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlResponseFormat() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlResponseFormat) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlResponseFormat
}

// GetGraphqlResponseFormatOk returns a tuple with the GraphqlResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlResponseFormatOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlResponseFormat) {
		return nil, false
	}
	return o.GraphqlResponseFormat, true
}

// HasGraphqlResponseFormat returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlResponseFormat() bool {
	if o != nil && !IsNil(o.GraphqlResponseFormat) {
		return true
	}

	return false
}

// SetGraphqlResponseFormat gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlResponseFormat field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlResponseFormat(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlResponseFormat = &v
}

// GetGraphqlWidthLimit returns the GraphqlWidthLimit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlWidthLimit() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GraphqlWidthLimit) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GraphqlWidthLimit
}

// GetGraphqlWidthLimitOk returns a tuple with the GraphqlWidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGraphqlWidthLimitOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GraphqlWidthLimit) {
		return nil, false
	}
	return o.GraphqlWidthLimit, true
}

// HasGraphqlWidthLimit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGraphqlWidthLimit() bool {
	if o != nil && !IsNil(o.GraphqlWidthLimit) {
		return true
	}

	return false
}

// SetGraphqlWidthLimit gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GraphqlWidthLimit field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGraphqlWidthLimit(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GraphqlWidthLimit = &v
}

// GetGuessableCookieValue returns the GuessableCookieValue field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetGuessableCookieValue() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.GuessableCookieValue) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.GuessableCookieValue
}

// GetGuessableCookieValueOk returns a tuple with the GuessableCookieValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetGuessableCookieValueOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.GuessableCookieValue) {
		return nil, false
	}
	return o.GuessableCookieValue, true
}

// HasGuessableCookieValue returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasGuessableCookieValue() bool {
	if o != nil && !IsNil(o.GuessableCookieValue) {
		return true
	}

	return false
}

// SetGuessableCookieValue gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the GuessableCookieValue field.
func (o *ProfileDetailedConfigurationSecurityTests) SetGuessableCookieValue(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.GuessableCookieValue = &v
}

// GetHeaderAccessControlAllowOrigin returns the HeaderAccessControlAllowOrigin field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderAccessControlAllowOrigin() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderAccessControlAllowOrigin) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderAccessControlAllowOrigin
}

// GetHeaderAccessControlAllowOriginOk returns a tuple with the HeaderAccessControlAllowOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderAccessControlAllowOriginOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderAccessControlAllowOrigin) {
		return nil, false
	}
	return o.HeaderAccessControlAllowOrigin, true
}

// HasHeaderAccessControlAllowOrigin returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderAccessControlAllowOrigin() bool {
	if o != nil && !IsNil(o.HeaderAccessControlAllowOrigin) {
		return true
	}

	return false
}

// SetHeaderAccessControlAllowOrigin gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderAccessControlAllowOrigin field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderAccessControlAllowOrigin(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderAccessControlAllowOrigin = &v
}

// GetHeaderCacheControl returns the HeaderCacheControl field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderCacheControl() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderCacheControl) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderCacheControl
}

// GetHeaderCacheControlOk returns a tuple with the HeaderCacheControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderCacheControlOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderCacheControl) {
		return nil, false
	}
	return o.HeaderCacheControl, true
}

// HasHeaderCacheControl returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderCacheControl() bool {
	if o != nil && !IsNil(o.HeaderCacheControl) {
		return true
	}

	return false
}

// SetHeaderCacheControl gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderCacheControl field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderCacheControl(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderCacheControl = &v
}

// GetHeaderContentSecurityPolicy returns the HeaderContentSecurityPolicy field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderContentSecurityPolicy() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderContentSecurityPolicy) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderContentSecurityPolicy
}

// GetHeaderContentSecurityPolicyOk returns a tuple with the HeaderContentSecurityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderContentSecurityPolicyOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderContentSecurityPolicy) {
		return nil, false
	}
	return o.HeaderContentSecurityPolicy, true
}

// HasHeaderContentSecurityPolicy returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderContentSecurityPolicy() bool {
	if o != nil && !IsNil(o.HeaderContentSecurityPolicy) {
		return true
	}

	return false
}

// SetHeaderContentSecurityPolicy gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderContentSecurityPolicy field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderContentSecurityPolicy(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderContentSecurityPolicy = &v
}

// GetHeaderContentType returns the HeaderContentType field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderContentType() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderContentType) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderContentType
}

// GetHeaderContentTypeOk returns a tuple with the HeaderContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderContentTypeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderContentType) {
		return nil, false
	}
	return o.HeaderContentType, true
}

// HasHeaderContentType returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderContentType() bool {
	if o != nil && !IsNil(o.HeaderContentType) {
		return true
	}

	return false
}

// SetHeaderContentType gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderContentType field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderContentType(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderContentType = &v
}

// GetHeaderLeak returns the HeaderLeak field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderLeak() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderLeak) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderLeak
}

// GetHeaderLeakOk returns a tuple with the HeaderLeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderLeakOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderLeak) {
		return nil, false
	}
	return o.HeaderLeak, true
}

// HasHeaderLeak returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderLeak() bool {
	if o != nil && !IsNil(o.HeaderLeak) {
		return true
	}

	return false
}

// SetHeaderLeak gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderLeak field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderLeak(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderLeak = &v
}

// GetHeaderSetCookie returns the HeaderSetCookie field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderSetCookie() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderSetCookie) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderSetCookie
}

// GetHeaderSetCookieOk returns a tuple with the HeaderSetCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderSetCookieOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderSetCookie) {
		return nil, false
	}
	return o.HeaderSetCookie, true
}

// HasHeaderSetCookie returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderSetCookie() bool {
	if o != nil && !IsNil(o.HeaderSetCookie) {
		return true
	}

	return false
}

// SetHeaderSetCookie gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderSetCookie field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderSetCookie(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderSetCookie = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaders() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Headers) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeadersOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Headers field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaders(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Headers = &v
}

// GetHeaderStrictTransportSecurity returns the HeaderStrictTransportSecurity field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderStrictTransportSecurity() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderStrictTransportSecurity) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderStrictTransportSecurity
}

// GetHeaderStrictTransportSecurityOk returns a tuple with the HeaderStrictTransportSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderStrictTransportSecurityOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderStrictTransportSecurity) {
		return nil, false
	}
	return o.HeaderStrictTransportSecurity, true
}

// HasHeaderStrictTransportSecurity returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderStrictTransportSecurity() bool {
	if o != nil && !IsNil(o.HeaderStrictTransportSecurity) {
		return true
	}

	return false
}

// SetHeaderStrictTransportSecurity gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderStrictTransportSecurity field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderStrictTransportSecurity(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderStrictTransportSecurity = &v
}

// GetHeaderXContentTypeOptions returns the HeaderXContentTypeOptions field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderXContentTypeOptions() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderXContentTypeOptions) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderXContentTypeOptions
}

// GetHeaderXContentTypeOptionsOk returns a tuple with the HeaderXContentTypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderXContentTypeOptionsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderXContentTypeOptions) {
		return nil, false
	}
	return o.HeaderXContentTypeOptions, true
}

// HasHeaderXContentTypeOptions returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderXContentTypeOptions() bool {
	if o != nil && !IsNil(o.HeaderXContentTypeOptions) {
		return true
	}

	return false
}

// SetHeaderXContentTypeOptions gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderXContentTypeOptions field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderXContentTypeOptions(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderXContentTypeOptions = &v
}

// GetHeaderXFrameOptions returns the HeaderXFrameOptions field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderXFrameOptions() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HeaderXFrameOptions) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HeaderXFrameOptions
}

// GetHeaderXFrameOptionsOk returns a tuple with the HeaderXFrameOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHeaderXFrameOptionsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HeaderXFrameOptions) {
		return nil, false
	}
	return o.HeaderXFrameOptions, true
}

// HasHeaderXFrameOptions returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHeaderXFrameOptions() bool {
	if o != nil && !IsNil(o.HeaderXFrameOptions) {
		return true
	}

	return false
}

// SetHeaderXFrameOptions gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HeaderXFrameOptions field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHeaderXFrameOptions(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HeaderXFrameOptions = &v
}

// GetHtmlInjection returns the HtmlInjection field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHtmlInjection() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HtmlInjection) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HtmlInjection
}

// GetHtmlInjectionOk returns a tuple with the HtmlInjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHtmlInjectionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HtmlInjection) {
		return nil, false
	}
	return o.HtmlInjection, true
}

// HasHtmlInjection returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHtmlInjection() bool {
	if o != nil && !IsNil(o.HtmlInjection) {
		return true
	}

	return false
}

// SetHtmlInjection gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HtmlInjection field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHtmlInjection(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HtmlInjection = &v
}

// GetHttpParamPollution returns the HttpParamPollution field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetHttpParamPollution() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.HttpParamPollution) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.HttpParamPollution
}

// GetHttpParamPollutionOk returns a tuple with the HttpParamPollution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetHttpParamPollutionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.HttpParamPollution) {
		return nil, false
	}
	return o.HttpParamPollution, true
}

// HasHttpParamPollution returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasHttpParamPollution() bool {
	if o != nil && !IsNil(o.HttpParamPollution) {
		return true
	}

	return false
}

// SetHttpParamPollution gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the HttpParamPollution field.
func (o *ProfileDetailedConfigurationSecurityTests) SetHttpParamPollution(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.HttpParamPollution = &v
}

// GetIdeEnabled returns the IdeEnabled field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetIdeEnabled() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.IdeEnabled) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.IdeEnabled
}

// GetIdeEnabledOk returns a tuple with the IdeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetIdeEnabledOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.IdeEnabled) {
		return nil, false
	}
	return o.IdeEnabled, true
}

// HasIdeEnabled returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasIdeEnabled() bool {
	if o != nil && !IsNil(o.IdeEnabled) {
		return true
	}

	return false
}

// SetIdeEnabled gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the IdeEnabled field.
func (o *ProfileDetailedConfigurationSecurityTests) SetIdeEnabled(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.IdeEnabled = &v
}

// GetImproperInput returns the ImproperInput field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetImproperInput() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ImproperInput) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ImproperInput
}

// GetImproperInputOk returns a tuple with the ImproperInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetImproperInputOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ImproperInput) {
		return nil, false
	}
	return o.ImproperInput, true
}

// HasImproperInput returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasImproperInput() bool {
	if o != nil && !IsNil(o.ImproperInput) {
		return true
	}

	return false
}

// SetImproperInput gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ImproperInput field.
func (o *ProfileDetailedConfigurationSecurityTests) SetImproperInput(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ImproperInput = &v
}

// GetImproperInputStored returns the ImproperInputStored field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetImproperInputStored() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ImproperInputStored) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ImproperInputStored
}

// GetImproperInputStoredOk returns a tuple with the ImproperInputStored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetImproperInputStoredOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ImproperInputStored) {
		return nil, false
	}
	return o.ImproperInputStored, true
}

// HasImproperInputStored returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasImproperInputStored() bool {
	if o != nil && !IsNil(o.ImproperInputStored) {
		return true
	}

	return false
}

// SetImproperInputStored gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ImproperInputStored field.
func (o *ProfileDetailedConfigurationSecurityTests) SetImproperInputStored(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ImproperInputStored = &v
}

// GetIntrospectionEnabled returns the IntrospectionEnabled field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetIntrospectionEnabled() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.IntrospectionEnabled) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.IntrospectionEnabled
}

// GetIntrospectionEnabledOk returns a tuple with the IntrospectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetIntrospectionEnabledOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.IntrospectionEnabled) {
		return nil, false
	}
	return o.IntrospectionEnabled, true
}

// HasIntrospectionEnabled returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasIntrospectionEnabled() bool {
	if o != nil && !IsNil(o.IntrospectionEnabled) {
		return true
	}

	return false
}

// SetIntrospectionEnabled gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the IntrospectionEnabled field.
func (o *ProfileDetailedConfigurationSecurityTests) SetIntrospectionEnabled(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.IntrospectionEnabled = &v
}

// GetInvalidAllof returns the InvalidAllof field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidAllof() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.InvalidAllof) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.InvalidAllof
}

// GetInvalidAllofOk returns a tuple with the InvalidAllof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidAllofOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.InvalidAllof) {
		return nil, false
	}
	return o.InvalidAllof, true
}

// HasInvalidAllof returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasInvalidAllof() bool {
	if o != nil && !IsNil(o.InvalidAllof) {
		return true
	}

	return false
}

// SetInvalidAllof gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the InvalidAllof field.
func (o *ProfileDetailedConfigurationSecurityTests) SetInvalidAllof(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.InvalidAllof = &v
}

// GetInvalidParametersInPath returns the InvalidParametersInPath field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidParametersInPath() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.InvalidParametersInPath) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.InvalidParametersInPath
}

// GetInvalidParametersInPathOk returns a tuple with the InvalidParametersInPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidParametersInPathOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.InvalidParametersInPath) {
		return nil, false
	}
	return o.InvalidParametersInPath, true
}

// HasInvalidParametersInPath returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasInvalidParametersInPath() bool {
	if o != nil && !IsNil(o.InvalidParametersInPath) {
		return true
	}

	return false
}

// SetInvalidParametersInPath gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the InvalidParametersInPath field.
func (o *ProfileDetailedConfigurationSecurityTests) SetInvalidParametersInPath(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.InvalidParametersInPath = &v
}

// GetInvalidPersistedQuery returns the InvalidPersistedQuery field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidPersistedQuery() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.InvalidPersistedQuery) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.InvalidPersistedQuery
}

// GetInvalidPersistedQueryOk returns a tuple with the InvalidPersistedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidPersistedQueryOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.InvalidPersistedQuery) {
		return nil, false
	}
	return o.InvalidPersistedQuery, true
}

// HasInvalidPersistedQuery returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasInvalidPersistedQuery() bool {
	if o != nil && !IsNil(o.InvalidPersistedQuery) {
		return true
	}

	return false
}

// SetInvalidPersistedQuery gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the InvalidPersistedQuery field.
func (o *ProfileDetailedConfigurationSecurityTests) SetInvalidPersistedQuery(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.InvalidPersistedQuery = &v
}

// GetInvalidRefs returns the InvalidRefs field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidRefs() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.InvalidRefs) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.InvalidRefs
}

// GetInvalidRefsOk returns a tuple with the InvalidRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetInvalidRefsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.InvalidRefs) {
		return nil, false
	}
	return o.InvalidRefs, true
}

// HasInvalidRefs returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasInvalidRefs() bool {
	if o != nil && !IsNil(o.InvalidRefs) {
		return true
	}

	return false
}

// SetInvalidRefs gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the InvalidRefs field.
func (o *ProfileDetailedConfigurationSecurityTests) SetInvalidRefs(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.InvalidRefs = &v
}

// GetJwtAlgConfusion returns the JwtAlgConfusion field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtAlgConfusion() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.JwtAlgConfusion) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.JwtAlgConfusion
}

// GetJwtAlgConfusionOk returns a tuple with the JwtAlgConfusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtAlgConfusionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.JwtAlgConfusion) {
		return nil, false
	}
	return o.JwtAlgConfusion, true
}

// HasJwtAlgConfusion returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasJwtAlgConfusion() bool {
	if o != nil && !IsNil(o.JwtAlgConfusion) {
		return true
	}

	return false
}

// SetJwtAlgConfusion gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the JwtAlgConfusion field.
func (o *ProfileDetailedConfigurationSecurityTests) SetJwtAlgConfusion(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.JwtAlgConfusion = &v
}

// GetJwtAlgNone returns the JwtAlgNone field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtAlgNone() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.JwtAlgNone) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.JwtAlgNone
}

// GetJwtAlgNoneOk returns a tuple with the JwtAlgNone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtAlgNoneOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.JwtAlgNone) {
		return nil, false
	}
	return o.JwtAlgNone, true
}

// HasJwtAlgNone returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasJwtAlgNone() bool {
	if o != nil && !IsNil(o.JwtAlgNone) {
		return true
	}

	return false
}

// SetJwtAlgNone gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the JwtAlgNone field.
func (o *ProfileDetailedConfigurationSecurityTests) SetJwtAlgNone(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.JwtAlgNone = &v
}

// GetExposedJwt returns the ExposedJwt field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedJwt() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ExposedJwt) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ExposedJwt
}

// GetExposedJwtOk returns a tuple with the ExposedJwt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetExposedJwtOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ExposedJwt) {
		return nil, false
	}
	return o.ExposedJwt, true
}

// HasExposedJwt returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasExposedJwt() bool {
	if o != nil && !IsNil(o.ExposedJwt) {
		return true
	}

	return false
}

// SetExposedJwt gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ExposedJwt field.
func (o *ProfileDetailedConfigurationSecurityTests) SetExposedJwt(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ExposedJwt = &v
}

// GetJwtSignCheck returns the JwtSignCheck field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtSignCheck() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.JwtSignCheck) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.JwtSignCheck
}

// GetJwtSignCheckOk returns a tuple with the JwtSignCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetJwtSignCheckOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.JwtSignCheck) {
		return nil, false
	}
	return o.JwtSignCheck, true
}

// HasJwtSignCheck returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasJwtSignCheck() bool {
	if o != nil && !IsNil(o.JwtSignCheck) {
		return true
	}

	return false
}

// SetJwtSignCheck gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the JwtSignCheck field.
func (o *ProfileDetailedConfigurationSecurityTests) SetJwtSignCheck(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.JwtSignCheck = &v
}

// GetLargeJsonInput returns the LargeJsonInput field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLargeJsonInput() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LargeJsonInput) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LargeJsonInput
}

// GetLargeJsonInputOk returns a tuple with the LargeJsonInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLargeJsonInputOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LargeJsonInput) {
		return nil, false
	}
	return o.LargeJsonInput, true
}

// HasLargeJsonInput returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLargeJsonInput() bool {
	if o != nil && !IsNil(o.LargeJsonInput) {
		return true
	}

	return false
}

// SetLargeJsonInput gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LargeJsonInput field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLargeJsonInput(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LargeJsonInput = &v
}

// GetLeakingAuthentication returns the LeakingAuthentication field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLeakingAuthentication() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LeakingAuthentication) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LeakingAuthentication
}

// GetLeakingAuthenticationOk returns a tuple with the LeakingAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLeakingAuthenticationOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LeakingAuthentication) {
		return nil, false
	}
	return o.LeakingAuthentication, true
}

// HasLeakingAuthentication returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLeakingAuthentication() bool {
	if o != nil && !IsNil(o.LeakingAuthentication) {
		return true
	}

	return false
}

// SetLeakingAuthentication gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LeakingAuthentication field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLeakingAuthentication(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LeakingAuthentication = &v
}

// GetLlmDetection returns the LlmDetection field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmDetection() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmDetection) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmDetection
}

// GetLlmDetectionOk returns a tuple with the LlmDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmDetectionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmDetection) {
		return nil, false
	}
	return o.LlmDetection, true
}

// HasLlmDetection returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmDetection() bool {
	if o != nil && !IsNil(o.LlmDetection) {
		return true
	}

	return false
}

// SetLlmDetection gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmDetection field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmDetection(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmDetection = &v
}

// GetLlmExcessiveAgency returns the LlmExcessiveAgency field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmExcessiveAgency() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmExcessiveAgency) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmExcessiveAgency
}

// GetLlmExcessiveAgencyOk returns a tuple with the LlmExcessiveAgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmExcessiveAgencyOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmExcessiveAgency) {
		return nil, false
	}
	return o.LlmExcessiveAgency, true
}

// HasLlmExcessiveAgency returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmExcessiveAgency() bool {
	if o != nil && !IsNil(o.LlmExcessiveAgency) {
		return true
	}

	return false
}

// SetLlmExcessiveAgency gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmExcessiveAgency field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmExcessiveAgency(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmExcessiveAgency = &v
}

// GetLlmInsecureOutputHandling returns the LlmInsecureOutputHandling field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmInsecureOutputHandling() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmInsecureOutputHandling) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmInsecureOutputHandling
}

// GetLlmInsecureOutputHandlingOk returns a tuple with the LlmInsecureOutputHandling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmInsecureOutputHandlingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmInsecureOutputHandling) {
		return nil, false
	}
	return o.LlmInsecureOutputHandling, true
}

// HasLlmInsecureOutputHandling returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmInsecureOutputHandling() bool {
	if o != nil && !IsNil(o.LlmInsecureOutputHandling) {
		return true
	}

	return false
}

// SetLlmInsecureOutputHandling gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmInsecureOutputHandling field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmInsecureOutputHandling(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmInsecureOutputHandling = &v
}

// GetLlmInsecurePluginDesign returns the LlmInsecurePluginDesign field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmInsecurePluginDesign() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmInsecurePluginDesign) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmInsecurePluginDesign
}

// GetLlmInsecurePluginDesignOk returns a tuple with the LlmInsecurePluginDesign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmInsecurePluginDesignOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmInsecurePluginDesign) {
		return nil, false
	}
	return o.LlmInsecurePluginDesign, true
}

// HasLlmInsecurePluginDesign returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmInsecurePluginDesign() bool {
	if o != nil && !IsNil(o.LlmInsecurePluginDesign) {
		return true
	}

	return false
}

// SetLlmInsecurePluginDesign gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmInsecurePluginDesign field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmInsecurePluginDesign(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmInsecurePluginDesign = &v
}

// GetLlmJailBreak returns the LlmJailBreak field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmJailBreak() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmJailBreak) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmJailBreak
}

// GetLlmJailBreakOk returns a tuple with the LlmJailBreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmJailBreakOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmJailBreak) {
		return nil, false
	}
	return o.LlmJailBreak, true
}

// HasLlmJailBreak returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmJailBreak() bool {
	if o != nil && !IsNil(o.LlmJailBreak) {
		return true
	}

	return false
}

// SetLlmJailBreak gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmJailBreak field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmJailBreak(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmJailBreak = &v
}

// GetLlmModelDos returns the LlmModelDos field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmModelDos() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmModelDos) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmModelDos
}

// GetLlmModelDosOk returns a tuple with the LlmModelDos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmModelDosOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmModelDos) {
		return nil, false
	}
	return o.LlmModelDos, true
}

// HasLlmModelDos returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmModelDos() bool {
	if o != nil && !IsNil(o.LlmModelDos) {
		return true
	}

	return false
}

// SetLlmModelDos gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmModelDos field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmModelDos(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmModelDos = &v
}

// GetLlmModelTheft returns the LlmModelTheft field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmModelTheft() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmModelTheft) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmModelTheft
}

// GetLlmModelTheftOk returns a tuple with the LlmModelTheft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmModelTheftOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmModelTheft) {
		return nil, false
	}
	return o.LlmModelTheft, true
}

// HasLlmModelTheft returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmModelTheft() bool {
	if o != nil && !IsNil(o.LlmModelTheft) {
		return true
	}

	return false
}

// SetLlmModelTheft gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmModelTheft field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmModelTheft(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmModelTheft = &v
}

// GetLlmOverreliance returns the LlmOverreliance field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmOverreliance() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmOverreliance) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmOverreliance
}

// GetLlmOverrelianceOk returns a tuple with the LlmOverreliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmOverrelianceOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmOverreliance) {
		return nil, false
	}
	return o.LlmOverreliance, true
}

// HasLlmOverreliance returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmOverreliance() bool {
	if o != nil && !IsNil(o.LlmOverreliance) {
		return true
	}

	return false
}

// SetLlmOverreliance gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmOverreliance field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmOverreliance(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmOverreliance = &v
}

// GetLlmPromptInjection returns the LlmPromptInjection field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmPromptInjection() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmPromptInjection) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmPromptInjection
}

// GetLlmPromptInjectionOk returns a tuple with the LlmPromptInjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmPromptInjectionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmPromptInjection) {
		return nil, false
	}
	return o.LlmPromptInjection, true
}

// HasLlmPromptInjection returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmPromptInjection() bool {
	if o != nil && !IsNil(o.LlmPromptInjection) {
		return true
	}

	return false
}

// SetLlmPromptInjection gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmPromptInjection field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmPromptInjection(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmPromptInjection = &v
}

// GetLlmSensitiveInformationDisclosure returns the LlmSensitiveInformationDisclosure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmSensitiveInformationDisclosure() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmSensitiveInformationDisclosure) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmSensitiveInformationDisclosure
}

// GetLlmSensitiveInformationDisclosureOk returns a tuple with the LlmSensitiveInformationDisclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmSensitiveInformationDisclosureOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmSensitiveInformationDisclosure) {
		return nil, false
	}
	return o.LlmSensitiveInformationDisclosure, true
}

// HasLlmSensitiveInformationDisclosure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmSensitiveInformationDisclosure() bool {
	if o != nil && !IsNil(o.LlmSensitiveInformationDisclosure) {
		return true
	}

	return false
}

// SetLlmSensitiveInformationDisclosure gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmSensitiveInformationDisclosure field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmSensitiveInformationDisclosure(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmSensitiveInformationDisclosure = &v
}

// GetLlmSupplyChainVulnerabilities returns the LlmSupplyChainVulnerabilities field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmSupplyChainVulnerabilities() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmSupplyChainVulnerabilities) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmSupplyChainVulnerabilities
}

// GetLlmSupplyChainVulnerabilitiesOk returns a tuple with the LlmSupplyChainVulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmSupplyChainVulnerabilitiesOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmSupplyChainVulnerabilities) {
		return nil, false
	}
	return o.LlmSupplyChainVulnerabilities, true
}

// HasLlmSupplyChainVulnerabilities returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmSupplyChainVulnerabilities() bool {
	if o != nil && !IsNil(o.LlmSupplyChainVulnerabilities) {
		return true
	}

	return false
}

// SetLlmSupplyChainVulnerabilities gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmSupplyChainVulnerabilities field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmSupplyChainVulnerabilities(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmSupplyChainVulnerabilities = &v
}

// GetLlmTrainingDataPoisoning returns the LlmTrainingDataPoisoning field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmTrainingDataPoisoning() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.LlmTrainingDataPoisoning) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.LlmTrainingDataPoisoning
}

// GetLlmTrainingDataPoisoningOk returns a tuple with the LlmTrainingDataPoisoning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLlmTrainingDataPoisoningOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.LlmTrainingDataPoisoning) {
		return nil, false
	}
	return o.LlmTrainingDataPoisoning, true
}

// HasLlmTrainingDataPoisoning returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLlmTrainingDataPoisoning() bool {
	if o != nil && !IsNil(o.LlmTrainingDataPoisoning) {
		return true
	}

	return false
}

// SetLlmTrainingDataPoisoning gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the LlmTrainingDataPoisoning field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLlmTrainingDataPoisoning(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.LlmTrainingDataPoisoning = &v
}

// GetLog4shell returns the Log4shell field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetLog4shell() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Log4shell) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Log4shell
}

// GetLog4shellOk returns a tuple with the Log4shell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetLog4shellOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Log4shell) {
		return nil, false
	}
	return o.Log4shell, true
}

// HasLog4shell returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasLog4shell() bool {
	if o != nil && !IsNil(o.Log4shell) {
		return true
	}

	return false
}

// SetLog4shell gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Log4shell field.
func (o *ProfileDetailedConfigurationSecurityTests) SetLog4shell(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Log4shell = &v
}

// GetMassAssignment returns the MassAssignment field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetMassAssignment() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.MassAssignment) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.MassAssignment
}

// GetMassAssignmentOk returns a tuple with the MassAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetMassAssignmentOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.MassAssignment) {
		return nil, false
	}
	return o.MassAssignment, true
}

// HasMassAssignment returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasMassAssignment() bool {
	if o != nil && !IsNil(o.MassAssignment) {
		return true
	}

	return false
}

// SetMassAssignment gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the MassAssignment field.
func (o *ProfileDetailedConfigurationSecurityTests) SetMassAssignment(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.MassAssignment = &v
}

// GetMismatchingPersistedQueriesAndSchema returns the MismatchingPersistedQueriesAndSchema field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetMismatchingPersistedQueriesAndSchema() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.MismatchingPersistedQueriesAndSchema) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.MismatchingPersistedQueriesAndSchema
}

// GetMismatchingPersistedQueriesAndSchemaOk returns a tuple with the MismatchingPersistedQueriesAndSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetMismatchingPersistedQueriesAndSchemaOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.MismatchingPersistedQueriesAndSchema) {
		return nil, false
	}
	return o.MismatchingPersistedQueriesAndSchema, true
}

// HasMismatchingPersistedQueriesAndSchema returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasMismatchingPersistedQueriesAndSchema() bool {
	if o != nil && !IsNil(o.MismatchingPersistedQueriesAndSchema) {
		return true
	}

	return false
}

// SetMismatchingPersistedQueriesAndSchema gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the MismatchingPersistedQueriesAndSchema field.
func (o *ProfileDetailedConfigurationSecurityTests) SetMismatchingPersistedQueriesAndSchema(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.MismatchingPersistedQueriesAndSchema = &v
}

// GetNosql returns the Nosql field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetNosql() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Nosql) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Nosql
}

// GetNosqlOk returns a tuple with the Nosql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetNosqlOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Nosql) {
		return nil, false
	}
	return o.Nosql, true
}

// HasNosql returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasNosql() bool {
	if o != nil && !IsNil(o.Nosql) {
		return true
	}

	return false
}

// SetNosql gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Nosql field.
func (o *ProfileDetailedConfigurationSecurityTests) SetNosql(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Nosql = &v
}

// GetNosqlStored returns the NosqlStored field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetNosqlStored() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.NosqlStored) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.NosqlStored
}

// GetNosqlStoredOk returns a tuple with the NosqlStored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetNosqlStoredOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.NosqlStored) {
		return nil, false
	}
	return o.NosqlStored, true
}

// HasNosqlStored returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasNosqlStored() bool {
	if o != nil && !IsNil(o.NosqlStored) {
		return true
	}

	return false
}

// SetNosqlStored gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the NosqlStored field.
func (o *ProfileDetailedConfigurationSecurityTests) SetNosqlStored(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.NosqlStored = &v
}

// GetNuclei returns the Nuclei field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetNuclei() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Nuclei) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Nuclei
}

// GetNucleiOk returns a tuple with the Nuclei field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetNucleiOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Nuclei) {
		return nil, false
	}
	return o.Nuclei, true
}

// HasNuclei returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasNuclei() bool {
	if o != nil && !IsNil(o.Nuclei) {
		return true
	}

	return false
}

// SetNuclei gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Nuclei field.
func (o *ProfileDetailedConfigurationSecurityTests) SetNuclei(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Nuclei = &v
}

// GetOpenPort returns the OpenPort field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetOpenPort() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.OpenPort) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.OpenPort
}

// GetOpenPortOk returns a tuple with the OpenPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetOpenPortOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.OpenPort) {
		return nil, false
	}
	return o.OpenPort, true
}

// HasOpenPort returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasOpenPort() bool {
	if o != nil && !IsNil(o.OpenPort) {
		return true
	}

	return false
}

// SetOpenPort gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the OpenPort field.
func (o *ProfileDetailedConfigurationSecurityTests) SetOpenPort(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.OpenPort = &v
}

// GetOpenRedirect returns the OpenRedirect field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetOpenRedirect() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.OpenRedirect) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.OpenRedirect
}

// GetOpenRedirectOk returns a tuple with the OpenRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetOpenRedirectOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.OpenRedirect) {
		return nil, false
	}
	return o.OpenRedirect, true
}

// HasOpenRedirect returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasOpenRedirect() bool {
	if o != nil && !IsNil(o.OpenRedirect) {
		return true
	}

	return false
}

// SetOpenRedirect gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the OpenRedirect field.
func (o *ProfileDetailedConfigurationSecurityTests) SetOpenRedirect(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.OpenRedirect = &v
}

// GetPaginationMissing returns the PaginationMissing field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPaginationMissing() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PaginationMissing) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PaginationMissing
}

// GetPaginationMissingOk returns a tuple with the PaginationMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPaginationMissingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PaginationMissing) {
		return nil, false
	}
	return o.PaginationMissing, true
}

// HasPaginationMissing returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPaginationMissing() bool {
	if o != nil && !IsNil(o.PaginationMissing) {
		return true
	}

	return false
}

// SetPaginationMissing gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PaginationMissing field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPaginationMissing(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PaginationMissing = &v
}

// GetPasswordFieldAutocompletion returns the PasswordFieldAutocompletion field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPasswordFieldAutocompletion() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PasswordFieldAutocompletion) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PasswordFieldAutocompletion
}

// GetPasswordFieldAutocompletionOk returns a tuple with the PasswordFieldAutocompletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPasswordFieldAutocompletionOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PasswordFieldAutocompletion) {
		return nil, false
	}
	return o.PasswordFieldAutocompletion, true
}

// HasPasswordFieldAutocompletion returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPasswordFieldAutocompletion() bool {
	if o != nil && !IsNil(o.PasswordFieldAutocompletion) {
		return true
	}

	return false
}

// SetPasswordFieldAutocompletion gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PasswordFieldAutocompletion field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPasswordFieldAutocompletion(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PasswordFieldAutocompletion = &v
}

// GetPermissiveJsonInput returns the PermissiveJsonInput field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPermissiveJsonInput() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PermissiveJsonInput) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PermissiveJsonInput
}

// GetPermissiveJsonInputOk returns a tuple with the PermissiveJsonInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPermissiveJsonInputOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PermissiveJsonInput) {
		return nil, false
	}
	return o.PermissiveJsonInput, true
}

// HasPermissiveJsonInput returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPermissiveJsonInput() bool {
	if o != nil && !IsNil(o.PermissiveJsonInput) {
		return true
	}

	return false
}

// SetPermissiveJsonInput gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PermissiveJsonInput field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPermissiveJsonInput(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PermissiveJsonInput = &v
}

// GetPositiveIntegerValidation returns the PositiveIntegerValidation field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPositiveIntegerValidation() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PositiveIntegerValidation) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PositiveIntegerValidation
}

// GetPositiveIntegerValidationOk returns a tuple with the PositiveIntegerValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPositiveIntegerValidationOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PositiveIntegerValidation) {
		return nil, false
	}
	return o.PositiveIntegerValidation, true
}

// HasPositiveIntegerValidation returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPositiveIntegerValidation() bool {
	if o != nil && !IsNil(o.PositiveIntegerValidation) {
		return true
	}

	return false
}

// SetPositiveIntegerValidation gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PositiveIntegerValidation field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPositiveIntegerValidation(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PositiveIntegerValidation = &v
}

// GetPotentialCve returns the PotentialCve field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPotentialCve() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PotentialCve) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PotentialCve
}

// GetPotentialCveOk returns a tuple with the PotentialCve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPotentialCveOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PotentialCve) {
		return nil, false
	}
	return o.PotentialCve, true
}

// HasPotentialCve returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPotentialCve() bool {
	if o != nil && !IsNil(o.PotentialCve) {
		return true
	}

	return false
}

// SetPotentialCve gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PotentialCve field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPotentialCve(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PotentialCve = &v
}

// GetPrivateData returns the PrivateData field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateData() ProfileDetailedConfigurationSecurityTestsPrivateData {
	if o == nil || IsNil(o.PrivateData) {
		var ret ProfileDetailedConfigurationSecurityTestsPrivateData
		return ret
	}
	return *o.PrivateData
}

// GetPrivateDataOk returns a tuple with the PrivateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateDataOk() (*ProfileDetailedConfigurationSecurityTestsPrivateData, bool) {
	if o == nil || IsNil(o.PrivateData) {
		return nil, false
	}
	return o.PrivateData, true
}

// HasPrivateData returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPrivateData() bool {
	if o != nil && !IsNil(o.PrivateData) {
		return true
	}

	return false
}

// SetPrivateData gets a reference to the given ProfileDetailedConfigurationSecurityTestsPrivateData and assigns it to the PrivateData field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPrivateData(v ProfileDetailedConfigurationSecurityTestsPrivateData) {
	o.PrivateData = &v
}

// GetPrivateFields returns the PrivateFields field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateFields() ProfileDetailedConfigurationSecurityTestsPrivateData {
	if o == nil || IsNil(o.PrivateFields) {
		var ret ProfileDetailedConfigurationSecurityTestsPrivateData
		return ret
	}
	return *o.PrivateFields
}

// GetPrivateFieldsOk returns a tuple with the PrivateFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateFieldsOk() (*ProfileDetailedConfigurationSecurityTestsPrivateData, bool) {
	if o == nil || IsNil(o.PrivateFields) {
		return nil, false
	}
	return o.PrivateFields, true
}

// HasPrivateFields returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPrivateFields() bool {
	if o != nil && !IsNil(o.PrivateFields) {
		return true
	}

	return false
}

// SetPrivateFields gets a reference to the given ProfileDetailedConfigurationSecurityTestsPrivateData and assigns it to the PrivateFields field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPrivateFields(v ProfileDetailedConfigurationSecurityTestsPrivateData) {
	o.PrivateFields = &v
}

// GetPrivateIp returns the PrivateIp field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateIp() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PrivateIp) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PrivateIp
}

// GetPrivateIpOk returns a tuple with the PrivateIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPrivateIpOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PrivateIp) {
		return nil, false
	}
	return o.PrivateIp, true
}

// HasPrivateIp returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPrivateIp() bool {
	if o != nil && !IsNil(o.PrivateIp) {
		return true
	}

	return false
}

// SetPrivateIp gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PrivateIp field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPrivateIp(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PrivateIp = &v
}

// GetPublicStateAlteringOperation returns the PublicStateAlteringOperation field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetPublicStateAlteringOperation() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.PublicStateAlteringOperation) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.PublicStateAlteringOperation
}

// GetPublicStateAlteringOperationOk returns a tuple with the PublicStateAlteringOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetPublicStateAlteringOperationOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.PublicStateAlteringOperation) {
		return nil, false
	}
	return o.PublicStateAlteringOperation, true
}

// HasPublicStateAlteringOperation returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasPublicStateAlteringOperation() bool {
	if o != nil && !IsNil(o.PublicStateAlteringOperation) {
		return true
	}

	return false
}

// SetPublicStateAlteringOperation gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the PublicStateAlteringOperation field.
func (o *ProfileDetailedConfigurationSecurityTests) SetPublicStateAlteringOperation(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.PublicStateAlteringOperation = &v
}

// GetReflectedUrlParameter returns the ReflectedUrlParameter field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetReflectedUrlParameter() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ReflectedUrlParameter) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ReflectedUrlParameter
}

// GetReflectedUrlParameterOk returns a tuple with the ReflectedUrlParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetReflectedUrlParameterOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ReflectedUrlParameter) {
		return nil, false
	}
	return o.ReflectedUrlParameter, true
}

// HasReflectedUrlParameter returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasReflectedUrlParameter() bool {
	if o != nil && !IsNil(o.ReflectedUrlParameter) {
		return true
	}

	return false
}

// SetReflectedUrlParameter gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ReflectedUrlParameter field.
func (o *ProfileDetailedConfigurationSecurityTests) SetReflectedUrlParameter(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ReflectedUrlParameter = &v
}

// GetRequestSmuggling returns the RequestSmuggling field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetRequestSmuggling() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.RequestSmuggling) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.RequestSmuggling
}

// GetRequestSmugglingOk returns a tuple with the RequestSmuggling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetRequestSmugglingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.RequestSmuggling) {
		return nil, false
	}
	return o.RequestSmuggling, true
}

// HasRequestSmuggling returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasRequestSmuggling() bool {
	if o != nil && !IsNil(o.RequestSmuggling) {
		return true
	}

	return false
}

// SetRequestSmuggling gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the RequestSmuggling field.
func (o *ProfileDetailedConfigurationSecurityTests) SetRequestSmuggling(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.RequestSmuggling = &v
}

// GetRequestUrlOverride returns the RequestUrlOverride field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetRequestUrlOverride() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.RequestUrlOverride) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.RequestUrlOverride
}

// GetRequestUrlOverrideOk returns a tuple with the RequestUrlOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetRequestUrlOverrideOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.RequestUrlOverride) {
		return nil, false
	}
	return o.RequestUrlOverride, true
}

// HasRequestUrlOverride returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasRequestUrlOverride() bool {
	if o != nil && !IsNil(o.RequestUrlOverride) {
		return true
	}

	return false
}

// SetRequestUrlOverride gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the RequestUrlOverride field.
func (o *ProfileDetailedConfigurationSecurityTests) SetRequestUrlOverride(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.RequestUrlOverride = &v
}

// GetResourceLimitingBypass returns the ResourceLimitingBypass field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetResourceLimitingBypass() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ResourceLimitingBypass) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ResourceLimitingBypass
}

// GetResourceLimitingBypassOk returns a tuple with the ResourceLimitingBypass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetResourceLimitingBypassOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ResourceLimitingBypass) {
		return nil, false
	}
	return o.ResourceLimitingBypass, true
}

// HasResourceLimitingBypass returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasResourceLimitingBypass() bool {
	if o != nil && !IsNil(o.ResourceLimitingBypass) {
		return true
	}

	return false
}

// SetResourceLimitingBypass gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ResourceLimitingBypass field.
func (o *ProfileDetailedConfigurationSecurityTests) SetResourceLimitingBypass(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ResourceLimitingBypass = &v
}

// GetResponseSize returns the ResponseSize field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetResponseSize() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ResponseSize) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ResponseSize
}

// GetResponseSizeOk returns a tuple with the ResponseSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetResponseSizeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ResponseSize) {
		return nil, false
	}
	return o.ResponseSize, true
}

// HasResponseSize returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasResponseSize() bool {
	if o != nil && !IsNil(o.ResponseSize) {
		return true
	}

	return false
}

// SetResponseSize gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ResponseSize field.
func (o *ProfileDetailedConfigurationSecurityTests) SetResponseSize(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ResponseSize = &v
}

// GetResponseTypeMismatch returns the ResponseTypeMismatch field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetResponseTypeMismatch() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ResponseTypeMismatch) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ResponseTypeMismatch
}

// GetResponseTypeMismatchOk returns a tuple with the ResponseTypeMismatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetResponseTypeMismatchOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ResponseTypeMismatch) {
		return nil, false
	}
	return o.ResponseTypeMismatch, true
}

// HasResponseTypeMismatch returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasResponseTypeMismatch() bool {
	if o != nil && !IsNil(o.ResponseTypeMismatch) {
		return true
	}

	return false
}

// SetResponseTypeMismatch gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ResponseTypeMismatch field.
func (o *ProfileDetailedConfigurationSecurityTests) SetResponseTypeMismatch(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ResponseTypeMismatch = &v
}

// GetSecurityChecks returns the SecurityChecks field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSecurityChecks() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SecurityChecks) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SecurityChecks
}

// GetSecurityChecksOk returns a tuple with the SecurityChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSecurityChecksOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SecurityChecks) {
		return nil, false
	}
	return o.SecurityChecks, true
}

// HasSecurityChecks returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSecurityChecks() bool {
	if o != nil && !IsNil(o.SecurityChecks) {
		return true
	}

	return false
}

// SetSecurityChecks gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SecurityChecks field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSecurityChecks(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SecurityChecks = &v
}

// GetSensitiveComments returns the SensitiveComments field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSensitiveComments() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SensitiveComments) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SensitiveComments
}

// GetSensitiveCommentsOk returns a tuple with the SensitiveComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSensitiveCommentsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SensitiveComments) {
		return nil, false
	}
	return o.SensitiveComments, true
}

// HasSensitiveComments returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSensitiveComments() bool {
	if o != nil && !IsNil(o.SensitiveComments) {
		return true
	}

	return false
}

// SetSensitiveComments gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SensitiveComments field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSensitiveComments(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SensitiveComments = &v
}

// GetSensitiveEndpointBruteforce returns the SensitiveEndpointBruteforce field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSensitiveEndpointBruteforce() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SensitiveEndpointBruteforce) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SensitiveEndpointBruteforce
}

// GetSensitiveEndpointBruteforceOk returns a tuple with the SensitiveEndpointBruteforce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSensitiveEndpointBruteforceOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SensitiveEndpointBruteforce) {
		return nil, false
	}
	return o.SensitiveEndpointBruteforce, true
}

// HasSensitiveEndpointBruteforce returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSensitiveEndpointBruteforce() bool {
	if o != nil && !IsNil(o.SensitiveEndpointBruteforce) {
		return true
	}

	return false
}

// SetSensitiveEndpointBruteforce gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SensitiveEndpointBruteforce field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSensitiveEndpointBruteforce(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SensitiveEndpointBruteforce = &v
}

// GetServerError returns the ServerError field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetServerError() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ServerError) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ServerError
}

// GetServerErrorOk returns a tuple with the ServerError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetServerErrorOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ServerError) {
		return nil, false
	}
	return o.ServerError, true
}

// HasServerError returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasServerError() bool {
	if o != nil && !IsNil(o.ServerError) {
		return true
	}

	return false
}

// SetServerError gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ServerError field.
func (o *ProfileDetailedConfigurationSecurityTests) SetServerError(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ServerError = &v
}

// GetSoftwareComponentLeak returns the SoftwareComponentLeak field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSoftwareComponentLeak() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SoftwareComponentLeak) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SoftwareComponentLeak
}

// GetSoftwareComponentLeakOk returns a tuple with the SoftwareComponentLeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSoftwareComponentLeakOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SoftwareComponentLeak) {
		return nil, false
	}
	return o.SoftwareComponentLeak, true
}

// HasSoftwareComponentLeak returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSoftwareComponentLeak() bool {
	if o != nil && !IsNil(o.SoftwareComponentLeak) {
		return true
	}

	return false
}

// SetSoftwareComponentLeak gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SoftwareComponentLeak field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSoftwareComponentLeak(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SoftwareComponentLeak = &v
}

// GetSpringbootActuatorDump returns the SpringbootActuatorDump field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorDump() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorDump) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorDump
}

// GetSpringbootActuatorDumpOk returns a tuple with the SpringbootActuatorDump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorDumpOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorDump) {
		return nil, false
	}
	return o.SpringbootActuatorDump, true
}

// HasSpringbootActuatorDump returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorDump() bool {
	if o != nil && !IsNil(o.SpringbootActuatorDump) {
		return true
	}

	return false
}

// SetSpringbootActuatorDump gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorDump field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorDump(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorDump = &v
}

// GetSpringbootActuatorEnv returns the SpringbootActuatorEnv field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorEnv() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorEnv) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorEnv
}

// GetSpringbootActuatorEnvOk returns a tuple with the SpringbootActuatorEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorEnvOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorEnv) {
		return nil, false
	}
	return o.SpringbootActuatorEnv, true
}

// HasSpringbootActuatorEnv returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorEnv() bool {
	if o != nil && !IsNil(o.SpringbootActuatorEnv) {
		return true
	}

	return false
}

// SetSpringbootActuatorEnv gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorEnv field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorEnv(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorEnv = &v
}

// GetSpringbootActuatorHeapdump returns the SpringbootActuatorHeapdump field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorHeapdump() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorHeapdump) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorHeapdump
}

// GetSpringbootActuatorHeapdumpOk returns a tuple with the SpringbootActuatorHeapdump field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorHeapdumpOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorHeapdump) {
		return nil, false
	}
	return o.SpringbootActuatorHeapdump, true
}

// HasSpringbootActuatorHeapdump returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorHeapdump() bool {
	if o != nil && !IsNil(o.SpringbootActuatorHeapdump) {
		return true
	}

	return false
}

// SetSpringbootActuatorHeapdump gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorHeapdump field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorHeapdump(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorHeapdump = &v
}

// GetSpringbootActuatorLogfile returns the SpringbootActuatorLogfile field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorLogfile() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorLogfile) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorLogfile
}

// GetSpringbootActuatorLogfileOk returns a tuple with the SpringbootActuatorLogfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorLogfileOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorLogfile) {
		return nil, false
	}
	return o.SpringbootActuatorLogfile, true
}

// HasSpringbootActuatorLogfile returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorLogfile() bool {
	if o != nil && !IsNil(o.SpringbootActuatorLogfile) {
		return true
	}

	return false
}

// SetSpringbootActuatorLogfile gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorLogfile field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorLogfile(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorLogfile = &v
}

// GetSpringbootActuatorMappings returns the SpringbootActuatorMappings field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorMappings() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorMappings) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorMappings
}

// GetSpringbootActuatorMappingsOk returns a tuple with the SpringbootActuatorMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorMappingsOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorMappings) {
		return nil, false
	}
	return o.SpringbootActuatorMappings, true
}

// HasSpringbootActuatorMappings returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorMappings() bool {
	if o != nil && !IsNil(o.SpringbootActuatorMappings) {
		return true
	}

	return false
}

// SetSpringbootActuatorMappings gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorMappings field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorMappings(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorMappings = &v
}

// GetSpringbootActuatorRestart returns the SpringbootActuatorRestart field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorRestart() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorRestart) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorRestart
}

// GetSpringbootActuatorRestartOk returns a tuple with the SpringbootActuatorRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorRestartOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorRestart) {
		return nil, false
	}
	return o.SpringbootActuatorRestart, true
}

// HasSpringbootActuatorRestart returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorRestart() bool {
	if o != nil && !IsNil(o.SpringbootActuatorRestart) {
		return true
	}

	return false
}

// SetSpringbootActuatorRestart gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorRestart field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorRestart(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorRestart = &v
}

// GetSpringbootActuatorShutdown returns the SpringbootActuatorShutdown field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorShutdown() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorShutdown) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorShutdown
}

// GetSpringbootActuatorShutdownOk returns a tuple with the SpringbootActuatorShutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorShutdownOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorShutdown) {
		return nil, false
	}
	return o.SpringbootActuatorShutdown, true
}

// HasSpringbootActuatorShutdown returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorShutdown() bool {
	if o != nil && !IsNil(o.SpringbootActuatorShutdown) {
		return true
	}

	return false
}

// SetSpringbootActuatorShutdown gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorShutdown field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorShutdown(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorShutdown = &v
}

// GetSpringbootActuatorTrace returns the SpringbootActuatorTrace field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorTrace() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SpringbootActuatorTrace) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SpringbootActuatorTrace
}

// GetSpringbootActuatorTraceOk returns a tuple with the SpringbootActuatorTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSpringbootActuatorTraceOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SpringbootActuatorTrace) {
		return nil, false
	}
	return o.SpringbootActuatorTrace, true
}

// HasSpringbootActuatorTrace returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSpringbootActuatorTrace() bool {
	if o != nil && !IsNil(o.SpringbootActuatorTrace) {
		return true
	}

	return false
}

// SetSpringbootActuatorTrace gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SpringbootActuatorTrace field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSpringbootActuatorTrace(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SpringbootActuatorTrace = &v
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSql() ProfileDetailedConfigurationSecurityTestsSql {
	if o == nil || IsNil(o.Sql) {
		var ret ProfileDetailedConfigurationSecurityTestsSql
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSqlOk() (*ProfileDetailedConfigurationSecurityTestsSql, bool) {
	if o == nil || IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSql() bool {
	if o != nil && !IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given ProfileDetailedConfigurationSecurityTestsSql and assigns it to the Sql field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSql(v ProfileDetailedConfigurationSecurityTestsSql) {
	o.Sql = &v
}

// GetSslCertificate returns the SslCertificate field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSslCertificate() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SslCertificate) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SslCertificate
}

// GetSslCertificateOk returns a tuple with the SslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSslCertificateOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SslCertificate) {
		return nil, false
	}
	return o.SslCertificate, true
}

// HasSslCertificate returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSslCertificate() bool {
	if o != nil && !IsNil(o.SslCertificate) {
		return true
	}

	return false
}

// SetSslCertificate gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SslCertificate field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSslCertificate(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SslCertificate = &v
}

// GetSsl returns the Ssl field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsl() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Ssl) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSslOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Ssl) {
		return nil, false
	}
	return o.Ssl, true
}

// HasSsl returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSsl() bool {
	if o != nil && !IsNil(o.Ssl) {
		return true
	}

	return false
}

// SetSsl gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Ssl field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSsl(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Ssl = &v
}

// GetSsrfHeader returns the SsrfHeader field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsrfHeader() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SsrfHeader) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SsrfHeader
}

// GetSsrfHeaderOk returns a tuple with the SsrfHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsrfHeaderOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SsrfHeader) {
		return nil, false
	}
	return o.SsrfHeader, true
}

// HasSsrfHeader returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSsrfHeader() bool {
	if o != nil && !IsNil(o.SsrfHeader) {
		return true
	}

	return false
}

// SetSsrfHeader gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SsrfHeader field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSsrfHeader(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SsrfHeader = &v
}

// GetSsrf returns the Ssrf field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsrf() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Ssrf) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Ssrf
}

// GetSsrfOk returns a tuple with the Ssrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsrfOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Ssrf) {
		return nil, false
	}
	return o.Ssrf, true
}

// HasSsrf returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSsrf() bool {
	if o != nil && !IsNil(o.Ssrf) {
		return true
	}

	return false
}

// SetSsrf gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Ssrf field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSsrf(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Ssrf = &v
}

// GetSsti returns the Ssti field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSsti() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Ssti) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Ssti
}

// GetSstiOk returns a tuple with the Ssti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSstiOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Ssti) {
		return nil, false
	}
	return o.Ssti, true
}

// HasSsti returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSsti() bool {
	if o != nil && !IsNil(o.Ssti) {
		return true
	}

	return false
}

// SetSsti gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Ssti field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSsti(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Ssti = &v
}

// GetStacktrace returns the Stacktrace field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetStacktrace() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Stacktrace) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Stacktrace
}

// GetStacktraceOk returns a tuple with the Stacktrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetStacktraceOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Stacktrace) {
		return nil, false
	}
	return o.Stacktrace, true
}

// HasStacktrace returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasStacktrace() bool {
	if o != nil && !IsNil(o.Stacktrace) {
		return true
	}

	return false
}

// SetStacktrace gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Stacktrace field.
func (o *ProfileDetailedConfigurationSecurityTests) SetStacktrace(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Stacktrace = &v
}

// GetSubresourceIntegrityMissing returns the SubresourceIntegrityMissing field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSubresourceIntegrityMissing() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SubresourceIntegrityMissing) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SubresourceIntegrityMissing
}

// GetSubresourceIntegrityMissingOk returns a tuple with the SubresourceIntegrityMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSubresourceIntegrityMissingOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SubresourceIntegrityMissing) {
		return nil, false
	}
	return o.SubresourceIntegrityMissing, true
}

// HasSubresourceIntegrityMissing returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSubresourceIntegrityMissing() bool {
	if o != nil && !IsNil(o.SubresourceIntegrityMissing) {
		return true
	}

	return false
}

// SetSubresourceIntegrityMissing gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SubresourceIntegrityMissing field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSubresourceIntegrityMissing(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SubresourceIntegrityMissing = &v
}

// GetSwaggerRules returns the SwaggerRules field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetSwaggerRules() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.SwaggerRules) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.SwaggerRules
}

// GetSwaggerRulesOk returns a tuple with the SwaggerRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetSwaggerRulesOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.SwaggerRules) {
		return nil, false
	}
	return o.SwaggerRules, true
}

// HasSwaggerRules returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasSwaggerRules() bool {
	if o != nil && !IsNil(o.SwaggerRules) {
		return true
	}

	return false
}

// SetSwaggerRules gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the SwaggerRules field.
func (o *ProfileDetailedConfigurationSecurityTests) SetSwaggerRules(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.SwaggerRules = &v
}

// GetTenantIsolation returns the TenantIsolation field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTenantIsolation() ProfileDetailedConfigurationSecurityTestsTenantIsolation {
	if o == nil || IsNil(o.TenantIsolation) {
		var ret ProfileDetailedConfigurationSecurityTestsTenantIsolation
		return ret
	}
	return *o.TenantIsolation
}

// GetTenantIsolationOk returns a tuple with the TenantIsolation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTenantIsolationOk() (*ProfileDetailedConfigurationSecurityTestsTenantIsolation, bool) {
	if o == nil || IsNil(o.TenantIsolation) {
		return nil, false
	}
	return o.TenantIsolation, true
}

// HasTenantIsolation returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTenantIsolation() bool {
	if o != nil && !IsNil(o.TenantIsolation) {
		return true
	}

	return false
}

// SetTenantIsolation gets a reference to the given ProfileDetailedConfigurationSecurityTestsTenantIsolation and assigns it to the TenantIsolation field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTenantIsolation(v ProfileDetailedConfigurationSecurityTestsTenantIsolation) {
	o.TenantIsolation = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTimeout() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Timeout) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTimeoutOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Timeout field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTimeout(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Timeout = &v
}

// GetTlsConfigurationCipher returns the TlsConfigurationCipher field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationCipher() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationCipher) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationCipher
}

// GetTlsConfigurationCipherOk returns a tuple with the TlsConfigurationCipher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationCipherOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationCipher) {
		return nil, false
	}
	return o.TlsConfigurationCipher, true
}

// HasTlsConfigurationCipher returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationCipher() bool {
	if o != nil && !IsNil(o.TlsConfigurationCipher) {
		return true
	}

	return false
}

// SetTlsConfigurationCipher gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationCipher field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationCipher(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationCipher = &v
}

// GetTlsConfigurationKey returns the TlsConfigurationKey field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationKey() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationKey) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationKey
}

// GetTlsConfigurationKeyOk returns a tuple with the TlsConfigurationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationKeyOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationKey) {
		return nil, false
	}
	return o.TlsConfigurationKey, true
}

// HasTlsConfigurationKey returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationKey() bool {
	if o != nil && !IsNil(o.TlsConfigurationKey) {
		return true
	}

	return false
}

// SetTlsConfigurationKey gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationKey field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationKey(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationKey = &v
}

// GetTlsConfigurationProtocol returns the TlsConfigurationProtocol field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationProtocol() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationProtocol) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationProtocol
}

// GetTlsConfigurationProtocolOk returns a tuple with the TlsConfigurationProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationProtocolOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationProtocol) {
		return nil, false
	}
	return o.TlsConfigurationProtocol, true
}

// HasTlsConfigurationProtocol returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationProtocol() bool {
	if o != nil && !IsNil(o.TlsConfigurationProtocol) {
		return true
	}

	return false
}

// SetTlsConfigurationProtocol gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationProtocol field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationProtocol(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationProtocol = &v
}

// GetTlsConfigurationServerDefault returns the TlsConfigurationServerDefault field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationServerDefault() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationServerDefault) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationServerDefault
}

// GetTlsConfigurationServerDefaultOk returns a tuple with the TlsConfigurationServerDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationServerDefaultOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationServerDefault) {
		return nil, false
	}
	return o.TlsConfigurationServerDefault, true
}

// HasTlsConfigurationServerDefault returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationServerDefault() bool {
	if o != nil && !IsNil(o.TlsConfigurationServerDefault) {
		return true
	}

	return false
}

// SetTlsConfigurationServerDefault gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationServerDefault field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationServerDefault(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationServerDefault = &v
}

// GetTlsConfigurationServerPref returns the TlsConfigurationServerPref field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationServerPref() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationServerPref) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationServerPref
}

// GetTlsConfigurationServerPrefOk returns a tuple with the TlsConfigurationServerPref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationServerPrefOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationServerPref) {
		return nil, false
	}
	return o.TlsConfigurationServerPref, true
}

// HasTlsConfigurationServerPref returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationServerPref() bool {
	if o != nil && !IsNil(o.TlsConfigurationServerPref) {
		return true
	}

	return false
}

// SetTlsConfigurationServerPref gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationServerPref field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationServerPref(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationServerPref = &v
}

// GetTlsConfigurationVuln returns the TlsConfigurationVuln field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationVuln() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TlsConfigurationVuln) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TlsConfigurationVuln
}

// GetTlsConfigurationVulnOk returns a tuple with the TlsConfigurationVuln field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTlsConfigurationVulnOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TlsConfigurationVuln) {
		return nil, false
	}
	return o.TlsConfigurationVuln, true
}

// HasTlsConfigurationVuln returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTlsConfigurationVuln() bool {
	if o != nil && !IsNil(o.TlsConfigurationVuln) {
		return true
	}

	return false
}

// SetTlsConfigurationVuln gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TlsConfigurationVuln field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTlsConfigurationVuln(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TlsConfigurationVuln = &v
}

// GetTypingMisconfiguration returns the TypingMisconfiguration field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetTypingMisconfiguration() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.TypingMisconfiguration) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.TypingMisconfiguration
}

// GetTypingMisconfigurationOk returns a tuple with the TypingMisconfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetTypingMisconfigurationOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.TypingMisconfiguration) {
		return nil, false
	}
	return o.TypingMisconfiguration, true
}

// HasTypingMisconfiguration returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasTypingMisconfiguration() bool {
	if o != nil && !IsNil(o.TypingMisconfiguration) {
		return true
	}

	return false
}

// SetTypingMisconfiguration gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the TypingMisconfiguration field.
func (o *ProfileDetailedConfigurationSecurityTests) SetTypingMisconfiguration(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.TypingMisconfiguration = &v
}

// GetUndefinedObject returns the UndefinedObject field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetUndefinedObject() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.UndefinedObject) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.UndefinedObject
}

// GetUndefinedObjectOk returns a tuple with the UndefinedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetUndefinedObjectOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.UndefinedObject) {
		return nil, false
	}
	return o.UndefinedObject, true
}

// HasUndefinedObject returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasUndefinedObject() bool {
	if o != nil && !IsNil(o.UndefinedObject) {
		return true
	}

	return false
}

// SetUndefinedObject gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the UndefinedObject field.
func (o *ProfileDetailedConfigurationSecurityTests) SetUndefinedObject(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.UndefinedObject = &v
}

// GetUnhandledEndpoint returns the UnhandledEndpoint field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnhandledEndpoint() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.UnhandledEndpoint) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.UnhandledEndpoint
}

// GetUnhandledEndpointOk returns a tuple with the UnhandledEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnhandledEndpointOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.UnhandledEndpoint) {
		return nil, false
	}
	return o.UnhandledEndpoint, true
}

// HasUnhandledEndpoint returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasUnhandledEndpoint() bool {
	if o != nil && !IsNil(o.UnhandledEndpoint) {
		return true
	}

	return false
}

// SetUnhandledEndpoint gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the UnhandledEndpoint field.
func (o *ProfileDetailedConfigurationSecurityTests) SetUnhandledEndpoint(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.UnhandledEndpoint = &v
}

// GetUnreachableServer returns the UnreachableServer field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnreachableServer() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.UnreachableServer) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.UnreachableServer
}

// GetUnreachableServerOk returns a tuple with the UnreachableServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnreachableServerOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.UnreachableServer) {
		return nil, false
	}
	return o.UnreachableServer, true
}

// HasUnreachableServer returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasUnreachableServer() bool {
	if o != nil && !IsNil(o.UnreachableServer) {
		return true
	}

	return false
}

// SetUnreachableServer gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the UnreachableServer field.
func (o *ProfileDetailedConfigurationSecurityTests) SetUnreachableServer(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.UnreachableServer = &v
}

// GetUnsafeFunctionUse returns the UnsafeFunctionUse field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnsafeFunctionUse() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.UnsafeFunctionUse) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.UnsafeFunctionUse
}

// GetUnsafeFunctionUseOk returns a tuple with the UnsafeFunctionUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetUnsafeFunctionUseOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.UnsafeFunctionUse) {
		return nil, false
	}
	return o.UnsafeFunctionUse, true
}

// HasUnsafeFunctionUse returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasUnsafeFunctionUse() bool {
	if o != nil && !IsNil(o.UnsafeFunctionUse) {
		return true
	}

	return false
}

// SetUnsafeFunctionUse gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the UnsafeFunctionUse field.
func (o *ProfileDetailedConfigurationSecurityTests) SetUnsafeFunctionUse(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.UnsafeFunctionUse = &v
}

// GetWafBypass returns the WafBypass field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWafBypass() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WafBypass) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WafBypass
}

// GetWafBypassOk returns a tuple with the WafBypass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWafBypassOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WafBypass) {
		return nil, false
	}
	return o.WafBypass, true
}

// HasWafBypass returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWafBypass() bool {
	if o != nil && !IsNil(o.WafBypass) {
		return true
	}

	return false
}

// SetWafBypass gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WafBypass field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWafBypass(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WafBypass = &v
}

// GetWordpressOembedEndpointExposed returns the WordpressOembedEndpointExposed field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressOembedEndpointExposed() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WordpressOembedEndpointExposed) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WordpressOembedEndpointExposed
}

// GetWordpressOembedEndpointExposedOk returns a tuple with the WordpressOembedEndpointExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressOembedEndpointExposedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WordpressOembedEndpointExposed) {
		return nil, false
	}
	return o.WordpressOembedEndpointExposed, true
}

// HasWordpressOembedEndpointExposed returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWordpressOembedEndpointExposed() bool {
	if o != nil && !IsNil(o.WordpressOembedEndpointExposed) {
		return true
	}

	return false
}

// SetWordpressOembedEndpointExposed gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WordpressOembedEndpointExposed field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWordpressOembedEndpointExposed(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WordpressOembedEndpointExposed = &v
}

// GetWordpressRdfFeedUserExposed returns the WordpressRdfFeedUserExposed field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressRdfFeedUserExposed() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WordpressRdfFeedUserExposed) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WordpressRdfFeedUserExposed
}

// GetWordpressRdfFeedUserExposedOk returns a tuple with the WordpressRdfFeedUserExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressRdfFeedUserExposedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WordpressRdfFeedUserExposed) {
		return nil, false
	}
	return o.WordpressRdfFeedUserExposed, true
}

// HasWordpressRdfFeedUserExposed returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWordpressRdfFeedUserExposed() bool {
	if o != nil && !IsNil(o.WordpressRdfFeedUserExposed) {
		return true
	}

	return false
}

// SetWordpressRdfFeedUserExposed gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WordpressRdfFeedUserExposed field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWordpressRdfFeedUserExposed(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WordpressRdfFeedUserExposed = &v
}

// GetWordpressRestApiUsersExposed returns the WordpressRestApiUsersExposed field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressRestApiUsersExposed() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WordpressRestApiUsersExposed) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WordpressRestApiUsersExposed
}

// GetWordpressRestApiUsersExposedOk returns a tuple with the WordpressRestApiUsersExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressRestApiUsersExposedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WordpressRestApiUsersExposed) {
		return nil, false
	}
	return o.WordpressRestApiUsersExposed, true
}

// HasWordpressRestApiUsersExposed returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWordpressRestApiUsersExposed() bool {
	if o != nil && !IsNil(o.WordpressRestApiUsersExposed) {
		return true
	}

	return false
}

// SetWordpressRestApiUsersExposed gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WordpressRestApiUsersExposed field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWordpressRestApiUsersExposed(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WordpressRestApiUsersExposed = &v
}

// GetWordpressWpCronExposed returns the WordpressWpCronExposed field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressWpCronExposed() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WordpressWpCronExposed) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WordpressWpCronExposed
}

// GetWordpressWpCronExposedOk returns a tuple with the WordpressWpCronExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressWpCronExposedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WordpressWpCronExposed) {
		return nil, false
	}
	return o.WordpressWpCronExposed, true
}

// HasWordpressWpCronExposed returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWordpressWpCronExposed() bool {
	if o != nil && !IsNil(o.WordpressWpCronExposed) {
		return true
	}

	return false
}

// SetWordpressWpCronExposed gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WordpressWpCronExposed field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWordpressWpCronExposed(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WordpressWpCronExposed = &v
}

// GetWordpressXmlrpcPhpExposed returns the WordpressXmlrpcPhpExposed field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressXmlrpcPhpExposed() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.WordpressXmlrpcPhpExposed) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.WordpressXmlrpcPhpExposed
}

// GetWordpressXmlrpcPhpExposedOk returns a tuple with the WordpressXmlrpcPhpExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetWordpressXmlrpcPhpExposedOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.WordpressXmlrpcPhpExposed) {
		return nil, false
	}
	return o.WordpressXmlrpcPhpExposed, true
}

// HasWordpressXmlrpcPhpExposed returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasWordpressXmlrpcPhpExposed() bool {
	if o != nil && !IsNil(o.WordpressXmlrpcPhpExposed) {
		return true
	}

	return false
}

// SetWordpressXmlrpcPhpExposed gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the WordpressXmlrpcPhpExposed field.
func (o *ProfileDetailedConfigurationSecurityTests) SetWordpressXmlrpcPhpExposed(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.WordpressXmlrpcPhpExposed = &v
}

// GetXssViaDomainTakeover returns the XssViaDomainTakeover field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetXssViaDomainTakeover() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.XssViaDomainTakeover) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.XssViaDomainTakeover
}

// GetXssViaDomainTakeoverOk returns a tuple with the XssViaDomainTakeover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetXssViaDomainTakeoverOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.XssViaDomainTakeover) {
		return nil, false
	}
	return o.XssViaDomainTakeover, true
}

// HasXssViaDomainTakeover returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasXssViaDomainTakeover() bool {
	if o != nil && !IsNil(o.XssViaDomainTakeover) {
		return true
	}

	return false
}

// SetXssViaDomainTakeover gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the XssViaDomainTakeover field.
func (o *ProfileDetailedConfigurationSecurityTests) SetXssViaDomainTakeover(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.XssViaDomainTakeover = &v
}

// GetXxe returns the Xxe field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetXxe() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.Xxe) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.Xxe
}

// GetXxeOk returns a tuple with the Xxe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetXxeOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.Xxe) {
		return nil, false
	}
	return o.Xxe, true
}

// HasXxe returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasXxe() bool {
	if o != nil && !IsNil(o.Xxe) {
		return true
	}

	return false
}

// SetXxe gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the Xxe field.
func (o *ProfileDetailedConfigurationSecurityTests) SetXxe(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.Xxe = &v
}

// GetZombieObject returns the ZombieObject field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetZombieObject() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.ZombieObject) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.ZombieObject
}

// GetZombieObjectOk returns a tuple with the ZombieObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetZombieObjectOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.ZombieObject) {
		return nil, false
	}
	return o.ZombieObject, true
}

// HasZombieObject returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasZombieObject() bool {
	if o != nil && !IsNil(o.ZombieObject) {
		return true
	}

	return false
}

// SetZombieObject gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the ZombieObject field.
func (o *ProfileDetailedConfigurationSecurityTests) SetZombieObject(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.ZombieObject = &v
}

// GetFlaskSessionCookie returns the FlaskSessionCookie field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetFlaskSessionCookie() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.FlaskSessionCookie) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.FlaskSessionCookie
}

// GetFlaskSessionCookieOk returns a tuple with the FlaskSessionCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetFlaskSessionCookieOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.FlaskSessionCookie) {
		return nil, false
	}
	return o.FlaskSessionCookie, true
}

// HasFlaskSessionCookie returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasFlaskSessionCookie() bool {
	if o != nil && !IsNil(o.FlaskSessionCookie) {
		return true
	}

	return false
}

// SetFlaskSessionCookie gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the FlaskSessionCookie field.
func (o *ProfileDetailedConfigurationSecurityTests) SetFlaskSessionCookie(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.FlaskSessionCookie = &v
}

// GetRowLevelSecurity returns the RowLevelSecurity field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSecurityTests) GetRowLevelSecurity() ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure {
	if o == nil || IsNil(o.RowLevelSecurity) {
		var ret ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure
		return ret
	}
	return *o.RowLevelSecurity
}

// GetRowLevelSecurityOk returns a tuple with the RowLevelSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTests) GetRowLevelSecurityOk() (*ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure, bool) {
	if o == nil || IsNil(o.RowLevelSecurity) {
		return nil, false
	}
	return o.RowLevelSecurity, true
}

// HasRowLevelSecurity returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSecurityTests) HasRowLevelSecurity() bool {
	if o != nil && !IsNil(o.RowLevelSecurity) {
		return true
	}

	return false
}

// SetRowLevelSecurity gets a reference to the given ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure and assigns it to the RowLevelSecurity field.
func (o *ProfileDetailedConfigurationSecurityTests) SetRowLevelSecurity(v ProfileDetailedConfigurationSecurityTestsAirflowConfigExposure) {
	o.RowLevelSecurity = &v
}

func (o ProfileDetailedConfigurationSecurityTests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationSecurityTests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DoNotFuzzParams) {
		toSerialize["do_not_fuzz_params"] = o.DoNotFuzzParams
	}
	if !IsNil(o.MaxAttemptsPerPath) {
		toSerialize["max_attempts_per_path"] = o.MaxAttemptsPerPath
	}
	if !IsNil(o.MaxRequestsPerPath) {
		toSerialize["max_requests_per_path"] = o.MaxRequestsPerPath
	}
	if !IsNil(o.HighNumberOfCustomScalars) {
		toSerialize["high_number_of_custom_scalars"] = o.HighNumberOfCustomScalars
	}
	if !IsNil(o.HighNumberOfPci) {
		toSerialize["high_number_of_pci"] = o.HighNumberOfPci
	}
	if !IsNil(o.HighNumberOfPii) {
		toSerialize["high_number_of_pii"] = o.HighNumberOfPii
	}
	if !IsNil(o.HighNumberOfPhi) {
		toSerialize["high_number_of_phi"] = o.HighNumberOfPhi
	}
	if !IsNil(o.HighNumberOfSecrets) {
		toSerialize["high_number_of_secrets"] = o.HighNumberOfSecrets
	}
	if !IsNil(o.Agentic) {
		toSerialize["agentic"] = o.Agentic
	}
	if !IsNil(o.AirflowConfigExposure) {
		toSerialize["airflow_config_exposure"] = o.AirflowConfigExposure
	}
	if !IsNil(o.AlibabaCanalLeak) {
		toSerialize["alibaba_canal_leak"] = o.AlibabaCanalLeak
	}
	if !IsNil(o.AnsibleConfigExposure) {
		toSerialize["ansible_config_exposure"] = o.AnsibleConfigExposure
	}
	if !IsNil(o.AppspecExposure) {
		toSerialize["appspec_exposure"] = o.AppspecExposure
	}
	if !IsNil(o.AppveyorConfigExposure) {
		toSerialize["appveyor_config_exposure"] = o.AppveyorConfigExposure
	}
	if !IsNil(o.ArbitraryTokenScope) {
		toSerialize["arbitrary_token_scope"] = o.ArbitraryTokenScope
	}
	if !IsNil(o.AuthBypass) {
		toSerialize["auth_bypass"] = o.AuthBypass
	}
	if !IsNil(o.AwsAccessToken) {
		toSerialize["aws_access_token"] = o.AwsAccessToken
	}
	if !IsNil(o.AwsConfigExposure) {
		toSerialize["aws_config_exposure"] = o.AwsConfigExposure
	}
	if !IsNil(o.AwsDockerConfigExposure) {
		toSerialize["aws_docker_config_exposure"] = o.AwsDockerConfigExposure
	}
	if !IsNil(o.AwstatsConfigExposure) {
		toSerialize["awstats_config_exposure"] = o.AwstatsConfigExposure
	}
	if !IsNil(o.AwstatsExposure) {
		toSerialize["awstats_exposure"] = o.AwstatsExposure
	}
	if !IsNil(o.AzureTenantIdExposure) {
		toSerialize["azure_tenant_id_exposure"] = o.AzureTenantIdExposure
	}
	if !IsNil(o.Bola) {
		toSerialize["bola"] = o.Bola
	}
	if !IsNil(o.CharacterLimit) {
		toSerialize["character_limit"] = o.CharacterLimit
	}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.ConsoleError) {
		toSerialize["console_error"] = o.ConsoleError
	}
	if !IsNil(o.ContentSecurityPolicy) {
		toSerialize["content_security_policy"] = o.ContentSecurityPolicy
	}
	if !IsNil(o.Cors) {
		toSerialize["cors"] = o.Cors
	}
	if !IsNil(o.CrashingPage) {
		toSerialize["crashing_page"] = o.CrashingPage
	}
	if !IsNil(o.Crlf) {
		toSerialize["crlf"] = o.Crlf
	}
	if !IsNil(o.CsrfGetBased) {
		toSerialize["csrf_get_based"] = o.CsrfGetBased
	}
	if !IsNil(o.CsrfPostBased) {
		toSerialize["csrf_post_based"] = o.CsrfPostBased
	}
	if !IsNil(o.DebugMode) {
		toSerialize["debug_mode"] = o.DebugMode
	}
	if !IsNil(o.DirectoryListing) {
		toSerialize["directory_listing"] = o.DirectoryListing
	}
	if !IsNil(o.DirectoryTraversal) {
		toSerialize["directory_traversal"] = o.DirectoryTraversal
	}
	if !IsNil(o.Dkim) {
		toSerialize["dkim"] = o.Dkim
	}
	if !IsNil(o.Dmarc) {
		toSerialize["dmarc"] = o.Dmarc
	}
	if !IsNil(o.Loopback) {
		toSerialize["loopback"] = o.Loopback
	}
	if !IsNil(o.PermisiveSpf) {
		toSerialize["permisive_spf"] = o.PermisiveSpf
	}
	if !IsNil(o.DnsrecordTxtLength) {
		toSerialize["dnsrecord_txt_length"] = o.DnsrecordTxtLength
	}
	if !IsNil(o.DnsrecordTxtSensitive) {
		toSerialize["dnsrecord_txt_sensitive"] = o.DnsrecordTxtSensitive
	}
	if !IsNil(o.DnssecDisabled) {
		toSerialize["dnssec_disabled"] = o.DnssecDisabled
	}
	if !IsNil(o.DomainTakeover) {
		toSerialize["domain_takeover"] = o.DomainTakeover
	}
	if !IsNil(o.DuplicatedObject) {
		toSerialize["duplicated_object"] = o.DuplicatedObject
	}
	if !IsNil(o.ErrorTypeInconsistency) {
		toSerialize["error_type_inconsistency"] = o.ErrorTypeInconsistency
	}
	if !IsNil(o.ExcessiveBrowserPermissions) {
		toSerialize["excessive_browser_permissions"] = o.ExcessiveBrowserPermissions
	}
	if !IsNil(o.ExposedMysqlConfig) {
		toSerialize["exposed_mysql_config"] = o.ExposedMysqlConfig
	}
	if !IsNil(o.ExposedSettingsPhp) {
		toSerialize["exposed_settings_php"] = o.ExposedSettingsPhp
	}
	if !IsNil(o.ExposedSourcemap) {
		toSerialize["exposed_sourcemap"] = o.ExposedSourcemap
	}
	if !IsNil(o.ExposedSqlDumps) {
		toSerialize["exposed_sql_dumps"] = o.ExposedSqlDumps
	}
	if !IsNil(o.FileDisclosure) {
		toSerialize["file_disclosure"] = o.FileDisclosure
	}
	if !IsNil(o.FileInclusion) {
		toSerialize["file_inclusion"] = o.FileInclusion
	}
	if !IsNil(o.ForcedBrowsing) {
		toSerialize["forced_browsing"] = o.ForcedBrowsing
	}
	if !IsNil(o.FrontendLocalstorageSensitiveData) {
		toSerialize["frontend_localstorage_sensitive_data"] = o.FrontendLocalstorageSensitiveData
	}
	if !IsNil(o.GraphqlAliasLimit) {
		toSerialize["graphql_alias_limit"] = o.GraphqlAliasLimit
	}
	if !IsNil(o.GraphqlApq) {
		toSerialize["graphql_apq"] = o.GraphqlApq
	}
	if !IsNil(o.GraphqlBatchLimit) {
		toSerialize["graphql_batch_limit"] = o.GraphqlBatchLimit
	}
	if !IsNil(o.GraphqlCircularIntrospection) {
		toSerialize["graphql_circular_introspection"] = o.GraphqlCircularIntrospection
	}
	if !IsNil(o.GraphqlContentType) {
		toSerialize["graphql_content_type"] = o.GraphqlContentType
	}
	if !IsNil(o.GraphqlDepthLimit) {
		toSerialize["graphql_depth_limit"] = o.GraphqlDepthLimit
	}
	if !IsNil(o.GraphqlDirectiveOverload) {
		toSerialize["graphql_directive_overload"] = o.GraphqlDirectiveOverload
	}
	if !IsNil(o.GraphqlExtensionDisclosure) {
		toSerialize["graphql_extension_disclosure"] = o.GraphqlExtensionDisclosure
	}
	if !IsNil(o.GraphqlFieldDuplication) {
		toSerialize["graphql_field_duplication"] = o.GraphqlFieldDuplication
	}
	if !IsNil(o.GraphqlFieldLimit) {
		toSerialize["graphql_field_limit"] = o.GraphqlFieldLimit
	}
	if !IsNil(o.GraphqlFieldSuggestion) {
		toSerialize["graphql_field_suggestion"] = o.GraphqlFieldSuggestion
	}
	if !IsNil(o.GraphqlRecursiveFragment) {
		toSerialize["graphql_recursive_fragment"] = o.GraphqlRecursiveFragment
	}
	if !IsNil(o.GraphqlResponseFormat) {
		toSerialize["graphql_response_format"] = o.GraphqlResponseFormat
	}
	if !IsNil(o.GraphqlWidthLimit) {
		toSerialize["graphql_width_limit"] = o.GraphqlWidthLimit
	}
	if !IsNil(o.GuessableCookieValue) {
		toSerialize["guessable_cookie_value"] = o.GuessableCookieValue
	}
	if !IsNil(o.HeaderAccessControlAllowOrigin) {
		toSerialize["header_access_control_allow_origin"] = o.HeaderAccessControlAllowOrigin
	}
	if !IsNil(o.HeaderCacheControl) {
		toSerialize["header_cache_control"] = o.HeaderCacheControl
	}
	if !IsNil(o.HeaderContentSecurityPolicy) {
		toSerialize["header_content_security_policy"] = o.HeaderContentSecurityPolicy
	}
	if !IsNil(o.HeaderContentType) {
		toSerialize["header_content_type"] = o.HeaderContentType
	}
	if !IsNil(o.HeaderLeak) {
		toSerialize["header_leak"] = o.HeaderLeak
	}
	if !IsNil(o.HeaderSetCookie) {
		toSerialize["header_set_cookie"] = o.HeaderSetCookie
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.HeaderStrictTransportSecurity) {
		toSerialize["header_strict_transport_security"] = o.HeaderStrictTransportSecurity
	}
	if !IsNil(o.HeaderXContentTypeOptions) {
		toSerialize["header_x_content_type_options"] = o.HeaderXContentTypeOptions
	}
	if !IsNil(o.HeaderXFrameOptions) {
		toSerialize["header_x_frame_options"] = o.HeaderXFrameOptions
	}
	if !IsNil(o.HtmlInjection) {
		toSerialize["html_injection"] = o.HtmlInjection
	}
	if !IsNil(o.HttpParamPollution) {
		toSerialize["http_param_pollution"] = o.HttpParamPollution
	}
	if !IsNil(o.IdeEnabled) {
		toSerialize["ide_enabled"] = o.IdeEnabled
	}
	if !IsNil(o.ImproperInput) {
		toSerialize["improper_input"] = o.ImproperInput
	}
	if !IsNil(o.ImproperInputStored) {
		toSerialize["improper_input_stored"] = o.ImproperInputStored
	}
	if !IsNil(o.IntrospectionEnabled) {
		toSerialize["introspection_enabled"] = o.IntrospectionEnabled
	}
	if !IsNil(o.InvalidAllof) {
		toSerialize["invalid_allof"] = o.InvalidAllof
	}
	if !IsNil(o.InvalidParametersInPath) {
		toSerialize["invalid_parameters_in_path"] = o.InvalidParametersInPath
	}
	if !IsNil(o.InvalidPersistedQuery) {
		toSerialize["invalid_persisted_query"] = o.InvalidPersistedQuery
	}
	if !IsNil(o.InvalidRefs) {
		toSerialize["invalid_refs"] = o.InvalidRefs
	}
	if !IsNil(o.JwtAlgConfusion) {
		toSerialize["jwt_alg_confusion"] = o.JwtAlgConfusion
	}
	if !IsNil(o.JwtAlgNone) {
		toSerialize["jwt_alg_none"] = o.JwtAlgNone
	}
	if !IsNil(o.ExposedJwt) {
		toSerialize["exposed_jwt"] = o.ExposedJwt
	}
	if !IsNil(o.JwtSignCheck) {
		toSerialize["jwt_sign_check"] = o.JwtSignCheck
	}
	if !IsNil(o.LargeJsonInput) {
		toSerialize["large_json_input"] = o.LargeJsonInput
	}
	if !IsNil(o.LeakingAuthentication) {
		toSerialize["leaking_authentication"] = o.LeakingAuthentication
	}
	if !IsNil(o.LlmDetection) {
		toSerialize["llm_detection"] = o.LlmDetection
	}
	if !IsNil(o.LlmExcessiveAgency) {
		toSerialize["llm_excessive_agency"] = o.LlmExcessiveAgency
	}
	if !IsNil(o.LlmInsecureOutputHandling) {
		toSerialize["llm_insecure_output_handling"] = o.LlmInsecureOutputHandling
	}
	if !IsNil(o.LlmInsecurePluginDesign) {
		toSerialize["llm_insecure_plugin_design"] = o.LlmInsecurePluginDesign
	}
	if !IsNil(o.LlmJailBreak) {
		toSerialize["llm_jail_break"] = o.LlmJailBreak
	}
	if !IsNil(o.LlmModelDos) {
		toSerialize["llm_model_dos"] = o.LlmModelDos
	}
	if !IsNil(o.LlmModelTheft) {
		toSerialize["llm_model_theft"] = o.LlmModelTheft
	}
	if !IsNil(o.LlmOverreliance) {
		toSerialize["llm_overreliance"] = o.LlmOverreliance
	}
	if !IsNil(o.LlmPromptInjection) {
		toSerialize["llm_prompt_injection"] = o.LlmPromptInjection
	}
	if !IsNil(o.LlmSensitiveInformationDisclosure) {
		toSerialize["llm_sensitive_information_disclosure"] = o.LlmSensitiveInformationDisclosure
	}
	if !IsNil(o.LlmSupplyChainVulnerabilities) {
		toSerialize["llm_supply_chain_vulnerabilities"] = o.LlmSupplyChainVulnerabilities
	}
	if !IsNil(o.LlmTrainingDataPoisoning) {
		toSerialize["llm_training_data_poisoning"] = o.LlmTrainingDataPoisoning
	}
	if !IsNil(o.Log4shell) {
		toSerialize["log4shell"] = o.Log4shell
	}
	if !IsNil(o.MassAssignment) {
		toSerialize["mass_assignment"] = o.MassAssignment
	}
	if !IsNil(o.MismatchingPersistedQueriesAndSchema) {
		toSerialize["mismatching_persisted_queries_and_schema"] = o.MismatchingPersistedQueriesAndSchema
	}
	if !IsNil(o.Nosql) {
		toSerialize["nosql"] = o.Nosql
	}
	if !IsNil(o.NosqlStored) {
		toSerialize["nosql_stored"] = o.NosqlStored
	}
	if !IsNil(o.Nuclei) {
		toSerialize["nuclei"] = o.Nuclei
	}
	if !IsNil(o.OpenPort) {
		toSerialize["open_port"] = o.OpenPort
	}
	if !IsNil(o.OpenRedirect) {
		toSerialize["open_redirect"] = o.OpenRedirect
	}
	if !IsNil(o.PaginationMissing) {
		toSerialize["pagination_missing"] = o.PaginationMissing
	}
	if !IsNil(o.PasswordFieldAutocompletion) {
		toSerialize["password_field_autocompletion"] = o.PasswordFieldAutocompletion
	}
	if !IsNil(o.PermissiveJsonInput) {
		toSerialize["permissive_json_input"] = o.PermissiveJsonInput
	}
	if !IsNil(o.PositiveIntegerValidation) {
		toSerialize["positive_integer_validation"] = o.PositiveIntegerValidation
	}
	if !IsNil(o.PotentialCve) {
		toSerialize["potential_cve"] = o.PotentialCve
	}
	if !IsNil(o.PrivateData) {
		toSerialize["private_data"] = o.PrivateData
	}
	if !IsNil(o.PrivateFields) {
		toSerialize["private_fields"] = o.PrivateFields
	}
	if !IsNil(o.PrivateIp) {
		toSerialize["private_ip"] = o.PrivateIp
	}
	if !IsNil(o.PublicStateAlteringOperation) {
		toSerialize["public_state_altering_operation"] = o.PublicStateAlteringOperation
	}
	if !IsNil(o.ReflectedUrlParameter) {
		toSerialize["reflected_url_parameter"] = o.ReflectedUrlParameter
	}
	if !IsNil(o.RequestSmuggling) {
		toSerialize["request_smuggling"] = o.RequestSmuggling
	}
	if !IsNil(o.RequestUrlOverride) {
		toSerialize["request_url_override"] = o.RequestUrlOverride
	}
	if !IsNil(o.ResourceLimitingBypass) {
		toSerialize["resource_limiting_bypass"] = o.ResourceLimitingBypass
	}
	if !IsNil(o.ResponseSize) {
		toSerialize["response_size"] = o.ResponseSize
	}
	if !IsNil(o.ResponseTypeMismatch) {
		toSerialize["response_type_mismatch"] = o.ResponseTypeMismatch
	}
	if !IsNil(o.SecurityChecks) {
		toSerialize["security_checks"] = o.SecurityChecks
	}
	if !IsNil(o.SensitiveComments) {
		toSerialize["sensitive_comments"] = o.SensitiveComments
	}
	if !IsNil(o.SensitiveEndpointBruteforce) {
		toSerialize["sensitive_endpoint_bruteforce"] = o.SensitiveEndpointBruteforce
	}
	if !IsNil(o.ServerError) {
		toSerialize["server_error"] = o.ServerError
	}
	if !IsNil(o.SoftwareComponentLeak) {
		toSerialize["software_component_leak"] = o.SoftwareComponentLeak
	}
	if !IsNil(o.SpringbootActuatorDump) {
		toSerialize["springboot_actuator_dump"] = o.SpringbootActuatorDump
	}
	if !IsNil(o.SpringbootActuatorEnv) {
		toSerialize["springboot_actuator_env"] = o.SpringbootActuatorEnv
	}
	if !IsNil(o.SpringbootActuatorHeapdump) {
		toSerialize["springboot_actuator_heapdump"] = o.SpringbootActuatorHeapdump
	}
	if !IsNil(o.SpringbootActuatorLogfile) {
		toSerialize["springboot_actuator_logfile"] = o.SpringbootActuatorLogfile
	}
	if !IsNil(o.SpringbootActuatorMappings) {
		toSerialize["springboot_actuator_mappings"] = o.SpringbootActuatorMappings
	}
	if !IsNil(o.SpringbootActuatorRestart) {
		toSerialize["springboot_actuator_restart"] = o.SpringbootActuatorRestart
	}
	if !IsNil(o.SpringbootActuatorShutdown) {
		toSerialize["springboot_actuator_shutdown"] = o.SpringbootActuatorShutdown
	}
	if !IsNil(o.SpringbootActuatorTrace) {
		toSerialize["springboot_actuator_trace"] = o.SpringbootActuatorTrace
	}
	if !IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	if !IsNil(o.SslCertificate) {
		toSerialize["ssl_certificate"] = o.SslCertificate
	}
	if !IsNil(o.Ssl) {
		toSerialize["ssl"] = o.Ssl
	}
	if !IsNil(o.SsrfHeader) {
		toSerialize["ssrf_header"] = o.SsrfHeader
	}
	if !IsNil(o.Ssrf) {
		toSerialize["ssrf"] = o.Ssrf
	}
	if !IsNil(o.Ssti) {
		toSerialize["ssti"] = o.Ssti
	}
	if !IsNil(o.Stacktrace) {
		toSerialize["stacktrace"] = o.Stacktrace
	}
	if !IsNil(o.SubresourceIntegrityMissing) {
		toSerialize["subresource_integrity_missing"] = o.SubresourceIntegrityMissing
	}
	if !IsNil(o.SwaggerRules) {
		toSerialize["swagger_rules"] = o.SwaggerRules
	}
	if !IsNil(o.TenantIsolation) {
		toSerialize["tenant_isolation"] = o.TenantIsolation
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.TlsConfigurationCipher) {
		toSerialize["tls_configuration_cipher"] = o.TlsConfigurationCipher
	}
	if !IsNil(o.TlsConfigurationKey) {
		toSerialize["tls_configuration_key"] = o.TlsConfigurationKey
	}
	if !IsNil(o.TlsConfigurationProtocol) {
		toSerialize["tls_configuration_protocol"] = o.TlsConfigurationProtocol
	}
	if !IsNil(o.TlsConfigurationServerDefault) {
		toSerialize["tls_configuration_server_default"] = o.TlsConfigurationServerDefault
	}
	if !IsNil(o.TlsConfigurationServerPref) {
		toSerialize["tls_configuration_server_pref"] = o.TlsConfigurationServerPref
	}
	if !IsNil(o.TlsConfigurationVuln) {
		toSerialize["tls_configuration_vuln"] = o.TlsConfigurationVuln
	}
	if !IsNil(o.TypingMisconfiguration) {
		toSerialize["typing_misconfiguration"] = o.TypingMisconfiguration
	}
	if !IsNil(o.UndefinedObject) {
		toSerialize["undefined_object"] = o.UndefinedObject
	}
	if !IsNil(o.UnhandledEndpoint) {
		toSerialize["unhandled_endpoint"] = o.UnhandledEndpoint
	}
	if !IsNil(o.UnreachableServer) {
		toSerialize["unreachable_server"] = o.UnreachableServer
	}
	if !IsNil(o.UnsafeFunctionUse) {
		toSerialize["unsafe_function_use"] = o.UnsafeFunctionUse
	}
	if !IsNil(o.WafBypass) {
		toSerialize["waf_bypass"] = o.WafBypass
	}
	if !IsNil(o.WordpressOembedEndpointExposed) {
		toSerialize["wordpress_oembed_endpoint_exposed"] = o.WordpressOembedEndpointExposed
	}
	if !IsNil(o.WordpressRdfFeedUserExposed) {
		toSerialize["wordpress_rdf_feed_user_exposed"] = o.WordpressRdfFeedUserExposed
	}
	if !IsNil(o.WordpressRestApiUsersExposed) {
		toSerialize["wordpress_rest_api_users_exposed"] = o.WordpressRestApiUsersExposed
	}
	if !IsNil(o.WordpressWpCronExposed) {
		toSerialize["wordpress_wp_cron_exposed"] = o.WordpressWpCronExposed
	}
	if !IsNil(o.WordpressXmlrpcPhpExposed) {
		toSerialize["wordpress_xmlrpc_php_exposed"] = o.WordpressXmlrpcPhpExposed
	}
	if !IsNil(o.XssViaDomainTakeover) {
		toSerialize["xss_via_domain_takeover"] = o.XssViaDomainTakeover
	}
	if !IsNil(o.Xxe) {
		toSerialize["xxe"] = o.Xxe
	}
	if !IsNil(o.ZombieObject) {
		toSerialize["zombie_object"] = o.ZombieObject
	}
	if !IsNil(o.FlaskSessionCookie) {
		toSerialize["flask_session_cookie"] = o.FlaskSessionCookie
	}
	if !IsNil(o.RowLevelSecurity) {
		toSerialize["row_level_security"] = o.RowLevelSecurity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationSecurityTests) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationSecurityTests := _ProfileDetailedConfigurationSecurityTests{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationSecurityTests)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationSecurityTests(varProfileDetailedConfigurationSecurityTests)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "do_not_fuzz_params")
		delete(additionalProperties, "max_attempts_per_path")
		delete(additionalProperties, "max_requests_per_path")
		delete(additionalProperties, "high_number_of_custom_scalars")
		delete(additionalProperties, "high_number_of_pci")
		delete(additionalProperties, "high_number_of_pii")
		delete(additionalProperties, "high_number_of_phi")
		delete(additionalProperties, "high_number_of_secrets")
		delete(additionalProperties, "agentic")
		delete(additionalProperties, "airflow_config_exposure")
		delete(additionalProperties, "alibaba_canal_leak")
		delete(additionalProperties, "ansible_config_exposure")
		delete(additionalProperties, "appspec_exposure")
		delete(additionalProperties, "appveyor_config_exposure")
		delete(additionalProperties, "arbitrary_token_scope")
		delete(additionalProperties, "auth_bypass")
		delete(additionalProperties, "aws_access_token")
		delete(additionalProperties, "aws_config_exposure")
		delete(additionalProperties, "aws_docker_config_exposure")
		delete(additionalProperties, "awstats_config_exposure")
		delete(additionalProperties, "awstats_exposure")
		delete(additionalProperties, "azure_tenant_id_exposure")
		delete(additionalProperties, "bola")
		delete(additionalProperties, "character_limit")
		delete(additionalProperties, "command")
		delete(additionalProperties, "console_error")
		delete(additionalProperties, "content_security_policy")
		delete(additionalProperties, "cors")
		delete(additionalProperties, "crashing_page")
		delete(additionalProperties, "crlf")
		delete(additionalProperties, "csrf_get_based")
		delete(additionalProperties, "csrf_post_based")
		delete(additionalProperties, "debug_mode")
		delete(additionalProperties, "directory_listing")
		delete(additionalProperties, "directory_traversal")
		delete(additionalProperties, "dkim")
		delete(additionalProperties, "dmarc")
		delete(additionalProperties, "loopback")
		delete(additionalProperties, "permisive_spf")
		delete(additionalProperties, "dnsrecord_txt_length")
		delete(additionalProperties, "dnsrecord_txt_sensitive")
		delete(additionalProperties, "dnssec_disabled")
		delete(additionalProperties, "domain_takeover")
		delete(additionalProperties, "duplicated_object")
		delete(additionalProperties, "error_type_inconsistency")
		delete(additionalProperties, "excessive_browser_permissions")
		delete(additionalProperties, "exposed_mysql_config")
		delete(additionalProperties, "exposed_settings_php")
		delete(additionalProperties, "exposed_sourcemap")
		delete(additionalProperties, "exposed_sql_dumps")
		delete(additionalProperties, "file_disclosure")
		delete(additionalProperties, "file_inclusion")
		delete(additionalProperties, "forced_browsing")
		delete(additionalProperties, "frontend_localstorage_sensitive_data")
		delete(additionalProperties, "graphql_alias_limit")
		delete(additionalProperties, "graphql_apq")
		delete(additionalProperties, "graphql_batch_limit")
		delete(additionalProperties, "graphql_circular_introspection")
		delete(additionalProperties, "graphql_content_type")
		delete(additionalProperties, "graphql_depth_limit")
		delete(additionalProperties, "graphql_directive_overload")
		delete(additionalProperties, "graphql_extension_disclosure")
		delete(additionalProperties, "graphql_field_duplication")
		delete(additionalProperties, "graphql_field_limit")
		delete(additionalProperties, "graphql_field_suggestion")
		delete(additionalProperties, "graphql_recursive_fragment")
		delete(additionalProperties, "graphql_response_format")
		delete(additionalProperties, "graphql_width_limit")
		delete(additionalProperties, "guessable_cookie_value")
		delete(additionalProperties, "header_access_control_allow_origin")
		delete(additionalProperties, "header_cache_control")
		delete(additionalProperties, "header_content_security_policy")
		delete(additionalProperties, "header_content_type")
		delete(additionalProperties, "header_leak")
		delete(additionalProperties, "header_set_cookie")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "header_strict_transport_security")
		delete(additionalProperties, "header_x_content_type_options")
		delete(additionalProperties, "header_x_frame_options")
		delete(additionalProperties, "html_injection")
		delete(additionalProperties, "http_param_pollution")
		delete(additionalProperties, "ide_enabled")
		delete(additionalProperties, "improper_input")
		delete(additionalProperties, "improper_input_stored")
		delete(additionalProperties, "introspection_enabled")
		delete(additionalProperties, "invalid_allof")
		delete(additionalProperties, "invalid_parameters_in_path")
		delete(additionalProperties, "invalid_persisted_query")
		delete(additionalProperties, "invalid_refs")
		delete(additionalProperties, "jwt_alg_confusion")
		delete(additionalProperties, "jwt_alg_none")
		delete(additionalProperties, "exposed_jwt")
		delete(additionalProperties, "jwt_sign_check")
		delete(additionalProperties, "large_json_input")
		delete(additionalProperties, "leaking_authentication")
		delete(additionalProperties, "llm_detection")
		delete(additionalProperties, "llm_excessive_agency")
		delete(additionalProperties, "llm_insecure_output_handling")
		delete(additionalProperties, "llm_insecure_plugin_design")
		delete(additionalProperties, "llm_jail_break")
		delete(additionalProperties, "llm_model_dos")
		delete(additionalProperties, "llm_model_theft")
		delete(additionalProperties, "llm_overreliance")
		delete(additionalProperties, "llm_prompt_injection")
		delete(additionalProperties, "llm_sensitive_information_disclosure")
		delete(additionalProperties, "llm_supply_chain_vulnerabilities")
		delete(additionalProperties, "llm_training_data_poisoning")
		delete(additionalProperties, "log4shell")
		delete(additionalProperties, "mass_assignment")
		delete(additionalProperties, "mismatching_persisted_queries_and_schema")
		delete(additionalProperties, "nosql")
		delete(additionalProperties, "nosql_stored")
		delete(additionalProperties, "nuclei")
		delete(additionalProperties, "open_port")
		delete(additionalProperties, "open_redirect")
		delete(additionalProperties, "pagination_missing")
		delete(additionalProperties, "password_field_autocompletion")
		delete(additionalProperties, "permissive_json_input")
		delete(additionalProperties, "positive_integer_validation")
		delete(additionalProperties, "potential_cve")
		delete(additionalProperties, "private_data")
		delete(additionalProperties, "private_fields")
		delete(additionalProperties, "private_ip")
		delete(additionalProperties, "public_state_altering_operation")
		delete(additionalProperties, "reflected_url_parameter")
		delete(additionalProperties, "request_smuggling")
		delete(additionalProperties, "request_url_override")
		delete(additionalProperties, "resource_limiting_bypass")
		delete(additionalProperties, "response_size")
		delete(additionalProperties, "response_type_mismatch")
		delete(additionalProperties, "security_checks")
		delete(additionalProperties, "sensitive_comments")
		delete(additionalProperties, "sensitive_endpoint_bruteforce")
		delete(additionalProperties, "server_error")
		delete(additionalProperties, "software_component_leak")
		delete(additionalProperties, "springboot_actuator_dump")
		delete(additionalProperties, "springboot_actuator_env")
		delete(additionalProperties, "springboot_actuator_heapdump")
		delete(additionalProperties, "springboot_actuator_logfile")
		delete(additionalProperties, "springboot_actuator_mappings")
		delete(additionalProperties, "springboot_actuator_restart")
		delete(additionalProperties, "springboot_actuator_shutdown")
		delete(additionalProperties, "springboot_actuator_trace")
		delete(additionalProperties, "sql")
		delete(additionalProperties, "ssl_certificate")
		delete(additionalProperties, "ssl")
		delete(additionalProperties, "ssrf_header")
		delete(additionalProperties, "ssrf")
		delete(additionalProperties, "ssti")
		delete(additionalProperties, "stacktrace")
		delete(additionalProperties, "subresource_integrity_missing")
		delete(additionalProperties, "swagger_rules")
		delete(additionalProperties, "tenant_isolation")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "tls_configuration_cipher")
		delete(additionalProperties, "tls_configuration_key")
		delete(additionalProperties, "tls_configuration_protocol")
		delete(additionalProperties, "tls_configuration_server_default")
		delete(additionalProperties, "tls_configuration_server_pref")
		delete(additionalProperties, "tls_configuration_vuln")
		delete(additionalProperties, "typing_misconfiguration")
		delete(additionalProperties, "undefined_object")
		delete(additionalProperties, "unhandled_endpoint")
		delete(additionalProperties, "unreachable_server")
		delete(additionalProperties, "unsafe_function_use")
		delete(additionalProperties, "waf_bypass")
		delete(additionalProperties, "wordpress_oembed_endpoint_exposed")
		delete(additionalProperties, "wordpress_rdf_feed_user_exposed")
		delete(additionalProperties, "wordpress_rest_api_users_exposed")
		delete(additionalProperties, "wordpress_wp_cron_exposed")
		delete(additionalProperties, "wordpress_xmlrpc_php_exposed")
		delete(additionalProperties, "xss_via_domain_takeover")
		delete(additionalProperties, "xxe")
		delete(additionalProperties, "zombie_object")
		delete(additionalProperties, "flask_session_cookie")
		delete(additionalProperties, "row_level_security")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationSecurityTests struct {
	value *ProfileDetailedConfigurationSecurityTests
	isSet bool
}

func (v NullableProfileDetailedConfigurationSecurityTests) Get() *ProfileDetailedConfigurationSecurityTests {
	return v.value
}

func (v *NullableProfileDetailedConfigurationSecurityTests) Set(val *ProfileDetailedConfigurationSecurityTests) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationSecurityTests) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationSecurityTests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationSecurityTests(val *ProfileDetailedConfigurationSecurityTests) *NullableProfileDetailedConfigurationSecurityTests {
	return &NullableProfileDetailedConfigurationSecurityTests{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationSecurityTests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationSecurityTests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


