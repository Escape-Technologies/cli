/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)


// UpdateAssetRequestOwners The owners of the asset
type UpdateAssetRequestOwners struct {
	ArrayOfString *[]string
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *UpdateAssetRequestOwners) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString);
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil // data stored in dst.ArrayOfString, return on the first match
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(UpdateAssetRequestOwners)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateAssetRequestOwners) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableUpdateAssetRequestOwners struct {
	value *UpdateAssetRequestOwners
	isSet bool
}

func (v NullableUpdateAssetRequestOwners) Get() *UpdateAssetRequestOwners {
	return v.value
}

func (v *NullableUpdateAssetRequestOwners) Set(val *UpdateAssetRequestOwners) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAssetRequestOwners) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAssetRequestOwners) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAssetRequestOwners(val *UpdateAssetRequestOwners) *NullableUpdateAssetRequestOwners {
	return &NullableUpdateAssetRequestOwners{value: val, isSet: true}
}

func (v NullableUpdateAssetRequestOwners) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAssetRequestOwners) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


