/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ListTags200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListTags200ResponseDataInner{}

// ListTags200ResponseDataInner struct for ListTags200ResponseDataInner
type ListTags200ResponseDataInner struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Color string `json:"color"`
	OrganizationId string `json:"organizationId"`
	AdditionalProperties map[string]interface{}
}

type _ListTags200ResponseDataInner ListTags200ResponseDataInner

// NewListTags200ResponseDataInner instantiates a new ListTags200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTags200ResponseDataInner(id string, name string, color string, organizationId string) *ListTags200ResponseDataInner {
	this := ListTags200ResponseDataInner{}
	this.Id = id
	this.Name = name
	this.Color = color
	this.OrganizationId = organizationId
	return &this
}

// NewListTags200ResponseDataInnerWithDefaults instantiates a new ListTags200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTags200ResponseDataInnerWithDefaults() *ListTags200ResponseDataInner {
	this := ListTags200ResponseDataInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListTags200ResponseDataInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListTags200ResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListTags200ResponseDataInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ListTags200ResponseDataInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListTags200ResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListTags200ResponseDataInner) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value
func (o *ListTags200ResponseDataInner) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ListTags200ResponseDataInner) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ListTags200ResponseDataInner) SetColor(v string) {
	o.Color = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ListTags200ResponseDataInner) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ListTags200ResponseDataInner) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ListTags200ResponseDataInner) SetOrganizationId(v string) {
	o.OrganizationId = v
}

func (o ListTags200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListTags200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["color"] = o.Color
	toSerialize["organizationId"] = o.OrganizationId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListTags200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"color",
		"organizationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListTags200ResponseDataInner := _ListTags200ResponseDataInner{}

	err = json.Unmarshal(data, &varListTags200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = ListTags200ResponseDataInner(varListTags200ResponseDataInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "color")
		delete(additionalProperties, "organizationId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListTags200ResponseDataInner struct {
	value *ListTags200ResponseDataInner
	isSet bool
}

func (v NullableListTags200ResponseDataInner) Get() *ListTags200ResponseDataInner {
	return v.value
}

func (v *NullableListTags200ResponseDataInner) Set(val *ListTags200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListTags200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListTags200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTags200ResponseDataInner(val *ListTags200ResponseDataInner) *NullableListTags200ResponseDataInner {
	return &NullableListTags200ResponseDataInner{value: val, isSet: true}
}

func (v NullableListTags200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTags200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


