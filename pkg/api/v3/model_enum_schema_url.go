/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMSCHEMAURL the model 'ENUMSCHEMAURL'
type ENUMSCHEMAURL string

// List of ENUM_SCHEMA_URL
const (
	ENUMSCHEMAURL_SCHEMA_URL ENUMSCHEMAURL = "schema.url"
)

// All allowed values of ENUMSCHEMAURL enum
var AllowedENUMSCHEMAURLEnumValues = []ENUMSCHEMAURL{
	"schema.url",
}

func (v *ENUMSCHEMAURL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMSCHEMAURL(value)
	for _, existing := range AllowedENUMSCHEMAURLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMSCHEMAURL", value)
}

// NewENUMSCHEMAURLFromValue returns a pointer to a valid ENUMSCHEMAURL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMSCHEMAURLFromValue(v string) (*ENUMSCHEMAURL, error) {
	ev := ENUMSCHEMAURL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMSCHEMAURL: valid values are %v", v, AllowedENUMSCHEMAURLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMSCHEMAURL) IsValid() bool {
	for _, existing := range AllowedENUMSCHEMAURLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_SCHEMA_URL value
func (v ENUMSCHEMAURL) Ptr() *ENUMSCHEMAURL {
	return &v
}

type NullableENUMSCHEMAURL struct {
	value *ENUMSCHEMAURL
	isSet bool
}

func (v NullableENUMSCHEMAURL) Get() *ENUMSCHEMAURL {
	return v.value
}

func (v *NullableENUMSCHEMAURL) Set(val *ENUMSCHEMAURL) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMSCHEMAURL) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMSCHEMAURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMSCHEMAURL(val *ENUMSCHEMAURL) *NullableENUMSCHEMAURL {
	return &NullableENUMSCHEMAURL{value: val, isSet: true}
}

func (v NullableENUMSCHEMAURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMSCHEMAURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

