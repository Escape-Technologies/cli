/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the IgnoreScan409Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IgnoreScan409Response{}

// IgnoreScan409Response struct for IgnoreScan409Response
type IgnoreScan409Response struct {
	Message EnumCONFLICT `json:"message"`
	Details string `json:"details"`
	AdditionalProperties map[string]interface{}
}

type _IgnoreScan409Response IgnoreScan409Response

// NewIgnoreScan409Response instantiates a new IgnoreScan409Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIgnoreScan409Response(message EnumCONFLICT, details string) *IgnoreScan409Response {
	this := IgnoreScan409Response{}
	this.Message = message
	this.Details = details
	return &this
}

// NewIgnoreScan409ResponseWithDefaults instantiates a new IgnoreScan409Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIgnoreScan409ResponseWithDefaults() *IgnoreScan409Response {
	this := IgnoreScan409Response{}
	return &this
}

// GetMessage returns the Message field value
func (o *IgnoreScan409Response) GetMessage() EnumCONFLICT {
	if o == nil {
		var ret EnumCONFLICT
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *IgnoreScan409Response) GetMessageOk() (*EnumCONFLICT, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *IgnoreScan409Response) SetMessage(v EnumCONFLICT) {
	o.Message = v
}

// GetDetails returns the Details field value
func (o *IgnoreScan409Response) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *IgnoreScan409Response) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *IgnoreScan409Response) SetDetails(v string) {
	o.Details = v
}

func (o IgnoreScan409Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IgnoreScan409Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["details"] = o.Details

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IgnoreScan409Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIgnoreScan409Response := _IgnoreScan409Response{}

	err = json.Unmarshal(data, &varIgnoreScan409Response)

	if err != nil {
		return err
	}

	*o = IgnoreScan409Response(varIgnoreScan409Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIgnoreScan409Response struct {
	value *IgnoreScan409Response
	isSet bool
}

func (v NullableIgnoreScan409Response) Get() *IgnoreScan409Response {
	return v.value
}

func (v *NullableIgnoreScan409Response) Set(val *IgnoreScan409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIgnoreScan409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIgnoreScan409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIgnoreScan409Response(val *IgnoreScan409Response) *NullableIgnoreScan409Response {
	return &NullableIgnoreScan409Response{value: val, isSet: true}
}

func (v NullableIgnoreScan409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIgnoreScan409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


