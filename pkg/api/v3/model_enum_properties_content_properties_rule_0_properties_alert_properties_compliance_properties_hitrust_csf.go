/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF the model 'ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF'
type ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF string

// List of ENUM_PROPERTIES_CONTENT_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_HITRUST_CSF
const (
	ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF__01_F ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF = "01.f"
	ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF__01_G ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF = "01.g"
)

// All allowed values of ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF enum
var AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFEnumValues = []ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF{
	"01.f",
	"01.g",
}

func (v *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF(value)
	for _, existing := range AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF", value)
}

// NewENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFFromValue returns a pointer to a valid ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFFromValue(v string) (*ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF, error) {
	ev := ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF: valid values are %v", v, AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSFEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_CONTENT_PROPERTIES_RULE_0_PROPERTIES_ALERT_PROPERTIES_COMPLIANCE_PROPERTIES_HITRUST_CSF value
func (v ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) Ptr() *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF {
	return &v
}

type NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF struct {
	value *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF
	isSet bool
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) Get() *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF {
	return v.value
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) Set(val *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF(val *ENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF {
	return &NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESCONTENTPROPERTIESRULE0PROPERTIESALERTPROPERTIESCOMPLIANCEPROPERTIESHITRUSTCSF) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

