/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY The category of the issue
type ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY string

// List of ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_CATEGORY
const (
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_ACCESS_CONTROL ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "ACCESS_CONTROL"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_CONFIGURATION ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "CONFIGURATION"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_CUSTOM ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "CUSTOM"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_INFORMATION_DISCLOSURE ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "INFORMATION_DISCLOSURE"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_INJECTION ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "INJECTION"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_PROTOCOL ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "PROTOCOL"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_REQUEST_FORGERY ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "REQUEST_FORGERY"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_RESOURCE_LIMITATION ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "RESOURCE_LIMITATION"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_SCHEMA ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "SCHEMA"
	ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY_SENSITIVE_DATA ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY = "SENSITIVE_DATA"
)

// All allowed values of ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY enum
var AllowedENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYEnumValues = []ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY{
	"ACCESS_CONTROL",
	"CONFIGURATION",
	"CUSTOM",
	"INFORMATION_DISCLOSURE",
	"INJECTION",
	"PROTOCOL",
	"REQUEST_FORGERY",
	"RESOURCE_LIMITATION",
	"SCHEMA",
	"SENSITIVE_DATA",
}

func (v *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY(value)
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY", value)
}

// NewENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYFromValue returns a pointer to a valid ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYFromValue(v string) (*ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY, error) {
	ev := ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY: valid values are %v", v, AllowedENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESCATEGORYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_CATEGORY value
func (v ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) Ptr() *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY {
	return &v
}

type NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY struct {
	value *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY
	isSet bool
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) Get() *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY {
	return v.value
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) Set(val *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY(val *ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) *NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY {
	return &NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

