/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the UpdateRoleRequestRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRoleRequestRole{}

// UpdateRoleRequestRole struct for UpdateRoleRequestRole
type UpdateRoleRequestRole struct {
	// The name of the role
	Name *string `json:"name,omitempty"`
	// The permissions of the role
	Permissions []ENUMPROPERTIESPERMISSIONSITEMS `json:"permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateRoleRequestRole UpdateRoleRequestRole

// NewUpdateRoleRequestRole instantiates a new UpdateRoleRequestRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRoleRequestRole() *UpdateRoleRequestRole {
	this := UpdateRoleRequestRole{}
	return &this
}

// NewUpdateRoleRequestRoleWithDefaults instantiates a new UpdateRoleRequestRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRoleRequestRoleWithDefaults() *UpdateRoleRequestRole {
	this := UpdateRoleRequestRole{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateRoleRequestRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRoleRequestRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateRoleRequestRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateRoleRequestRole) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UpdateRoleRequestRole) GetPermissions() []ENUMPROPERTIESPERMISSIONSITEMS {
	if o == nil || IsNil(o.Permissions) {
		var ret []ENUMPROPERTIESPERMISSIONSITEMS
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRoleRequestRole) GetPermissionsOk() ([]ENUMPROPERTIESPERMISSIONSITEMS, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UpdateRoleRequestRole) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []ENUMPROPERTIESPERMISSIONSITEMS and assigns it to the Permissions field.
func (o *UpdateRoleRequestRole) SetPermissions(v []ENUMPROPERTIESPERMISSIONSITEMS) {
	o.Permissions = v
}

func (o UpdateRoleRequestRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRoleRequestRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateRoleRequestRole) UnmarshalJSON(data []byte) (err error) {
	varUpdateRoleRequestRole := _UpdateRoleRequestRole{}

	err = json.Unmarshal(data, &varUpdateRoleRequestRole)

	if err != nil {
		return err
	}

	*o = UpdateRoleRequestRole(varUpdateRoleRequestRole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateRoleRequestRole struct {
	value *UpdateRoleRequestRole
	isSet bool
}

func (v NullableUpdateRoleRequestRole) Get() *UpdateRoleRequestRole {
	return v.value
}

func (v *NullableUpdateRoleRequestRole) Set(val *UpdateRoleRequestRole) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRoleRequestRole) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRoleRequestRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRoleRequestRole(val *UpdateRoleRequestRole) *NullableUpdateRoleRequestRole {
	return &NullableUpdateRoleRequestRole{value: val, isSet: true}
}

func (v NullableUpdateRoleRequestRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRoleRequestRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


