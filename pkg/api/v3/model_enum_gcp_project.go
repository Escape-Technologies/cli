/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMGCPPROJECT the model 'ENUMGCPPROJECT'
type ENUMGCPPROJECT string

// List of ENUM_GCP_PROJECT
const (
	ENUMGCPPROJECT_GCP_PROJECT ENUMGCPPROJECT = "GCP_PROJECT"
)

// All allowed values of ENUMGCPPROJECT enum
var AllowedENUMGCPPROJECTEnumValues = []ENUMGCPPROJECT{
	"GCP_PROJECT",
}

func (v *ENUMGCPPROJECT) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMGCPPROJECT(value)
	for _, existing := range AllowedENUMGCPPROJECTEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMGCPPROJECT", value)
}

// NewENUMGCPPROJECTFromValue returns a pointer to a valid ENUMGCPPROJECT
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMGCPPROJECTFromValue(v string) (*ENUMGCPPROJECT, error) {
	ev := ENUMGCPPROJECT(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMGCPPROJECT: valid values are %v", v, AllowedENUMGCPPROJECTEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMGCPPROJECT) IsValid() bool {
	for _, existing := range AllowedENUMGCPPROJECTEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_GCP_PROJECT value
func (v ENUMGCPPROJECT) Ptr() *ENUMGCPPROJECT {
	return &v
}

type NullableENUMGCPPROJECT struct {
	value *ENUMGCPPROJECT
	isSet bool
}

func (v NullableENUMGCPPROJECT) Get() *ENUMGCPPROJECT {
	return v.value
}

func (v *NullableENUMGCPPROJECT) Set(val *ENUMGCPPROJECT) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMGCPPROJECT) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMGCPPROJECT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMGCPPROJECT(val *ENUMGCPPROJECT) *NullableENUMGCPPROJECT {
	return &NullableENUMGCPPROJECT{value: val, isSet: true}
}

func (v NullableENUMGCPPROJECT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMGCPPROJECT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

