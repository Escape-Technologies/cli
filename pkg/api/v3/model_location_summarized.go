/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the LocationSummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationSummarized{}

// LocationSummarized Summarized information about a location
type LocationSummarized struct {
	// The location ID.
	Id string `json:"id"`
	// The name of the location.
	Name string `json:"name"`
	// The type of the location.
	Type string `json:"type"`
	// Whether the location is enabled.
	Enabled bool `json:"enabled"`
	Links LocationSummarizedLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _LocationSummarized LocationSummarized

// NewLocationSummarized instantiates a new LocationSummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationSummarized(id string, name string, type_ string, enabled bool, links LocationSummarizedLinks) *LocationSummarized {
	this := LocationSummarized{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Enabled = enabled
	this.Links = links
	return &this
}

// NewLocationSummarizedWithDefaults instantiates a new LocationSummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationSummarizedWithDefaults() *LocationSummarized {
	this := LocationSummarized{}
	return &this
}

// GetId returns the Id field value
func (o *LocationSummarized) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LocationSummarized) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LocationSummarized) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *LocationSummarized) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LocationSummarized) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LocationSummarized) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *LocationSummarized) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LocationSummarized) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LocationSummarized) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *LocationSummarized) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LocationSummarized) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LocationSummarized) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLinks returns the Links field value
func (o *LocationSummarized) GetLinks() LocationSummarizedLinks {
	if o == nil {
		var ret LocationSummarizedLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *LocationSummarized) GetLinksOk() (*LocationSummarizedLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *LocationSummarized) SetLinks(v LocationSummarizedLinks) {
	o.Links = v
}

func (o LocationSummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationSummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["enabled"] = o.Enabled
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocationSummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"enabled",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationSummarized := _LocationSummarized{}

	err = json.Unmarshal(data, &varLocationSummarized)

	if err != nil {
		return err
	}

	*o = LocationSummarized(varLocationSummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocationSummarized struct {
	value *LocationSummarized
	isSet bool
}

func (v NullableLocationSummarized) Get() *LocationSummarized {
	return v.value
}

func (v *NullableLocationSummarized) Set(val *LocationSummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationSummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationSummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationSummarized(val *LocationSummarized) *NullableLocationSummarized {
	return &NullableLocationSummarized{value: val, isSet: true}
}

func (v NullableLocationSummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationSummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


