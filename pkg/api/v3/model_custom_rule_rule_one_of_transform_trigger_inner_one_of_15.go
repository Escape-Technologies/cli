/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomRuleRuleOneOfTransformTriggerInnerOneOf15 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRuleRuleOneOfTransformTriggerInnerOneOf15{}

// CustomRuleRuleOneOfTransformTriggerInnerOneOf15 struct for CustomRuleRuleOneOfTransformTriggerInnerOneOf15
type CustomRuleRuleOneOfTransformTriggerInnerOneOf15 struct {
	Key *CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name `json:"key,omitempty"`
	Value *CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name `json:"value,omitempty"`
	If ENUMRESPONSEHEADERS `json:"if"`
	AdditionalProperties map[string]interface{}
}

type _CustomRuleRuleOneOfTransformTriggerInnerOneOf15 CustomRuleRuleOneOfTransformTriggerInnerOneOf15

// NewCustomRuleRuleOneOfTransformTriggerInnerOneOf15 instantiates a new CustomRuleRuleOneOfTransformTriggerInnerOneOf15 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRuleRuleOneOfTransformTriggerInnerOneOf15(if_ ENUMRESPONSEHEADERS) *CustomRuleRuleOneOfTransformTriggerInnerOneOf15 {
	this := CustomRuleRuleOneOfTransformTriggerInnerOneOf15{}
	this.If = if_
	return &this
}

// NewCustomRuleRuleOneOfTransformTriggerInnerOneOf15WithDefaults instantiates a new CustomRuleRuleOneOfTransformTriggerInnerOneOf15 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRuleRuleOneOfTransformTriggerInnerOneOf15WithDefaults() *CustomRuleRuleOneOfTransformTriggerInnerOneOf15 {
	this := CustomRuleRuleOneOfTransformTriggerInnerOneOf15{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetKey() CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name {
	if o == nil || IsNil(o.Key) {
		var ret CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetKeyOk() (*CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name and assigns it to the Key field.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) SetKey(v CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetValue() CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name {
	if o == nil || IsNil(o.Value) {
		var ret CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetValueOk() (*CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name and assigns it to the Value field.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) SetValue(v CustomRuleRuleOneOfTransformTriggerInnerOneOf7Name) {
	o.Value = &v
}

// GetIf returns the If field value
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetIf() ENUMRESPONSEHEADERS {
	if o == nil {
		var ret ENUMRESPONSEHEADERS
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) GetIfOk() (*ENUMRESPONSEHEADERS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) SetIf(v ENUMRESPONSEHEADERS) {
	o.If = v
}

func (o CustomRuleRuleOneOfTransformTriggerInnerOneOf15) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRuleRuleOneOfTransformTriggerInnerOneOf15) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	toSerialize["if"] = o.If

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"if",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomRuleRuleOneOfTransformTriggerInnerOneOf15 := _CustomRuleRuleOneOfTransformTriggerInnerOneOf15{}

	err = json.Unmarshal(data, &varCustomRuleRuleOneOfTransformTriggerInnerOneOf15)

	if err != nil {
		return err
	}

	*o = CustomRuleRuleOneOfTransformTriggerInnerOneOf15(varCustomRuleRuleOneOfTransformTriggerInnerOneOf15)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "value")
		delete(additionalProperties, "if")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15 struct {
	value *CustomRuleRuleOneOfTransformTriggerInnerOneOf15
	isSet bool
}

func (v NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) Get() *CustomRuleRuleOneOfTransformTriggerInnerOneOf15 {
	return v.value
}

func (v *NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) Set(val *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15(val *CustomRuleRuleOneOfTransformTriggerInnerOneOf15) *NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15 {
	return &NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15{value: val, isSet: true}
}

func (v NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRuleRuleOneOfTransformTriggerInnerOneOf15) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


