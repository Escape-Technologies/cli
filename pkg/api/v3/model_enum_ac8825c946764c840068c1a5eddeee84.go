/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumAc8825c946764c840068c1a5eddeee84 the model 'EnumAc8825c946764c840068c1a5eddeee84'
type EnumAc8825c946764c840068c1a5eddeee84 string

// List of Enum_ac8825c946764c840068c1a5eddeee84
const (
	ENUMAC8825C946764C840068C1A5EDDEEE84_DEBUG EnumAc8825c946764c840068c1a5eddeee84 = "DEBUG"
	ENUMAC8825C946764C840068C1A5EDDEEE84_ERROR EnumAc8825c946764c840068c1a5eddeee84 = "ERROR"
	ENUMAC8825C946764C840068C1A5EDDEEE84_INFO EnumAc8825c946764c840068c1a5eddeee84 = "INFO"
	ENUMAC8825C946764C840068C1A5EDDEEE84_WARNING EnumAc8825c946764c840068c1a5eddeee84 = "WARNING"
)

// All allowed values of EnumAc8825c946764c840068c1a5eddeee84 enum
var AllowedEnumAc8825c946764c840068c1a5eddeee84EnumValues = []EnumAc8825c946764c840068c1a5eddeee84{
	"DEBUG",
	"ERROR",
	"INFO",
	"WARNING",
}

func (v *EnumAc8825c946764c840068c1a5eddeee84) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAc8825c946764c840068c1a5eddeee84(value)
	for _, existing := range AllowedEnumAc8825c946764c840068c1a5eddeee84EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumAc8825c946764c840068c1a5eddeee84", value)
}

// NewEnumAc8825c946764c840068c1a5eddeee84FromValue returns a pointer to a valid EnumAc8825c946764c840068c1a5eddeee84
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAc8825c946764c840068c1a5eddeee84FromValue(v string) (*EnumAc8825c946764c840068c1a5eddeee84, error) {
	ev := EnumAc8825c946764c840068c1a5eddeee84(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAc8825c946764c840068c1a5eddeee84: valid values are %v", v, AllowedEnumAc8825c946764c840068c1a5eddeee84EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAc8825c946764c840068c1a5eddeee84) IsValid() bool {
	for _, existing := range AllowedEnumAc8825c946764c840068c1a5eddeee84EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_ac8825c946764c840068c1a5eddeee84 value
func (v EnumAc8825c946764c840068c1a5eddeee84) Ptr() *EnumAc8825c946764c840068c1a5eddeee84 {
	return &v
}

type NullableEnumAc8825c946764c840068c1a5eddeee84 struct {
	value *EnumAc8825c946764c840068c1a5eddeee84
	isSet bool
}

func (v NullableEnumAc8825c946764c840068c1a5eddeee84) Get() *EnumAc8825c946764c840068c1a5eddeee84 {
	return v.value
}

func (v *NullableEnumAc8825c946764c840068c1a5eddeee84) Set(val *EnumAc8825c946764c840068c1a5eddeee84) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAc8825c946764c840068c1a5eddeee84) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAc8825c946764c840068c1a5eddeee84) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAc8825c946764c840068c1a5eddeee84(val *EnumAc8825c946764c840068c1a5eddeee84) *NullableEnumAc8825c946764c840068c1a5eddeee84 {
	return &NullableEnumAc8825c946764c840068c1a5eddeee84{value: val, isSet: true}
}

func (v NullableEnumAc8825c946764c840068c1a5eddeee84) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAc8825c946764c840068c1a5eddeee84) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

