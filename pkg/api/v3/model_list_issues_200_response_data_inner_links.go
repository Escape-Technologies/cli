/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ListIssues200ResponseDataInnerLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssues200ResponseDataInnerLinks{}

// ListIssues200ResponseDataInnerLinks struct for ListIssues200ResponseDataInnerLinks
type ListIssues200ResponseDataInnerLinks struct {
	// URL to view the issue overview in the platform
	IssueOverview string `json:"issueOverview"`
	AdditionalProperties map[string]interface{}
}

type _ListIssues200ResponseDataInnerLinks ListIssues200ResponseDataInnerLinks

// NewListIssues200ResponseDataInnerLinks instantiates a new ListIssues200ResponseDataInnerLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssues200ResponseDataInnerLinks(issueOverview string) *ListIssues200ResponseDataInnerLinks {
	this := ListIssues200ResponseDataInnerLinks{}
	this.IssueOverview = issueOverview
	return &this
}

// NewListIssues200ResponseDataInnerLinksWithDefaults instantiates a new ListIssues200ResponseDataInnerLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssues200ResponseDataInnerLinksWithDefaults() *ListIssues200ResponseDataInnerLinks {
	this := ListIssues200ResponseDataInnerLinks{}
	return &this
}

// GetIssueOverview returns the IssueOverview field value
func (o *ListIssues200ResponseDataInnerLinks) GetIssueOverview() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueOverview
}

// GetIssueOverviewOk returns a tuple with the IssueOverview field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseDataInnerLinks) GetIssueOverviewOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueOverview, true
}

// SetIssueOverview sets field value
func (o *ListIssues200ResponseDataInnerLinks) SetIssueOverview(v string) {
	o.IssueOverview = v
}

func (o ListIssues200ResponseDataInnerLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssues200ResponseDataInnerLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issueOverview"] = o.IssueOverview

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListIssues200ResponseDataInnerLinks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issueOverview",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssues200ResponseDataInnerLinks := _ListIssues200ResponseDataInnerLinks{}

	err = json.Unmarshal(data, &varListIssues200ResponseDataInnerLinks)

	if err != nil {
		return err
	}

	*o = ListIssues200ResponseDataInnerLinks(varListIssues200ResponseDataInnerLinks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "issueOverview")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListIssues200ResponseDataInnerLinks struct {
	value *ListIssues200ResponseDataInnerLinks
	isSet bool
}

func (v NullableListIssues200ResponseDataInnerLinks) Get() *ListIssues200ResponseDataInnerLinks {
	return v.value
}

func (v *NullableListIssues200ResponseDataInnerLinks) Set(val *ListIssues200ResponseDataInnerLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssues200ResponseDataInnerLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssues200ResponseDataInnerLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssues200ResponseDataInnerLinks(val *ListIssues200ResponseDataInnerLinks) *NullableListIssues200ResponseDataInnerLinks {
	return &NullableListIssues200ResponseDataInnerLinks{value: val, isSet: true}
}

func (v NullableListIssues200ResponseDataInnerLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssues200ResponseDataInnerLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


