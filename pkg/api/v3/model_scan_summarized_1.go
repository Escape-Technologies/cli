/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ScanSummarized1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanSummarized1{}

// ScanSummarized1 Summarized information about a scan
type ScanSummarized1 struct {
	// The id of the scan
	Id string `json:"id"`
	// The status of the scan
	Status string `json:"status"`
	// The date and time the scan was created
	CreatedAt string `json:"createdAt"`
	// The date and time the scan was finished
	FinishedAt *string `json:"finishedAt,omitempty"`
	// The score of the scan
	Score *float32 `json:"score,omitempty"`
	// The duration of the scan
	Duration float32 `json:"duration"`
	// The progress ratio of the scan
	ProgressRatio float32 `json:"progressRatio"`
	// The initiator of the scan
	Initiator string `json:"initiator"`
	// The kind of the scan
	Kind string `json:"kind"`
	// The commit hash of the scan
	CommitHash *string `json:"commitHash,omitempty"`
	// The commit branch of the scan
	CommitBranch *string `json:"commitBranch,omitempty"`
	Links ScanSummarizedLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _ScanSummarized1 ScanSummarized1

// NewScanSummarized1 instantiates a new ScanSummarized1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanSummarized1(id string, status string, createdAt string, duration float32, progressRatio float32, initiator string, kind string, links ScanSummarizedLinks) *ScanSummarized1 {
	this := ScanSummarized1{}
	this.Id = id
	this.Status = status
	this.CreatedAt = createdAt
	this.Duration = duration
	this.ProgressRatio = progressRatio
	this.Initiator = initiator
	this.Kind = kind
	this.Links = links
	return &this
}

// NewScanSummarized1WithDefaults instantiates a new ScanSummarized1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanSummarized1WithDefaults() *ScanSummarized1 {
	this := ScanSummarized1{}
	return &this
}

// GetId returns the Id field value
func (o *ScanSummarized1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScanSummarized1) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *ScanSummarized1) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ScanSummarized1) SetStatus(v string) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ScanSummarized1) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ScanSummarized1) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *ScanSummarized1) GetFinishedAt() string {
	if o == nil || IsNil(o.FinishedAt) {
		var ret string
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetFinishedAtOk() (*string, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *ScanSummarized1) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given string and assigns it to the FinishedAt field.
func (o *ScanSummarized1) SetFinishedAt(v string) {
	o.FinishedAt = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ScanSummarized1) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ScanSummarized1) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *ScanSummarized1) SetScore(v float32) {
	o.Score = &v
}

// GetDuration returns the Duration field value
func (o *ScanSummarized1) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *ScanSummarized1) SetDuration(v float32) {
	o.Duration = v
}

// GetProgressRatio returns the ProgressRatio field value
func (o *ScanSummarized1) GetProgressRatio() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProgressRatio
}

// GetProgressRatioOk returns a tuple with the ProgressRatio field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetProgressRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgressRatio, true
}

// SetProgressRatio sets field value
func (o *ScanSummarized1) SetProgressRatio(v float32) {
	o.ProgressRatio = v
}

// GetInitiator returns the Initiator field value
func (o *ScanSummarized1) GetInitiator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetInitiatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *ScanSummarized1) SetInitiator(v string) {
	o.Initiator = v
}

// GetKind returns the Kind field value
func (o *ScanSummarized1) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ScanSummarized1) SetKind(v string) {
	o.Kind = v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ScanSummarized1) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ScanSummarized1) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ScanSummarized1) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetCommitBranch returns the CommitBranch field value if set, zero value otherwise.
func (o *ScanSummarized1) GetCommitBranch() string {
	if o == nil || IsNil(o.CommitBranch) {
		var ret string
		return ret
	}
	return *o.CommitBranch
}

// GetCommitBranchOk returns a tuple with the CommitBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetCommitBranchOk() (*string, bool) {
	if o == nil || IsNil(o.CommitBranch) {
		return nil, false
	}
	return o.CommitBranch, true
}

// HasCommitBranch returns a boolean if a field has been set.
func (o *ScanSummarized1) HasCommitBranch() bool {
	if o != nil && !IsNil(o.CommitBranch) {
		return true
	}

	return false
}

// SetCommitBranch gets a reference to the given string and assigns it to the CommitBranch field.
func (o *ScanSummarized1) SetCommitBranch(v string) {
	o.CommitBranch = &v
}

// GetLinks returns the Links field value
func (o *ScanSummarized1) GetLinks() ScanSummarizedLinks {
	if o == nil {
		var ret ScanSummarizedLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ScanSummarized1) GetLinksOk() (*ScanSummarizedLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ScanSummarized1) SetLinks(v ScanSummarizedLinks) {
	o.Links = v
}

func (o ScanSummarized1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanSummarized1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.FinishedAt) {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	toSerialize["duration"] = o.Duration
	toSerialize["progressRatio"] = o.ProgressRatio
	toSerialize["initiator"] = o.Initiator
	toSerialize["kind"] = o.Kind
	if !IsNil(o.CommitHash) {
		toSerialize["commitHash"] = o.CommitHash
	}
	if !IsNil(o.CommitBranch) {
		toSerialize["commitBranch"] = o.CommitBranch
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScanSummarized1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"createdAt",
		"duration",
		"progressRatio",
		"initiator",
		"kind",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScanSummarized1 := _ScanSummarized1{}

	err = json.Unmarshal(data, &varScanSummarized1)

	if err != nil {
		return err
	}

	*o = ScanSummarized1(varScanSummarized1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "finishedAt")
		delete(additionalProperties, "score")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "progressRatio")
		delete(additionalProperties, "initiator")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "commitHash")
		delete(additionalProperties, "commitBranch")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScanSummarized1 struct {
	value *ScanSummarized1
	isSet bool
}

func (v NullableScanSummarized1) Get() *ScanSummarized1 {
	return v.value
}

func (v *NullableScanSummarized1) Set(val *ScanSummarized1) {
	v.value = val
	v.isSet = true
}

func (v NullableScanSummarized1) IsSet() bool {
	return v.isSet
}

func (v *NullableScanSummarized1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanSummarized1(val *ScanSummarized1) *NullableScanSummarized1 {
	return &NullableScanSummarized1{value: val, isSet: true}
}

func (v NullableScanSummarized1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanSummarized1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


