/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMLOCATIONDELETEDSUCCESSFULLY the model 'ENUMLOCATIONDELETEDSUCCESSFULLY'
type ENUMLOCATIONDELETEDSUCCESSFULLY string

// List of ENUM_LOCATION_DELETED_SUCCESSFULLY
const (
	ENUMLOCATIONDELETEDSUCCESSFULLY_LOCATION_DELETED_SUCCESSFULLY ENUMLOCATIONDELETEDSUCCESSFULLY = "Location deleted successfully"
)

// All allowed values of ENUMLOCATIONDELETEDSUCCESSFULLY enum
var AllowedENUMLOCATIONDELETEDSUCCESSFULLYEnumValues = []ENUMLOCATIONDELETEDSUCCESSFULLY{
	"Location deleted successfully",
}

func (v *ENUMLOCATIONDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMLOCATIONDELETEDSUCCESSFULLY(value)
	for _, existing := range AllowedENUMLOCATIONDELETEDSUCCESSFULLYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMLOCATIONDELETEDSUCCESSFULLY", value)
}

// NewENUMLOCATIONDELETEDSUCCESSFULLYFromValue returns a pointer to a valid ENUMLOCATIONDELETEDSUCCESSFULLY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMLOCATIONDELETEDSUCCESSFULLYFromValue(v string) (*ENUMLOCATIONDELETEDSUCCESSFULLY, error) {
	ev := ENUMLOCATIONDELETEDSUCCESSFULLY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMLOCATIONDELETEDSUCCESSFULLY: valid values are %v", v, AllowedENUMLOCATIONDELETEDSUCCESSFULLYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMLOCATIONDELETEDSUCCESSFULLY) IsValid() bool {
	for _, existing := range AllowedENUMLOCATIONDELETEDSUCCESSFULLYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_LOCATION_DELETED_SUCCESSFULLY value
func (v ENUMLOCATIONDELETEDSUCCESSFULLY) Ptr() *ENUMLOCATIONDELETEDSUCCESSFULLY {
	return &v
}

type NullableENUMLOCATIONDELETEDSUCCESSFULLY struct {
	value *ENUMLOCATIONDELETEDSUCCESSFULLY
	isSet bool
}

func (v NullableENUMLOCATIONDELETEDSUCCESSFULLY) Get() *ENUMLOCATIONDELETEDSUCCESSFULLY {
	return v.value
}

func (v *NullableENUMLOCATIONDELETEDSUCCESSFULLY) Set(val *ENUMLOCATIONDELETEDSUCCESSFULLY) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMLOCATIONDELETEDSUCCESSFULLY) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMLOCATIONDELETEDSUCCESSFULLY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMLOCATIONDELETEDSUCCESSFULLY(val *ENUMLOCATIONDELETEDSUCCESSFULLY) *NullableENUMLOCATIONDELETEDSUCCESSFULLY {
	return &NullableENUMLOCATIONDELETEDSUCCESSFULLY{value: val, isSet: true}
}

func (v NullableENUMLOCATIONDELETEDSUCCESSFULLY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMLOCATIONDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

