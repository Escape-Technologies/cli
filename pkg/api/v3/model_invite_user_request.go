/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the InviteUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteUserRequest{}

// InviteUserRequest struct for InviteUserRequest
type InviteUserRequest struct {
	// The emails of the users to invite
	Emails []string `json:"emails"`
	// An optional list of role bindings to create for the users
	Bindings []InviteUserRequestBindingsInner `json:"bindings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InviteUserRequest InviteUserRequest

// NewInviteUserRequest instantiates a new InviteUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteUserRequest(emails []string) *InviteUserRequest {
	this := InviteUserRequest{}
	this.Emails = emails
	return &this
}

// NewInviteUserRequestWithDefaults instantiates a new InviteUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteUserRequestWithDefaults() *InviteUserRequest {
	this := InviteUserRequest{}
	return &this
}

// GetEmails returns the Emails field value
func (o *InviteUserRequest) GetEmails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *InviteUserRequest) GetEmailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *InviteUserRequest) SetEmails(v []string) {
	o.Emails = v
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *InviteUserRequest) GetBindings() []InviteUserRequestBindingsInner {
	if o == nil || IsNil(o.Bindings) {
		var ret []InviteUserRequestBindingsInner
		return ret
	}
	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteUserRequest) GetBindingsOk() ([]InviteUserRequestBindingsInner, bool) {
	if o == nil || IsNil(o.Bindings) {
		return nil, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *InviteUserRequest) HasBindings() bool {
	if o != nil && !IsNil(o.Bindings) {
		return true
	}

	return false
}

// SetBindings gets a reference to the given []InviteUserRequestBindingsInner and assigns it to the Bindings field.
func (o *InviteUserRequest) SetBindings(v []InviteUserRequestBindingsInner) {
	o.Bindings = v
}

func (o InviteUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emails"] = o.Emails
	if !IsNil(o.Bindings) {
		toSerialize["bindings"] = o.Bindings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InviteUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteUserRequest := _InviteUserRequest{}

	err = json.Unmarshal(data, &varInviteUserRequest)

	if err != nil {
		return err
	}

	*o = InviteUserRequest(varInviteUserRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "emails")
		delete(additionalProperties, "bindings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInviteUserRequest struct {
	value *InviteUserRequest
	isSet bool
}

func (v NullableInviteUserRequest) Get() *InviteUserRequest {
	return v.value
}

func (v *NullableInviteUserRequest) Set(val *InviteUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteUserRequest(val *InviteUserRequest) *NullableInviteUserRequest {
	return &NullableInviteUserRequest{value: val, isSet: true}
}

func (v NullableInviteUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


