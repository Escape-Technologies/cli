/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumHOST the model 'EnumHOST'
type EnumHOST string

// List of Enum_HOST
const (
	ENUMHOST_HOST EnumHOST = "HOST"
)

// All allowed values of EnumHOST enum
var AllowedEnumHOSTEnumValues = []EnumHOST{
	"HOST",
}

func (v *EnumHOST) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumHOST(value)
	for _, existing := range AllowedEnumHOSTEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumHOST", value)
}

// NewEnumHOSTFromValue returns a pointer to a valid EnumHOST
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumHOSTFromValue(v string) (*EnumHOST, error) {
	ev := EnumHOST(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumHOST: valid values are %v", v, AllowedEnumHOSTEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumHOST) IsValid() bool {
	for _, existing := range AllowedEnumHOSTEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_HOST value
func (v EnumHOST) Ptr() *EnumHOST {
	return &v
}

type NullableEnumHOST struct {
	value *EnumHOST
	isSet bool
}

func (v NullableEnumHOST) Get() *EnumHOST {
	return v.value
}

func (v *NullableEnumHOST) Set(val *EnumHOST) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumHOST) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumHOST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumHOST(val *EnumHOST) *NullableEnumHOST {
	return &NullableEnumHOST{value: val, isSet: true}
}

func (v NullableEnumHOST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumHOST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

