/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMCUSTOMRULEDELETEDSUCCESSFULLY the model 'ENUMCUSTOMRULEDELETEDSUCCESSFULLY'
type ENUMCUSTOMRULEDELETEDSUCCESSFULLY string

// List of ENUM_CUSTOM_RULE_DELETED_SUCCESSFULLY
const (
	ENUMCUSTOMRULEDELETEDSUCCESSFULLY_CUSTOM_RULE_DELETED_SUCCESSFULLY ENUMCUSTOMRULEDELETEDSUCCESSFULLY = "Custom rule deleted successfully"
)

// All allowed values of ENUMCUSTOMRULEDELETEDSUCCESSFULLY enum
var AllowedENUMCUSTOMRULEDELETEDSUCCESSFULLYEnumValues = []ENUMCUSTOMRULEDELETEDSUCCESSFULLY{
	"Custom rule deleted successfully",
}

func (v *ENUMCUSTOMRULEDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMCUSTOMRULEDELETEDSUCCESSFULLY(value)
	for _, existing := range AllowedENUMCUSTOMRULEDELETEDSUCCESSFULLYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMCUSTOMRULEDELETEDSUCCESSFULLY", value)
}

// NewENUMCUSTOMRULEDELETEDSUCCESSFULLYFromValue returns a pointer to a valid ENUMCUSTOMRULEDELETEDSUCCESSFULLY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMCUSTOMRULEDELETEDSUCCESSFULLYFromValue(v string) (*ENUMCUSTOMRULEDELETEDSUCCESSFULLY, error) {
	ev := ENUMCUSTOMRULEDELETEDSUCCESSFULLY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMCUSTOMRULEDELETEDSUCCESSFULLY: valid values are %v", v, AllowedENUMCUSTOMRULEDELETEDSUCCESSFULLYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMCUSTOMRULEDELETEDSUCCESSFULLY) IsValid() bool {
	for _, existing := range AllowedENUMCUSTOMRULEDELETEDSUCCESSFULLYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_CUSTOM_RULE_DELETED_SUCCESSFULLY value
func (v ENUMCUSTOMRULEDELETEDSUCCESSFULLY) Ptr() *ENUMCUSTOMRULEDELETEDSUCCESSFULLY {
	return &v
}

type NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY struct {
	value *ENUMCUSTOMRULEDELETEDSUCCESSFULLY
	isSet bool
}

func (v NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) Get() *ENUMCUSTOMRULEDELETEDSUCCESSFULLY {
	return v.value
}

func (v *NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) Set(val *ENUMCUSTOMRULEDELETEDSUCCESSFULLY) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMCUSTOMRULEDELETEDSUCCESSFULLY(val *ENUMCUSTOMRULEDELETEDSUCCESSFULLY) *NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY {
	return &NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY{value: val, isSet: true}
}

func (v NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMCUSTOMRULEDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

