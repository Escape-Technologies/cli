/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateASMDNSProfileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateASMDNSProfileRequest{}

// CreateASMDNSProfileRequest struct for CreateASMDNSProfileRequest
type CreateASMDNSProfileRequest struct {
	// The asset ID for the profile
	AssetId string `json:"assetId"`
	// The name of the profile
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _CreateASMDNSProfileRequest CreateASMDNSProfileRequest

// NewCreateASMDNSProfileRequest instantiates a new CreateASMDNSProfileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateASMDNSProfileRequest(assetId string, name string) *CreateASMDNSProfileRequest {
	this := CreateASMDNSProfileRequest{}
	this.AssetId = assetId
	this.Name = name
	return &this
}

// NewCreateASMDNSProfileRequestWithDefaults instantiates a new CreateASMDNSProfileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateASMDNSProfileRequestWithDefaults() *CreateASMDNSProfileRequest {
	this := CreateASMDNSProfileRequest{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *CreateASMDNSProfileRequest) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfileRequest) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *CreateASMDNSProfileRequest) SetAssetId(v string) {
	o.AssetId = v
}

// GetName returns the Name field value
func (o *CreateASMDNSProfileRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateASMDNSProfileRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateASMDNSProfileRequest) SetName(v string) {
	o.Name = v
}

func (o CreateASMDNSProfileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateASMDNSProfileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetId"] = o.AssetId
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateASMDNSProfileRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateASMDNSProfileRequest := _CreateASMDNSProfileRequest{}

	err = json.Unmarshal(data, &varCreateASMDNSProfileRequest)

	if err != nil {
		return err
	}

	*o = CreateASMDNSProfileRequest(varCreateASMDNSProfileRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assetId")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateASMDNSProfileRequest struct {
	value *CreateASMDNSProfileRequest
	isSet bool
}

func (v NullableCreateASMDNSProfileRequest) Get() *CreateASMDNSProfileRequest {
	return v.value
}

func (v *NullableCreateASMDNSProfileRequest) Set(val *CreateASMDNSProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateASMDNSProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateASMDNSProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateASMDNSProfileRequest(val *CreateASMDNSProfileRequest) *NullableCreateASMDNSProfileRequest {
	return &NullableCreateASMDNSProfileRequest{value: val, isSet: true}
}

func (v NullableCreateASMDNSProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateASMDNSProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


