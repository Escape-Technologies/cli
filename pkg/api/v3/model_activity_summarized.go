/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ActivitySummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivitySummarized{}

// ActivitySummarized Summarized information about an activity
type ActivitySummarized struct {
	Author *AuthorSummarized `json:"author,omitempty"`
	// The id of the activity
	Id string `json:"id"`
	// The date and time the activity was created
	CreatedAt string `json:"createdAt"`
	Kind string `json:"kind"`
	AdditionalProperties map[string]interface{}
}

type _ActivitySummarized ActivitySummarized

// NewActivitySummarized instantiates a new ActivitySummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivitySummarized(id string, createdAt string, kind string) *ActivitySummarized {
	this := ActivitySummarized{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Kind = kind
	return &this
}

// NewActivitySummarizedWithDefaults instantiates a new ActivitySummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivitySummarizedWithDefaults() *ActivitySummarized {
	this := ActivitySummarized{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ActivitySummarized) GetAuthor() AuthorSummarized {
	if o == nil || IsNil(o.Author) {
		var ret AuthorSummarized
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitySummarized) GetAuthorOk() (*AuthorSummarized, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ActivitySummarized) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given AuthorSummarized and assigns it to the Author field.
func (o *ActivitySummarized) SetAuthor(v AuthorSummarized) {
	o.Author = &v
}

// GetId returns the Id field value
func (o *ActivitySummarized) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActivitySummarized) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActivitySummarized) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ActivitySummarized) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ActivitySummarized) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ActivitySummarized) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetKind returns the Kind field value
func (o *ActivitySummarized) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ActivitySummarized) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ActivitySummarized) SetKind(v string) {
	o.Kind = v
}

func (o ActivitySummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivitySummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["kind"] = o.Kind

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ActivitySummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivitySummarized := _ActivitySummarized{}

	err = json.Unmarshal(data, &varActivitySummarized)

	if err != nil {
		return err
	}

	*o = ActivitySummarized(varActivitySummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "author")
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "kind")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableActivitySummarized struct {
	value *ActivitySummarized
	isSet bool
}

func (v NullableActivitySummarized) Get() *ActivitySummarized {
	return v.value
}

func (v *NullableActivitySummarized) Set(val *ActivitySummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableActivitySummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableActivitySummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivitySummarized(val *ActivitySummarized) *NullableActivitySummarized {
	return &NullableActivitySummarized{value: val, isSet: true}
}

func (v NullableActivitySummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivitySummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


