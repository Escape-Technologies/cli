/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum3b03ec8408c363f23b7d74d99b6ba8f4 the model 'Enum3b03ec8408c363f23b7d74d99b6ba8f4'
type Enum3b03ec8408c363f23b7d74d99b6ba8f4 string

// List of Enum_3b03ec8408c363f23b7d74d99b6ba8f4
const (
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_40 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-40"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_41 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-41"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_44 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-44"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_52 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-52"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_53 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-53"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_63_B Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-63B"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_81_2 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-81-2"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_92 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-92"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_95 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-95"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_123 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-123"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_161 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-161"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_190 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-190"
	ENUM3B03EC8408C363F23B7D74D99B6BA8F4_SP800_207 Enum3b03ec8408c363f23b7d74d99b6ba8f4 = "SP800-207"
)

// All allowed values of Enum3b03ec8408c363f23b7d74d99b6ba8f4 enum
var AllowedEnum3b03ec8408c363f23b7d74d99b6ba8f4EnumValues = []Enum3b03ec8408c363f23b7d74d99b6ba8f4{
	"SP800-40",
	"SP800-41",
	"SP800-44",
	"SP800-52",
	"SP800-53",
	"SP800-63B",
	"SP800-81-2",
	"SP800-92",
	"SP800-95",
	"SP800-123",
	"SP800-161",
	"SP800-190",
	"SP800-207",
}

func (v *Enum3b03ec8408c363f23b7d74d99b6ba8f4) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum3b03ec8408c363f23b7d74d99b6ba8f4(value)
	for _, existing := range AllowedEnum3b03ec8408c363f23b7d74d99b6ba8f4EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum3b03ec8408c363f23b7d74d99b6ba8f4", value)
}

// NewEnum3b03ec8408c363f23b7d74d99b6ba8f4FromValue returns a pointer to a valid Enum3b03ec8408c363f23b7d74d99b6ba8f4
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum3b03ec8408c363f23b7d74d99b6ba8f4FromValue(v string) (*Enum3b03ec8408c363f23b7d74d99b6ba8f4, error) {
	ev := Enum3b03ec8408c363f23b7d74d99b6ba8f4(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum3b03ec8408c363f23b7d74d99b6ba8f4: valid values are %v", v, AllowedEnum3b03ec8408c363f23b7d74d99b6ba8f4EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum3b03ec8408c363f23b7d74d99b6ba8f4) IsValid() bool {
	for _, existing := range AllowedEnum3b03ec8408c363f23b7d74d99b6ba8f4EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_3b03ec8408c363f23b7d74d99b6ba8f4 value
func (v Enum3b03ec8408c363f23b7d74d99b6ba8f4) Ptr() *Enum3b03ec8408c363f23b7d74d99b6ba8f4 {
	return &v
}

type NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4 struct {
	value *Enum3b03ec8408c363f23b7d74d99b6ba8f4
	isSet bool
}

func (v NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) Get() *Enum3b03ec8408c363f23b7d74d99b6ba8f4 {
	return v.value
}

func (v *NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) Set(val *Enum3b03ec8408c363f23b7d74d99b6ba8f4) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum3b03ec8408c363f23b7d74d99b6ba8f4(val *Enum3b03ec8408c363f23b7d74d99b6ba8f4) *NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4 {
	return &NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4{value: val, isSet: true}
}

func (v NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum3b03ec8408c363f23b7d74d99b6ba8f4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

