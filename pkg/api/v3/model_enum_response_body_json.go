/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumRESPONSEBODYJSON the model 'EnumRESPONSEBODYJSON'
type EnumRESPONSEBODYJSON string

// List of Enum_RESPONSE_BODY_JSON
const (
	ENUMRESPONSEBODYJSON_RESPONSE_BODY_JSON EnumRESPONSEBODYJSON = "response.body.json"
)

// All allowed values of EnumRESPONSEBODYJSON enum
var AllowedEnumRESPONSEBODYJSONEnumValues = []EnumRESPONSEBODYJSON{
	"response.body.json",
}

func (v *EnumRESPONSEBODYJSON) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRESPONSEBODYJSON(value)
	for _, existing := range AllowedEnumRESPONSEBODYJSONEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumRESPONSEBODYJSON", value)
}

// NewEnumRESPONSEBODYJSONFromValue returns a pointer to a valid EnumRESPONSEBODYJSON
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRESPONSEBODYJSONFromValue(v string) (*EnumRESPONSEBODYJSON, error) {
	ev := EnumRESPONSEBODYJSON(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRESPONSEBODYJSON: valid values are %v", v, AllowedEnumRESPONSEBODYJSONEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRESPONSEBODYJSON) IsValid() bool {
	for _, existing := range AllowedEnumRESPONSEBODYJSONEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_RESPONSE_BODY_JSON value
func (v EnumRESPONSEBODYJSON) Ptr() *EnumRESPONSEBODYJSON {
	return &v
}

type NullableEnumRESPONSEBODYJSON struct {
	value *EnumRESPONSEBODYJSON
	isSet bool
}

func (v NullableEnumRESPONSEBODYJSON) Get() *EnumRESPONSEBODYJSON {
	return v.value
}

func (v *NullableEnumRESPONSEBODYJSON) Set(val *EnumRESPONSEBODYJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRESPONSEBODYJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRESPONSEBODYJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRESPONSEBODYJSON(val *EnumRESPONSEBODYJSON) *NullableEnumRESPONSEBODYJSON {
	return &NullableEnumRESPONSEBODYJSON{value: val, isSet: true}
}

func (v NullableEnumRESPONSEBODYJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRESPONSEBODYJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

