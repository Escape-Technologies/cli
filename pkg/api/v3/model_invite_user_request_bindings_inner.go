/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the InviteUserRequestBindingsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteUserRequestBindingsInner{}

// InviteUserRequestBindingsInner struct for InviteUserRequestBindingsInner
type InviteUserRequestBindingsInner struct {
	// The role ID
	RoleId string `json:"roleId"`
	// An optional project ID
	ProjectId *string `json:"projectId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InviteUserRequestBindingsInner InviteUserRequestBindingsInner

// NewInviteUserRequestBindingsInner instantiates a new InviteUserRequestBindingsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteUserRequestBindingsInner(roleId string) *InviteUserRequestBindingsInner {
	this := InviteUserRequestBindingsInner{}
	this.RoleId = roleId
	return &this
}

// NewInviteUserRequestBindingsInnerWithDefaults instantiates a new InviteUserRequestBindingsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteUserRequestBindingsInnerWithDefaults() *InviteUserRequestBindingsInner {
	this := InviteUserRequestBindingsInner{}
	return &this
}

// GetRoleId returns the RoleId field value
func (o *InviteUserRequestBindingsInner) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *InviteUserRequestBindingsInner) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *InviteUserRequestBindingsInner) SetRoleId(v string) {
	o.RoleId = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *InviteUserRequestBindingsInner) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteUserRequestBindingsInner) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *InviteUserRequestBindingsInner) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *InviteUserRequestBindingsInner) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o InviteUserRequestBindingsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteUserRequestBindingsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleId"] = o.RoleId
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InviteUserRequestBindingsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteUserRequestBindingsInner := _InviteUserRequestBindingsInner{}

	err = json.Unmarshal(data, &varInviteUserRequestBindingsInner)

	if err != nil {
		return err
	}

	*o = InviteUserRequestBindingsInner(varInviteUserRequestBindingsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "roleId")
		delete(additionalProperties, "projectId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInviteUserRequestBindingsInner struct {
	value *InviteUserRequestBindingsInner
	isSet bool
}

func (v NullableInviteUserRequestBindingsInner) Get() *InviteUserRequestBindingsInner {
	return v.value
}

func (v *NullableInviteUserRequestBindingsInner) Set(val *InviteUserRequestBindingsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteUserRequestBindingsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteUserRequestBindingsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteUserRequestBindingsInner(val *InviteUserRequestBindingsInner) *NullableInviteUserRequestBindingsInner {
	return &NullableInviteUserRequestBindingsInner{value: val, isSet: true}
}

func (v NullableInviteUserRequestBindingsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteUserRequestBindingsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


