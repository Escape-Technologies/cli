/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumF5dfa531fb3e4e3c30dbe59e58d11d44 the model 'EnumF5dfa531fb3e4e3c30dbe59e58d11d44'
type EnumF5dfa531fb3e4e3c30dbe59e58d11d44 string

// List of Enum_f5dfa531fb3e4e3c30dbe59e58d11d44
const (
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_ALL EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "ALL"
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_NONE EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "NONE"
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_API_CHECKS EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "API_CHECKS"
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_ACTIVE_PAGE_CHECKS EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "ACTIVE_PAGE_CHECKS"
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_PASSIVE_PAGE_CHECKS EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "PASSIVE_PAGE_CHECKS"
	ENUMF5DFA531FB3E4E3C30DBE59E58D11D44_NETWORK_CHECKS EnumF5dfa531fb3e4e3c30dbe59e58d11d44 = "NETWORK_CHECKS"
)

// All allowed values of EnumF5dfa531fb3e4e3c30dbe59e58d11d44 enum
var AllowedEnumF5dfa531fb3e4e3c30dbe59e58d11d44EnumValues = []EnumF5dfa531fb3e4e3c30dbe59e58d11d44{
	"ALL",
	"NONE",
	"API_CHECKS",
	"ACTIVE_PAGE_CHECKS",
	"PASSIVE_PAGE_CHECKS",
	"NETWORK_CHECKS",
}

func (v *EnumF5dfa531fb3e4e3c30dbe59e58d11d44) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumF5dfa531fb3e4e3c30dbe59e58d11d44(value)
	for _, existing := range AllowedEnumF5dfa531fb3e4e3c30dbe59e58d11d44EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumF5dfa531fb3e4e3c30dbe59e58d11d44", value)
}

// NewEnumF5dfa531fb3e4e3c30dbe59e58d11d44FromValue returns a pointer to a valid EnumF5dfa531fb3e4e3c30dbe59e58d11d44
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumF5dfa531fb3e4e3c30dbe59e58d11d44FromValue(v string) (*EnumF5dfa531fb3e4e3c30dbe59e58d11d44, error) {
	ev := EnumF5dfa531fb3e4e3c30dbe59e58d11d44(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumF5dfa531fb3e4e3c30dbe59e58d11d44: valid values are %v", v, AllowedEnumF5dfa531fb3e4e3c30dbe59e58d11d44EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumF5dfa531fb3e4e3c30dbe59e58d11d44) IsValid() bool {
	for _, existing := range AllowedEnumF5dfa531fb3e4e3c30dbe59e58d11d44EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_f5dfa531fb3e4e3c30dbe59e58d11d44 value
func (v EnumF5dfa531fb3e4e3c30dbe59e58d11d44) Ptr() *EnumF5dfa531fb3e4e3c30dbe59e58d11d44 {
	return &v
}

type NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44 struct {
	value *EnumF5dfa531fb3e4e3c30dbe59e58d11d44
	isSet bool
}

func (v NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) Get() *EnumF5dfa531fb3e4e3c30dbe59e58d11d44 {
	return v.value
}

func (v *NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) Set(val *EnumF5dfa531fb3e4e3c30dbe59e58d11d44) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44(val *EnumF5dfa531fb3e4e3c30dbe59e58d11d44) *NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44 {
	return &NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44{value: val, isSet: true}
}

func (v NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumF5dfa531fb3e4e3c30dbe59e58d11d44) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

