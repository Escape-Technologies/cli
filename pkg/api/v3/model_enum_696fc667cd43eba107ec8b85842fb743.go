/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum696fc667cd43eba107ec8b85842fb743 the model 'Enum696fc667cd43eba107ec8b85842fb743'
type Enum696fc667cd43eba107ec8b85842fb743 string

// List of Enum_696fc667cd43eba107ec8b85842fb743
const (
	ENUM696FC667CD43EBA107EC8B85842FB743_GET Enum696fc667cd43eba107ec8b85842fb743 = "GET"
	ENUM696FC667CD43EBA107EC8B85842FB743_POST Enum696fc667cd43eba107ec8b85842fb743 = "POST"
	ENUM696FC667CD43EBA107EC8B85842FB743_PUT Enum696fc667cd43eba107ec8b85842fb743 = "PUT"
	ENUM696FC667CD43EBA107EC8B85842FB743_DELETE Enum696fc667cd43eba107ec8b85842fb743 = "DELETE"
	ENUM696FC667CD43EBA107EC8B85842FB743_PATCH Enum696fc667cd43eba107ec8b85842fb743 = "PATCH"
	ENUM696FC667CD43EBA107EC8B85842FB743_OPTIONS Enum696fc667cd43eba107ec8b85842fb743 = "OPTIONS"
	ENUM696FC667CD43EBA107EC8B85842FB743_HEAD Enum696fc667cd43eba107ec8b85842fb743 = "HEAD"
)

// All allowed values of Enum696fc667cd43eba107ec8b85842fb743 enum
var AllowedEnum696fc667cd43eba107ec8b85842fb743EnumValues = []Enum696fc667cd43eba107ec8b85842fb743{
	"GET",
	"POST",
	"PUT",
	"DELETE",
	"PATCH",
	"OPTIONS",
	"HEAD",
}

func (v *Enum696fc667cd43eba107ec8b85842fb743) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum696fc667cd43eba107ec8b85842fb743(value)
	for _, existing := range AllowedEnum696fc667cd43eba107ec8b85842fb743EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum696fc667cd43eba107ec8b85842fb743", value)
}

// NewEnum696fc667cd43eba107ec8b85842fb743FromValue returns a pointer to a valid Enum696fc667cd43eba107ec8b85842fb743
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum696fc667cd43eba107ec8b85842fb743FromValue(v string) (*Enum696fc667cd43eba107ec8b85842fb743, error) {
	ev := Enum696fc667cd43eba107ec8b85842fb743(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum696fc667cd43eba107ec8b85842fb743: valid values are %v", v, AllowedEnum696fc667cd43eba107ec8b85842fb743EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum696fc667cd43eba107ec8b85842fb743) IsValid() bool {
	for _, existing := range AllowedEnum696fc667cd43eba107ec8b85842fb743EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_696fc667cd43eba107ec8b85842fb743 value
func (v Enum696fc667cd43eba107ec8b85842fb743) Ptr() *Enum696fc667cd43eba107ec8b85842fb743 {
	return &v
}

type NullableEnum696fc667cd43eba107ec8b85842fb743 struct {
	value *Enum696fc667cd43eba107ec8b85842fb743
	isSet bool
}

func (v NullableEnum696fc667cd43eba107ec8b85842fb743) Get() *Enum696fc667cd43eba107ec8b85842fb743 {
	return v.value
}

func (v *NullableEnum696fc667cd43eba107ec8b85842fb743) Set(val *Enum696fc667cd43eba107ec8b85842fb743) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum696fc667cd43eba107ec8b85842fb743) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum696fc667cd43eba107ec8b85842fb743) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum696fc667cd43eba107ec8b85842fb743(val *Enum696fc667cd43eba107ec8b85842fb743) *NullableEnum696fc667cd43eba107ec8b85842fb743 {
	return &NullableEnum696fc667cd43eba107ec8b85842fb743{value: val, isSet: true}
}

func (v NullableEnum696fc667cd43eba107ec8b85842fb743) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum696fc667cd43eba107ec8b85842fb743) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

