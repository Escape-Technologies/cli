/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the UpdateCustomRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCustomRuleRequest{}

// UpdateCustomRuleRequest struct for UpdateCustomRuleRequest
type UpdateCustomRuleRequest struct {
	// The content of the custom rule
	Content map[string]interface{} `json:"content,omitempty"`
	// Whether the custom rule is enabled for DAST
	DastEnabled *string `json:"dastEnabled,omitempty"`
	// Whether the custom rule is enabled for ASM
	AsmEnabled *string `json:"asmEnabled,omitempty"`
	// The tags of the custom rule
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateCustomRuleRequest UpdateCustomRuleRequest

// NewUpdateCustomRuleRequest instantiates a new UpdateCustomRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCustomRuleRequest() *UpdateCustomRuleRequest {
	this := UpdateCustomRuleRequest{}
	return &this
}

// NewUpdateCustomRuleRequestWithDefaults instantiates a new UpdateCustomRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCustomRuleRequestWithDefaults() *UpdateCustomRuleRequest {
	this := UpdateCustomRuleRequest{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UpdateCustomRuleRequest) GetContent() map[string]interface{} {
	if o == nil || IsNil(o.Content) {
		var ret map[string]interface{}
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomRuleRequest) GetContentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Content) {
		return map[string]interface{}{}, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *UpdateCustomRuleRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given map[string]interface{} and assigns it to the Content field.
func (o *UpdateCustomRuleRequest) SetContent(v map[string]interface{}) {
	o.Content = v
}

// GetDastEnabled returns the DastEnabled field value if set, zero value otherwise.
func (o *UpdateCustomRuleRequest) GetDastEnabled() string {
	if o == nil || IsNil(o.DastEnabled) {
		var ret string
		return ret
	}
	return *o.DastEnabled
}

// GetDastEnabledOk returns a tuple with the DastEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomRuleRequest) GetDastEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.DastEnabled) {
		return nil, false
	}
	return o.DastEnabled, true
}

// HasDastEnabled returns a boolean if a field has been set.
func (o *UpdateCustomRuleRequest) HasDastEnabled() bool {
	if o != nil && !IsNil(o.DastEnabled) {
		return true
	}

	return false
}

// SetDastEnabled gets a reference to the given string and assigns it to the DastEnabled field.
func (o *UpdateCustomRuleRequest) SetDastEnabled(v string) {
	o.DastEnabled = &v
}

// GetAsmEnabled returns the AsmEnabled field value if set, zero value otherwise.
func (o *UpdateCustomRuleRequest) GetAsmEnabled() string {
	if o == nil || IsNil(o.AsmEnabled) {
		var ret string
		return ret
	}
	return *o.AsmEnabled
}

// GetAsmEnabledOk returns a tuple with the AsmEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomRuleRequest) GetAsmEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.AsmEnabled) {
		return nil, false
	}
	return o.AsmEnabled, true
}

// HasAsmEnabled returns a boolean if a field has been set.
func (o *UpdateCustomRuleRequest) HasAsmEnabled() bool {
	if o != nil && !IsNil(o.AsmEnabled) {
		return true
	}

	return false
}

// SetAsmEnabled gets a reference to the given string and assigns it to the AsmEnabled field.
func (o *UpdateCustomRuleRequest) SetAsmEnabled(v string) {
	o.AsmEnabled = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateCustomRuleRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCustomRuleRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateCustomRuleRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateCustomRuleRequest) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateCustomRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCustomRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.DastEnabled) {
		toSerialize["dastEnabled"] = o.DastEnabled
	}
	if !IsNil(o.AsmEnabled) {
		toSerialize["asmEnabled"] = o.AsmEnabled
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateCustomRuleRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateCustomRuleRequest := _UpdateCustomRuleRequest{}

	err = json.Unmarshal(data, &varUpdateCustomRuleRequest)

	if err != nil {
		return err
	}

	*o = UpdateCustomRuleRequest(varUpdateCustomRuleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "dastEnabled")
		delete(additionalProperties, "asmEnabled")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateCustomRuleRequest struct {
	value *UpdateCustomRuleRequest
	isSet bool
}

func (v NullableUpdateCustomRuleRequest) Get() *UpdateCustomRuleRequest {
	return v.value
}

func (v *NullableUpdateCustomRuleRequest) Set(val *UpdateCustomRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCustomRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCustomRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCustomRuleRequest(val *UpdateCustomRuleRequest) *NullableUpdateCustomRuleRequest {
	return &NullableUpdateCustomRuleRequest{value: val, isSet: true}
}

func (v NullableUpdateCustomRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCustomRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


