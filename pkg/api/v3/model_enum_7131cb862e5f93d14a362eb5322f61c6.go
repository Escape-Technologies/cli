/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum7131cb862e5f93d14a362eb5322f61c6 the model 'Enum7131cb862e5f93d14a362eb5322f61c6'
type Enum7131cb862e5f93d14a362eb5322f61c6 string

// List of Enum_7131cb862e5f93d14a362eb5322f61c6
const (
	ENUM7131CB862E5F93D14A362EB5322F61C6_AUTH0 Enum7131cb862e5f93d14a362eb5322f61c6 = "AUTH0"
	ENUM7131CB862E5F93D14A362EB5322F61C6_AWS_IAM Enum7131cb862e5f93d14a362eb5322f61c6 = "AWS_IAM"
	ENUM7131CB862E5F93D14A362EB5322F61C6_AZURE_ACTIVE_DIRECTORY Enum7131cb862e5f93d14a362eb5322f61c6 = "AZURE_ACTIVE_DIRECTORY"
	ENUM7131CB862E5F93D14A362EB5322F61C6_COGNITO Enum7131cb862e5f93d14a362eb5322f61c6 = "COGNITO"
	ENUM7131CB862E5F93D14A362EB5322F61C6_KEYCLOAK Enum7131cb862e5f93d14a362eb5322f61c6 = "KEYCLOAK"
	ENUM7131CB862E5F93D14A362EB5322F61C6_UNKNOWN Enum7131cb862e5f93d14a362eb5322f61c6 = "UNKNOWN"
)

// All allowed values of Enum7131cb862e5f93d14a362eb5322f61c6 enum
var AllowedEnum7131cb862e5f93d14a362eb5322f61c6EnumValues = []Enum7131cb862e5f93d14a362eb5322f61c6{
	"AUTH0",
	"AWS_IAM",
	"AZURE_ACTIVE_DIRECTORY",
	"COGNITO",
	"KEYCLOAK",
	"UNKNOWN",
}

func (v *Enum7131cb862e5f93d14a362eb5322f61c6) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum7131cb862e5f93d14a362eb5322f61c6(value)
	for _, existing := range AllowedEnum7131cb862e5f93d14a362eb5322f61c6EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum7131cb862e5f93d14a362eb5322f61c6", value)
}

// NewEnum7131cb862e5f93d14a362eb5322f61c6FromValue returns a pointer to a valid Enum7131cb862e5f93d14a362eb5322f61c6
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum7131cb862e5f93d14a362eb5322f61c6FromValue(v string) (*Enum7131cb862e5f93d14a362eb5322f61c6, error) {
	ev := Enum7131cb862e5f93d14a362eb5322f61c6(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum7131cb862e5f93d14a362eb5322f61c6: valid values are %v", v, AllowedEnum7131cb862e5f93d14a362eb5322f61c6EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum7131cb862e5f93d14a362eb5322f61c6) IsValid() bool {
	for _, existing := range AllowedEnum7131cb862e5f93d14a362eb5322f61c6EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_7131cb862e5f93d14a362eb5322f61c6 value
func (v Enum7131cb862e5f93d14a362eb5322f61c6) Ptr() *Enum7131cb862e5f93d14a362eb5322f61c6 {
	return &v
}

type NullableEnum7131cb862e5f93d14a362eb5322f61c6 struct {
	value *Enum7131cb862e5f93d14a362eb5322f61c6
	isSet bool
}

func (v NullableEnum7131cb862e5f93d14a362eb5322f61c6) Get() *Enum7131cb862e5f93d14a362eb5322f61c6 {
	return v.value
}

func (v *NullableEnum7131cb862e5f93d14a362eb5322f61c6) Set(val *Enum7131cb862e5f93d14a362eb5322f61c6) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum7131cb862e5f93d14a362eb5322f61c6) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum7131cb862e5f93d14a362eb5322f61c6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum7131cb862e5f93d14a362eb5322f61c6(val *Enum7131cb862e5f93d14a362eb5322f61c6) *NullableEnum7131cb862e5f93d14a362eb5322f61c6 {
	return &NullableEnum7131cb862e5f93d14a362eb5322f61c6{value: val, isSet: true}
}

func (v NullableEnum7131cb862e5f93d14a362eb5322f61c6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum7131cb862e5f93d14a362eb5322f61c6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

