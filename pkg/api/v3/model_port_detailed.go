/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the PortDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortDetailed{}

// PortDetailed Detailed information about a port
type PortDetailed struct {
	// The id of the port
	Id string `json:"id"`
	// The port of the port
	Port float32 `json:"port"`
	// The protocol of the port
	Protocol string `json:"protocol"`
	AdditionalProperties map[string]interface{}
}

type _PortDetailed PortDetailed

// NewPortDetailed instantiates a new PortDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortDetailed(id string, port float32, protocol string) *PortDetailed {
	this := PortDetailed{}
	this.Id = id
	this.Port = port
	this.Protocol = protocol
	return &this
}

// NewPortDetailedWithDefaults instantiates a new PortDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortDetailedWithDefaults() *PortDetailed {
	this := PortDetailed{}
	return &this
}

// GetId returns the Id field value
func (o *PortDetailed) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PortDetailed) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PortDetailed) SetId(v string) {
	o.Id = v
}

// GetPort returns the Port field value
func (o *PortDetailed) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *PortDetailed) GetPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *PortDetailed) SetPort(v float32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value
func (o *PortDetailed) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *PortDetailed) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *PortDetailed) SetProtocol(v string) {
	o.Protocol = v
}

func (o PortDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["port"] = o.Port
	toSerialize["protocol"] = o.Protocol

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PortDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"port",
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortDetailed := _PortDetailed{}

	err = json.Unmarshal(data, &varPortDetailed)

	if err != nil {
		return err
	}

	*o = PortDetailed(varPortDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "port")
		delete(additionalProperties, "protocol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePortDetailed struct {
	value *PortDetailed
	isSet bool
}

func (v NullablePortDetailed) Get() *PortDetailed {
	return v.value
}

func (v *NullablePortDetailed) Set(val *PortDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullablePortDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullablePortDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortDetailed(val *PortDetailed) *NullablePortDetailed {
	return &NullablePortDetailed{value: val, isSet: true}
}

func (v NullablePortDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


