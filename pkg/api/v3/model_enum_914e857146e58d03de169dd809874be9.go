/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum914e857146e58d03de169dd809874be9 The mode of the profile
type Enum914e857146e58d03de169dd809874be9 string

// List of Enum_914e857146e58d03de169dd809874be9
const (
	ENUM914E857146E58D03DE169DD809874BE9_READ_ONLY Enum914e857146e58d03de169dd809874be9 = "readOnly"
	ENUM914E857146E58D03DE169DD809874BE9_READ_WRITE Enum914e857146e58d03de169dd809874be9 = "readWrite"
)

// All allowed values of Enum914e857146e58d03de169dd809874be9 enum
var AllowedEnum914e857146e58d03de169dd809874be9EnumValues = []Enum914e857146e58d03de169dd809874be9{
	"readOnly",
	"readWrite",
}

func (v *Enum914e857146e58d03de169dd809874be9) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum914e857146e58d03de169dd809874be9(value)
	for _, existing := range AllowedEnum914e857146e58d03de169dd809874be9EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum914e857146e58d03de169dd809874be9", value)
}

// NewEnum914e857146e58d03de169dd809874be9FromValue returns a pointer to a valid Enum914e857146e58d03de169dd809874be9
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum914e857146e58d03de169dd809874be9FromValue(v string) (*Enum914e857146e58d03de169dd809874be9, error) {
	ev := Enum914e857146e58d03de169dd809874be9(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum914e857146e58d03de169dd809874be9: valid values are %v", v, AllowedEnum914e857146e58d03de169dd809874be9EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum914e857146e58d03de169dd809874be9) IsValid() bool {
	for _, existing := range AllowedEnum914e857146e58d03de169dd809874be9EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_914e857146e58d03de169dd809874be9 value
func (v Enum914e857146e58d03de169dd809874be9) Ptr() *Enum914e857146e58d03de169dd809874be9 {
	return &v
}

type NullableEnum914e857146e58d03de169dd809874be9 struct {
	value *Enum914e857146e58d03de169dd809874be9
	isSet bool
}

func (v NullableEnum914e857146e58d03de169dd809874be9) Get() *Enum914e857146e58d03de169dd809874be9 {
	return v.value
}

func (v *NullableEnum914e857146e58d03de169dd809874be9) Set(val *Enum914e857146e58d03de169dd809874be9) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum914e857146e58d03de169dd809874be9) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum914e857146e58d03de169dd809874be9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum914e857146e58d03de169dd809874be9(val *Enum914e857146e58d03de169dd809874be9) *NullableEnum914e857146e58d03de169dd809874be9 {
	return &NullableEnum914e857146e58d03de169dd809874be9{value: val, isSet: true}
}

func (v NullableEnum914e857146e58d03de169dd809874be9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum914e857146e58d03de169dd809874be9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

