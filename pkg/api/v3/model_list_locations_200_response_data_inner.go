/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ListLocations200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListLocations200ResponseDataInner{}

// ListLocations200ResponseDataInner struct for ListLocations200ResponseDataInner
type ListLocations200ResponseDataInner struct {
	// The location ID.
	Id *string `json:"id,omitempty"`
	// The name of the location.
	Name *string `json:"name,omitempty"`
	// The type of the location.
	Type *string `json:"type,omitempty"`
	// Whether the location is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	Links ListLocations200ResponseDataInnerLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _ListLocations200ResponseDataInner ListLocations200ResponseDataInner

// NewListLocations200ResponseDataInner instantiates a new ListLocations200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListLocations200ResponseDataInner(links ListLocations200ResponseDataInnerLinks) *ListLocations200ResponseDataInner {
	this := ListLocations200ResponseDataInner{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Location Name"
	this.Name = &name
	var type_ string = "Location Type"
	this.Type = &type_
	var enabled bool = true
	this.Enabled = &enabled
	this.Links = links
	return &this
}

// NewListLocations200ResponseDataInnerWithDefaults instantiates a new ListLocations200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListLocations200ResponseDataInnerWithDefaults() *ListLocations200ResponseDataInner {
	this := ListLocations200ResponseDataInner{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Location Name"
	this.Name = &name
	var type_ string = "Location Type"
	this.Type = &type_
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListLocations200ResponseDataInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListLocations200ResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListLocations200ResponseDataInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListLocations200ResponseDataInner) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListLocations200ResponseDataInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListLocations200ResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListLocations200ResponseDataInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListLocations200ResponseDataInner) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ListLocations200ResponseDataInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListLocations200ResponseDataInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ListLocations200ResponseDataInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ListLocations200ResponseDataInner) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ListLocations200ResponseDataInner) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListLocations200ResponseDataInner) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ListLocations200ResponseDataInner) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ListLocations200ResponseDataInner) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLinks returns the Links field value
func (o *ListLocations200ResponseDataInner) GetLinks() ListLocations200ResponseDataInnerLinks {
	if o == nil {
		var ret ListLocations200ResponseDataInnerLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ListLocations200ResponseDataInner) GetLinksOk() (*ListLocations200ResponseDataInnerLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ListLocations200ResponseDataInner) SetLinks(v ListLocations200ResponseDataInnerLinks) {
	o.Links = v
}

func (o ListLocations200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListLocations200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListLocations200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListLocations200ResponseDataInner := _ListLocations200ResponseDataInner{}

	err = json.Unmarshal(data, &varListLocations200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = ListLocations200ResponseDataInner(varListLocations200ResponseDataInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListLocations200ResponseDataInner struct {
	value *ListLocations200ResponseDataInner
	isSet bool
}

func (v NullableListLocations200ResponseDataInner) Get() *ListLocations200ResponseDataInner {
	return v.value
}

func (v *NullableListLocations200ResponseDataInner) Set(val *ListLocations200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListLocations200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListLocations200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLocations200ResponseDataInner(val *ListLocations200ResponseDataInner) *NullableListLocations200ResponseDataInner {
	return &NullableListLocations200ResponseDataInner{value: val, isSet: true}
}

func (v NullableListLocations200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListLocations200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


