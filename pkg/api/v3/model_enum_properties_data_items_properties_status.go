/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS The current status of the issue
type ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS string

// List of ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_STATUS
const (
	ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS_FALSE_POSITIVE ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS = "FALSE_POSITIVE"
	ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS_IGNORED ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS = "IGNORED"
	ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS_MANUAL_REVIEW ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS = "MANUAL_REVIEW"
	ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS_OPEN ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS = "OPEN"
	ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS_RESOLVED ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS = "RESOLVED"
)

// All allowed values of ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS enum
var AllowedENUMPROPERTIESDATAITEMSPROPERTIESSTATUSEnumValues = []ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS{
	"FALSE_POSITIVE",
	"IGNORED",
	"MANUAL_REVIEW",
	"OPEN",
	"RESOLVED",
}

func (v *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS(value)
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESSTATUSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS", value)
}

// NewENUMPROPERTIESDATAITEMSPROPERTIESSTATUSFromValue returns a pointer to a valid ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESDATAITEMSPROPERTIESSTATUSFromValue(v string) (*ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS, error) {
	ev := ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS: valid values are %v", v, AllowedENUMPROPERTIESDATAITEMSPROPERTIESSTATUSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESSTATUSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_STATUS value
func (v ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) Ptr() *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS {
	return &v
}

type NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS struct {
	value *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS
	isSet bool
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) Get() *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS {
	return v.value
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) Set(val *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS(val *ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) *NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS {
	return &NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

