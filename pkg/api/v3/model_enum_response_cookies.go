/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMRESPONSECOOKIES the model 'ENUMRESPONSECOOKIES'
type ENUMRESPONSECOOKIES string

// List of ENUM_RESPONSE_COOKIES
const (
	ENUMRESPONSECOOKIES_RESPONSE_COOKIES ENUMRESPONSECOOKIES = "response.cookies"
)

// All allowed values of ENUMRESPONSECOOKIES enum
var AllowedENUMRESPONSECOOKIESEnumValues = []ENUMRESPONSECOOKIES{
	"response.cookies",
}

func (v *ENUMRESPONSECOOKIES) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMRESPONSECOOKIES(value)
	for _, existing := range AllowedENUMRESPONSECOOKIESEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMRESPONSECOOKIES", value)
}

// NewENUMRESPONSECOOKIESFromValue returns a pointer to a valid ENUMRESPONSECOOKIES
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMRESPONSECOOKIESFromValue(v string) (*ENUMRESPONSECOOKIES, error) {
	ev := ENUMRESPONSECOOKIES(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMRESPONSECOOKIES: valid values are %v", v, AllowedENUMRESPONSECOOKIESEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMRESPONSECOOKIES) IsValid() bool {
	for _, existing := range AllowedENUMRESPONSECOOKIESEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_RESPONSE_COOKIES value
func (v ENUMRESPONSECOOKIES) Ptr() *ENUMRESPONSECOOKIES {
	return &v
}

type NullableENUMRESPONSECOOKIES struct {
	value *ENUMRESPONSECOOKIES
	isSet bool
}

func (v NullableENUMRESPONSECOOKIES) Get() *ENUMRESPONSECOOKIES {
	return v.value
}

func (v *NullableENUMRESPONSECOOKIES) Set(val *ENUMRESPONSECOOKIES) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMRESPONSECOOKIES) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMRESPONSECOOKIES) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMRESPONSECOOKIES(val *ENUMRESPONSECOOKIES) *NullableENUMRESPONSECOOKIES {
	return &NullableENUMRESPONSECOOKIES{value: val, isSet: true}
}

func (v NullableENUMRESPONSECOOKIES) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMRESPONSECOOKIES) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

