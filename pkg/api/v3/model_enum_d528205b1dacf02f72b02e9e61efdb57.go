/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumD528205b1dacf02f72b02e9e61efdb57 the model 'EnumD528205b1dacf02f72b02e9e61efdb57'
type EnumD528205b1dacf02f72b02e9e61efdb57 string

// List of Enum_d528205b1dacf02f72b02e9e61efdb57
const (
	ENUMD528205B1DACF02F72B02E9E61EFDB57_API_TYPE_GRAPHQL EnumD528205b1dacf02f72b02e9e61efdb57 = "API_TYPE_GRAPHQL"
	ENUMD528205B1DACF02F72B02E9E61EFDB57_API_TYPE_REST EnumD528205b1dacf02f72b02e9e61efdb57 = "API_TYPE_REST"
)

// All allowed values of EnumD528205b1dacf02f72b02e9e61efdb57 enum
var AllowedEnumD528205b1dacf02f72b02e9e61efdb57EnumValues = []EnumD528205b1dacf02f72b02e9e61efdb57{
	"API_TYPE_GRAPHQL",
	"API_TYPE_REST",
}

func (v *EnumD528205b1dacf02f72b02e9e61efdb57) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumD528205b1dacf02f72b02e9e61efdb57(value)
	for _, existing := range AllowedEnumD528205b1dacf02f72b02e9e61efdb57EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumD528205b1dacf02f72b02e9e61efdb57", value)
}

// NewEnumD528205b1dacf02f72b02e9e61efdb57FromValue returns a pointer to a valid EnumD528205b1dacf02f72b02e9e61efdb57
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumD528205b1dacf02f72b02e9e61efdb57FromValue(v string) (*EnumD528205b1dacf02f72b02e9e61efdb57, error) {
	ev := EnumD528205b1dacf02f72b02e9e61efdb57(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumD528205b1dacf02f72b02e9e61efdb57: valid values are %v", v, AllowedEnumD528205b1dacf02f72b02e9e61efdb57EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumD528205b1dacf02f72b02e9e61efdb57) IsValid() bool {
	for _, existing := range AllowedEnumD528205b1dacf02f72b02e9e61efdb57EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_d528205b1dacf02f72b02e9e61efdb57 value
func (v EnumD528205b1dacf02f72b02e9e61efdb57) Ptr() *EnumD528205b1dacf02f72b02e9e61efdb57 {
	return &v
}

type NullableEnumD528205b1dacf02f72b02e9e61efdb57 struct {
	value *EnumD528205b1dacf02f72b02e9e61efdb57
	isSet bool
}

func (v NullableEnumD528205b1dacf02f72b02e9e61efdb57) Get() *EnumD528205b1dacf02f72b02e9e61efdb57 {
	return v.value
}

func (v *NullableEnumD528205b1dacf02f72b02e9e61efdb57) Set(val *EnumD528205b1dacf02f72b02e9e61efdb57) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumD528205b1dacf02f72b02e9e61efdb57) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumD528205b1dacf02f72b02e9e61efdb57) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumD528205b1dacf02f72b02e9e61efdb57(val *EnumD528205b1dacf02f72b02e9e61efdb57) *NullableEnumD528205b1dacf02f72b02e9e61efdb57 {
	return &NullableEnumD528205b1dacf02f72b02e9e61efdb57{value: val, isSet: true}
}

func (v NullableEnumD528205b1dacf02f72b02e9e61efdb57) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumD528205b1dacf02f72b02e9e61efdb57) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

