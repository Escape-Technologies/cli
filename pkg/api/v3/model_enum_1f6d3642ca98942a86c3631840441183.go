/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum1f6d3642ca98942a86c3631840441183 the model 'Enum1f6d3642ca98942a86c3631840441183'
type Enum1f6d3642ca98942a86c3631840441183 string

// List of Enum_1f6d3642ca98942a86c3631840441183
const (
	ENUM1F6D3642CA98942A86C3631840441183_HIGH Enum1f6d3642ca98942a86c3631840441183 = "HIGH"
	ENUM1F6D3642CA98942A86C3631840441183_MEDIUM Enum1f6d3642ca98942a86c3631840441183 = "MEDIUM"
	ENUM1F6D3642CA98942A86C3631840441183_LOW Enum1f6d3642ca98942a86c3631840441183 = "LOW"
	ENUM1F6D3642CA98942A86C3631840441183_INFO Enum1f6d3642ca98942a86c3631840441183 = "INFO"
)

// All allowed values of Enum1f6d3642ca98942a86c3631840441183 enum
var AllowedEnum1f6d3642ca98942a86c3631840441183EnumValues = []Enum1f6d3642ca98942a86c3631840441183{
	"HIGH",
	"MEDIUM",
	"LOW",
	"INFO",
}

func (v *Enum1f6d3642ca98942a86c3631840441183) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum1f6d3642ca98942a86c3631840441183(value)
	for _, existing := range AllowedEnum1f6d3642ca98942a86c3631840441183EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum1f6d3642ca98942a86c3631840441183", value)
}

// NewEnum1f6d3642ca98942a86c3631840441183FromValue returns a pointer to a valid Enum1f6d3642ca98942a86c3631840441183
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum1f6d3642ca98942a86c3631840441183FromValue(v string) (*Enum1f6d3642ca98942a86c3631840441183, error) {
	ev := Enum1f6d3642ca98942a86c3631840441183(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum1f6d3642ca98942a86c3631840441183: valid values are %v", v, AllowedEnum1f6d3642ca98942a86c3631840441183EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum1f6d3642ca98942a86c3631840441183) IsValid() bool {
	for _, existing := range AllowedEnum1f6d3642ca98942a86c3631840441183EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_1f6d3642ca98942a86c3631840441183 value
func (v Enum1f6d3642ca98942a86c3631840441183) Ptr() *Enum1f6d3642ca98942a86c3631840441183 {
	return &v
}

type NullableEnum1f6d3642ca98942a86c3631840441183 struct {
	value *Enum1f6d3642ca98942a86c3631840441183
	isSet bool
}

func (v NullableEnum1f6d3642ca98942a86c3631840441183) Get() *Enum1f6d3642ca98942a86c3631840441183 {
	return v.value
}

func (v *NullableEnum1f6d3642ca98942a86c3631840441183) Set(val *Enum1f6d3642ca98942a86c3631840441183) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum1f6d3642ca98942a86c3631840441183) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum1f6d3642ca98942a86c3631840441183) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum1f6d3642ca98942a86c3631840441183(val *Enum1f6d3642ca98942a86c3631840441183) *NullableEnum1f6d3642ca98942a86c3631840441183 {
	return &NullableEnum1f6d3642ca98942a86c3631840441183{value: val, isSet: true}
}

func (v NullableEnum1f6d3642ca98942a86c3631840441183) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum1f6d3642ca98942a86c3631840441183) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

