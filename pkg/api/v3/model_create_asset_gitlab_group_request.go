/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetGITLABGROUPRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetGITLABGROUPRequest{}

// CreateAssetGITLABGROUPRequest struct for CreateAssetGITLABGROUPRequest
type CreateAssetGITLABGROUPRequest struct {
	AssetClass EnumSOURCECODEMANAGEMENT `json:"asset_class"`
	AssetType EnumGITLABGROUP `json:"asset_type"`
	Name *string `json:"name,omitempty"`
	ApiKey string `json:"api_key"`
	InstanceUrl *string `json:"instance_url,omitempty"`
	LocationId *string `json:"location_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetGITLABGROUPRequest CreateAssetGITLABGROUPRequest

// NewCreateAssetGITLABGROUPRequest instantiates a new CreateAssetGITLABGROUPRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetGITLABGROUPRequest(assetClass EnumSOURCECODEMANAGEMENT, assetType EnumGITLABGROUP, apiKey string) *CreateAssetGITLABGROUPRequest {
	this := CreateAssetGITLABGROUPRequest{}
	this.AssetClass = assetClass
	this.AssetType = assetType
	this.ApiKey = apiKey
	return &this
}

// NewCreateAssetGITLABGROUPRequestWithDefaults instantiates a new CreateAssetGITLABGROUPRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetGITLABGROUPRequestWithDefaults() *CreateAssetGITLABGROUPRequest {
	this := CreateAssetGITLABGROUPRequest{}
	return &this
}

// GetAssetClass returns the AssetClass field value
func (o *CreateAssetGITLABGROUPRequest) GetAssetClass() EnumSOURCECODEMANAGEMENT {
	if o == nil {
		var ret EnumSOURCECODEMANAGEMENT
		return ret
	}

	return o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetAssetClassOk() (*EnumSOURCECODEMANAGEMENT, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetClass, true
}

// SetAssetClass sets field value
func (o *CreateAssetGITLABGROUPRequest) SetAssetClass(v EnumSOURCECODEMANAGEMENT) {
	o.AssetClass = v
}

// GetAssetType returns the AssetType field value
func (o *CreateAssetGITLABGROUPRequest) GetAssetType() EnumGITLABGROUP {
	if o == nil {
		var ret EnumGITLABGROUP
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetAssetTypeOk() (*EnumGITLABGROUP, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *CreateAssetGITLABGROUPRequest) SetAssetType(v EnumGITLABGROUP) {
	o.AssetType = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateAssetGITLABGROUPRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateAssetGITLABGROUPRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateAssetGITLABGROUPRequest) SetName(v string) {
	o.Name = &v
}

// GetApiKey returns the ApiKey field value
func (o *CreateAssetGITLABGROUPRequest) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *CreateAssetGITLABGROUPRequest) SetApiKey(v string) {
	o.ApiKey = v
}

// GetInstanceUrl returns the InstanceUrl field value if set, zero value otherwise.
func (o *CreateAssetGITLABGROUPRequest) GetInstanceUrl() string {
	if o == nil || IsNil(o.InstanceUrl) {
		var ret string
		return ret
	}
	return *o.InstanceUrl
}

// GetInstanceUrlOk returns a tuple with the InstanceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetInstanceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUrl) {
		return nil, false
	}
	return o.InstanceUrl, true
}

// HasInstanceUrl returns a boolean if a field has been set.
func (o *CreateAssetGITLABGROUPRequest) HasInstanceUrl() bool {
	if o != nil && !IsNil(o.InstanceUrl) {
		return true
	}

	return false
}

// SetInstanceUrl gets a reference to the given string and assigns it to the InstanceUrl field.
func (o *CreateAssetGITLABGROUPRequest) SetInstanceUrl(v string) {
	o.InstanceUrl = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *CreateAssetGITLABGROUPRequest) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetGITLABGROUPRequest) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *CreateAssetGITLABGROUPRequest) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *CreateAssetGITLABGROUPRequest) SetLocationId(v string) {
	o.LocationId = &v
}

func (o CreateAssetGITLABGROUPRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetGITLABGROUPRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_class"] = o.AssetClass
	toSerialize["asset_type"] = o.AssetType
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["api_key"] = o.ApiKey
	if !IsNil(o.InstanceUrl) {
		toSerialize["instance_url"] = o.InstanceUrl
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetGITLABGROUPRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_class",
		"asset_type",
		"api_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetGITLABGROUPRequest := _CreateAssetGITLABGROUPRequest{}

	err = json.Unmarshal(data, &varCreateAssetGITLABGROUPRequest)

	if err != nil {
		return err
	}

	*o = CreateAssetGITLABGROUPRequest(varCreateAssetGITLABGROUPRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_class")
		delete(additionalProperties, "asset_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "api_key")
		delete(additionalProperties, "instance_url")
		delete(additionalProperties, "location_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetGITLABGROUPRequest struct {
	value *CreateAssetGITLABGROUPRequest
	isSet bool
}

func (v NullableCreateAssetGITLABGROUPRequest) Get() *CreateAssetGITLABGROUPRequest {
	return v.value
}

func (v *NullableCreateAssetGITLABGROUPRequest) Set(val *CreateAssetGITLABGROUPRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetGITLABGROUPRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetGITLABGROUPRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetGITLABGROUPRequest(val *CreateAssetGITLABGROUPRequest) *NullableCreateAssetGITLABGROUPRequest {
	return &NullableCreateAssetGITLABGROUPRequest{value: val, isSet: true}
}

func (v NullableCreateAssetGITLABGROUPRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetGITLABGROUPRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


