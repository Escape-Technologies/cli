/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetSchemaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetSchemaRequest{}

// CreateAssetSchemaRequest struct for CreateAssetSchemaRequest
type CreateAssetSchemaRequest struct {
	AssetType ENUMSCHEMA `json:"asset_type"`
	Fetch *CreateAssetSchemaRequestFetch `json:"fetch,omitempty"`
	Upload *CreateAssetSchemaRequestUpload `json:"upload,omitempty"`
	// The authentication string of the asset
	AuthenticationStr *string `json:"authenticationStr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetSchemaRequest CreateAssetSchemaRequest

// NewCreateAssetSchemaRequest instantiates a new CreateAssetSchemaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetSchemaRequest(assetType ENUMSCHEMA) *CreateAssetSchemaRequest {
	this := CreateAssetSchemaRequest{}
	this.AssetType = assetType
	return &this
}

// NewCreateAssetSchemaRequestWithDefaults instantiates a new CreateAssetSchemaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetSchemaRequestWithDefaults() *CreateAssetSchemaRequest {
	this := CreateAssetSchemaRequest{}
	return &this
}

// GetAssetType returns the AssetType field value
func (o *CreateAssetSchemaRequest) GetAssetType() ENUMSCHEMA {
	if o == nil {
		var ret ENUMSCHEMA
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *CreateAssetSchemaRequest) GetAssetTypeOk() (*ENUMSCHEMA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *CreateAssetSchemaRequest) SetAssetType(v ENUMSCHEMA) {
	o.AssetType = v
}

// GetFetch returns the Fetch field value if set, zero value otherwise.
func (o *CreateAssetSchemaRequest) GetFetch() CreateAssetSchemaRequestFetch {
	if o == nil || IsNil(o.Fetch) {
		var ret CreateAssetSchemaRequestFetch
		return ret
	}
	return *o.Fetch
}

// GetFetchOk returns a tuple with the Fetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetSchemaRequest) GetFetchOk() (*CreateAssetSchemaRequestFetch, bool) {
	if o == nil || IsNil(o.Fetch) {
		return nil, false
	}
	return o.Fetch, true
}

// HasFetch returns a boolean if a field has been set.
func (o *CreateAssetSchemaRequest) HasFetch() bool {
	if o != nil && !IsNil(o.Fetch) {
		return true
	}

	return false
}

// SetFetch gets a reference to the given CreateAssetSchemaRequestFetch and assigns it to the Fetch field.
func (o *CreateAssetSchemaRequest) SetFetch(v CreateAssetSchemaRequestFetch) {
	o.Fetch = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *CreateAssetSchemaRequest) GetUpload() CreateAssetSchemaRequestUpload {
	if o == nil || IsNil(o.Upload) {
		var ret CreateAssetSchemaRequestUpload
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetSchemaRequest) GetUploadOk() (*CreateAssetSchemaRequestUpload, bool) {
	if o == nil || IsNil(o.Upload) {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *CreateAssetSchemaRequest) HasUpload() bool {
	if o != nil && !IsNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given CreateAssetSchemaRequestUpload and assigns it to the Upload field.
func (o *CreateAssetSchemaRequest) SetUpload(v CreateAssetSchemaRequestUpload) {
	o.Upload = &v
}

// GetAuthenticationStr returns the AuthenticationStr field value if set, zero value otherwise.
func (o *CreateAssetSchemaRequest) GetAuthenticationStr() string {
	if o == nil || IsNil(o.AuthenticationStr) {
		var ret string
		return ret
	}
	return *o.AuthenticationStr
}

// GetAuthenticationStrOk returns a tuple with the AuthenticationStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetSchemaRequest) GetAuthenticationStrOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationStr) {
		return nil, false
	}
	return o.AuthenticationStr, true
}

// HasAuthenticationStr returns a boolean if a field has been set.
func (o *CreateAssetSchemaRequest) HasAuthenticationStr() bool {
	if o != nil && !IsNil(o.AuthenticationStr) {
		return true
	}

	return false
}

// SetAuthenticationStr gets a reference to the given string and assigns it to the AuthenticationStr field.
func (o *CreateAssetSchemaRequest) SetAuthenticationStr(v string) {
	o.AuthenticationStr = &v
}

func (o CreateAssetSchemaRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetSchemaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_type"] = o.AssetType
	if !IsNil(o.Fetch) {
		toSerialize["fetch"] = o.Fetch
	}
	if !IsNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}
	if !IsNil(o.AuthenticationStr) {
		toSerialize["authenticationStr"] = o.AuthenticationStr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetSchemaRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetSchemaRequest := _CreateAssetSchemaRequest{}

	err = json.Unmarshal(data, &varCreateAssetSchemaRequest)

	if err != nil {
		return err
	}

	*o = CreateAssetSchemaRequest(varCreateAssetSchemaRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_type")
		delete(additionalProperties, "fetch")
		delete(additionalProperties, "upload")
		delete(additionalProperties, "authenticationStr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetSchemaRequest struct {
	value *CreateAssetSchemaRequest
	isSet bool
}

func (v NullableCreateAssetSchemaRequest) Get() *CreateAssetSchemaRequest {
	return v.value
}

func (v *NullableCreateAssetSchemaRequest) Set(val *CreateAssetSchemaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetSchemaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetSchemaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetSchemaRequest(val *CreateAssetSchemaRequest) *NullableCreateAssetSchemaRequest {
	return &NullableCreateAssetSchemaRequest{value: val, isSet: true}
}

func (v NullableCreateAssetSchemaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetSchemaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


