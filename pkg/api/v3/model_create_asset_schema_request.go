/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)


// CreateAssetSchemaRequest struct for CreateAssetSchemaRequest
type CreateAssetSchemaRequest struct {
	CreateSchemaViaFetch *CreateSchemaViaFetch
	CreateSchemaViaUpload *CreateSchemaViaUpload
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateAssetSchemaRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CreateSchemaViaFetch
	err = json.Unmarshal(data, &dst.CreateSchemaViaFetch);
	if err == nil {
		jsonCreateSchemaViaFetch, _ := json.Marshal(dst.CreateSchemaViaFetch)
		if string(jsonCreateSchemaViaFetch) == "{}" { // empty struct
			dst.CreateSchemaViaFetch = nil
		} else {
			return nil // data stored in dst.CreateSchemaViaFetch, return on the first match
		}
	} else {
		dst.CreateSchemaViaFetch = nil
	}

	// try to unmarshal JSON data into CreateSchemaViaUpload
	err = json.Unmarshal(data, &dst.CreateSchemaViaUpload);
	if err == nil {
		jsonCreateSchemaViaUpload, _ := json.Marshal(dst.CreateSchemaViaUpload)
		if string(jsonCreateSchemaViaUpload) == "{}" { // empty struct
			dst.CreateSchemaViaUpload = nil
		} else {
			return nil // data stored in dst.CreateSchemaViaUpload, return on the first match
		}
	} else {
		dst.CreateSchemaViaUpload = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateAssetSchemaRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAssetSchemaRequest) MarshalJSON() ([]byte, error) {
	if src.CreateSchemaViaFetch != nil {
		return json.Marshal(&src.CreateSchemaViaFetch)
	}

	if src.CreateSchemaViaUpload != nil {
		return json.Marshal(&src.CreateSchemaViaUpload)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateAssetSchemaRequest struct {
	value *CreateAssetSchemaRequest
	isSet bool
}

func (v NullableCreateAssetSchemaRequest) Get() *CreateAssetSchemaRequest {
	return v.value
}

func (v *NullableCreateAssetSchemaRequest) Set(val *CreateAssetSchemaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetSchemaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetSchemaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetSchemaRequest(val *CreateAssetSchemaRequest) *NullableCreateAssetSchemaRequest {
	return &NullableCreateAssetSchemaRequest{value: val, isSet: true}
}

func (v NullableCreateAssetSchemaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetSchemaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


