/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateAssetDNSRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAssetDNSRequest{}

// CreateAssetDNSRequest struct for CreateAssetDNSRequest
type CreateAssetDNSRequest struct {
	AssetClass EnumHOST `json:"asset_class"`
	AssetType EnumDNS `json:"asset_type"`
	Address string `json:"address"`
	Favicon *string `json:"favicon,omitempty"`
	OpenPorts []CreateAssetDNSRequestOpenPortsInner `json:"open_ports,omitempty"`
	WizProviderId *string `json:"wiz_provider_id,omitempty"`
	WizCloudPlatform *string `json:"wiz_cloud_platform,omitempty"`
	PortsInsights []float32 `json:"ports_insights,omitempty"`
	PathsInsights []CreateAssetDNSRequestPathsInsightsInner `json:"paths_insights,omitempty"`
	DnsRecords []CreateAssetDNSRequestDnsRecordsInner `json:"dns_records,omitempty"`
	Ips []string `json:"ips,omitempty"`
	RegionCountryCodes []string `json:"region_country_codes,omitempty"`
	Registrar *string `json:"registrar,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateAssetDNSRequest CreateAssetDNSRequest

// NewCreateAssetDNSRequest instantiates a new CreateAssetDNSRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAssetDNSRequest(assetClass EnumHOST, assetType EnumDNS, address string) *CreateAssetDNSRequest {
	this := CreateAssetDNSRequest{}
	this.AssetClass = assetClass
	this.AssetType = assetType
	this.Address = address
	return &this
}

// NewCreateAssetDNSRequestWithDefaults instantiates a new CreateAssetDNSRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAssetDNSRequestWithDefaults() *CreateAssetDNSRequest {
	this := CreateAssetDNSRequest{}
	return &this
}

// GetAssetClass returns the AssetClass field value
func (o *CreateAssetDNSRequest) GetAssetClass() EnumHOST {
	if o == nil {
		var ret EnumHOST
		return ret
	}

	return o.AssetClass
}

// GetAssetClassOk returns a tuple with the AssetClass field value
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetAssetClassOk() (*EnumHOST, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetClass, true
}

// SetAssetClass sets field value
func (o *CreateAssetDNSRequest) SetAssetClass(v EnumHOST) {
	o.AssetClass = v
}

// GetAssetType returns the AssetType field value
func (o *CreateAssetDNSRequest) GetAssetType() EnumDNS {
	if o == nil {
		var ret EnumDNS
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetAssetTypeOk() (*EnumDNS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *CreateAssetDNSRequest) SetAssetType(v EnumDNS) {
	o.AssetType = v
}

// GetAddress returns the Address field value
func (o *CreateAssetDNSRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *CreateAssetDNSRequest) SetAddress(v string) {
	o.Address = v
}

// GetFavicon returns the Favicon field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetFavicon() string {
	if o == nil || IsNil(o.Favicon) {
		var ret string
		return ret
	}
	return *o.Favicon
}

// GetFaviconOk returns a tuple with the Favicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetFaviconOk() (*string, bool) {
	if o == nil || IsNil(o.Favicon) {
		return nil, false
	}
	return o.Favicon, true
}

// HasFavicon returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasFavicon() bool {
	if o != nil && !IsNil(o.Favicon) {
		return true
	}

	return false
}

// SetFavicon gets a reference to the given string and assigns it to the Favicon field.
func (o *CreateAssetDNSRequest) SetFavicon(v string) {
	o.Favicon = &v
}

// GetOpenPorts returns the OpenPorts field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetOpenPorts() []CreateAssetDNSRequestOpenPortsInner {
	if o == nil || IsNil(o.OpenPorts) {
		var ret []CreateAssetDNSRequestOpenPortsInner
		return ret
	}
	return o.OpenPorts
}

// GetOpenPortsOk returns a tuple with the OpenPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetOpenPortsOk() ([]CreateAssetDNSRequestOpenPortsInner, bool) {
	if o == nil || IsNil(o.OpenPorts) {
		return nil, false
	}
	return o.OpenPorts, true
}

// HasOpenPorts returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasOpenPorts() bool {
	if o != nil && !IsNil(o.OpenPorts) {
		return true
	}

	return false
}

// SetOpenPorts gets a reference to the given []CreateAssetDNSRequestOpenPortsInner and assigns it to the OpenPorts field.
func (o *CreateAssetDNSRequest) SetOpenPorts(v []CreateAssetDNSRequestOpenPortsInner) {
	o.OpenPorts = v
}

// GetWizProviderId returns the WizProviderId field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetWizProviderId() string {
	if o == nil || IsNil(o.WizProviderId) {
		var ret string
		return ret
	}
	return *o.WizProviderId
}

// GetWizProviderIdOk returns a tuple with the WizProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetWizProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.WizProviderId) {
		return nil, false
	}
	return o.WizProviderId, true
}

// HasWizProviderId returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasWizProviderId() bool {
	if o != nil && !IsNil(o.WizProviderId) {
		return true
	}

	return false
}

// SetWizProviderId gets a reference to the given string and assigns it to the WizProviderId field.
func (o *CreateAssetDNSRequest) SetWizProviderId(v string) {
	o.WizProviderId = &v
}

// GetWizCloudPlatform returns the WizCloudPlatform field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetWizCloudPlatform() string {
	if o == nil || IsNil(o.WizCloudPlatform) {
		var ret string
		return ret
	}
	return *o.WizCloudPlatform
}

// GetWizCloudPlatformOk returns a tuple with the WizCloudPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetWizCloudPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.WizCloudPlatform) {
		return nil, false
	}
	return o.WizCloudPlatform, true
}

// HasWizCloudPlatform returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasWizCloudPlatform() bool {
	if o != nil && !IsNil(o.WizCloudPlatform) {
		return true
	}

	return false
}

// SetWizCloudPlatform gets a reference to the given string and assigns it to the WizCloudPlatform field.
func (o *CreateAssetDNSRequest) SetWizCloudPlatform(v string) {
	o.WizCloudPlatform = &v
}

// GetPortsInsights returns the PortsInsights field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetPortsInsights() []float32 {
	if o == nil || IsNil(o.PortsInsights) {
		var ret []float32
		return ret
	}
	return o.PortsInsights
}

// GetPortsInsightsOk returns a tuple with the PortsInsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetPortsInsightsOk() ([]float32, bool) {
	if o == nil || IsNil(o.PortsInsights) {
		return nil, false
	}
	return o.PortsInsights, true
}

// HasPortsInsights returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasPortsInsights() bool {
	if o != nil && !IsNil(o.PortsInsights) {
		return true
	}

	return false
}

// SetPortsInsights gets a reference to the given []float32 and assigns it to the PortsInsights field.
func (o *CreateAssetDNSRequest) SetPortsInsights(v []float32) {
	o.PortsInsights = v
}

// GetPathsInsights returns the PathsInsights field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetPathsInsights() []CreateAssetDNSRequestPathsInsightsInner {
	if o == nil || IsNil(o.PathsInsights) {
		var ret []CreateAssetDNSRequestPathsInsightsInner
		return ret
	}
	return o.PathsInsights
}

// GetPathsInsightsOk returns a tuple with the PathsInsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetPathsInsightsOk() ([]CreateAssetDNSRequestPathsInsightsInner, bool) {
	if o == nil || IsNil(o.PathsInsights) {
		return nil, false
	}
	return o.PathsInsights, true
}

// HasPathsInsights returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasPathsInsights() bool {
	if o != nil && !IsNil(o.PathsInsights) {
		return true
	}

	return false
}

// SetPathsInsights gets a reference to the given []CreateAssetDNSRequestPathsInsightsInner and assigns it to the PathsInsights field.
func (o *CreateAssetDNSRequest) SetPathsInsights(v []CreateAssetDNSRequestPathsInsightsInner) {
	o.PathsInsights = v
}

// GetDnsRecords returns the DnsRecords field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetDnsRecords() []CreateAssetDNSRequestDnsRecordsInner {
	if o == nil || IsNil(o.DnsRecords) {
		var ret []CreateAssetDNSRequestDnsRecordsInner
		return ret
	}
	return o.DnsRecords
}

// GetDnsRecordsOk returns a tuple with the DnsRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetDnsRecordsOk() ([]CreateAssetDNSRequestDnsRecordsInner, bool) {
	if o == nil || IsNil(o.DnsRecords) {
		return nil, false
	}
	return o.DnsRecords, true
}

// HasDnsRecords returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasDnsRecords() bool {
	if o != nil && !IsNil(o.DnsRecords) {
		return true
	}

	return false
}

// SetDnsRecords gets a reference to the given []CreateAssetDNSRequestDnsRecordsInner and assigns it to the DnsRecords field.
func (o *CreateAssetDNSRequest) SetDnsRecords(v []CreateAssetDNSRequestDnsRecordsInner) {
	o.DnsRecords = v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetIps() []string {
	if o == nil || IsNil(o.Ips) {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *CreateAssetDNSRequest) SetIps(v []string) {
	o.Ips = v
}

// GetRegionCountryCodes returns the RegionCountryCodes field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetRegionCountryCodes() []string {
	if o == nil || IsNil(o.RegionCountryCodes) {
		var ret []string
		return ret
	}
	return o.RegionCountryCodes
}

// GetRegionCountryCodesOk returns a tuple with the RegionCountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetRegionCountryCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RegionCountryCodes) {
		return nil, false
	}
	return o.RegionCountryCodes, true
}

// HasRegionCountryCodes returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasRegionCountryCodes() bool {
	if o != nil && !IsNil(o.RegionCountryCodes) {
		return true
	}

	return false
}

// SetRegionCountryCodes gets a reference to the given []string and assigns it to the RegionCountryCodes field.
func (o *CreateAssetDNSRequest) SetRegionCountryCodes(v []string) {
	o.RegionCountryCodes = v
}

// GetRegistrar returns the Registrar field value if set, zero value otherwise.
func (o *CreateAssetDNSRequest) GetRegistrar() string {
	if o == nil || IsNil(o.Registrar) {
		var ret string
		return ret
	}
	return *o.Registrar
}

// GetRegistrarOk returns a tuple with the Registrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAssetDNSRequest) GetRegistrarOk() (*string, bool) {
	if o == nil || IsNil(o.Registrar) {
		return nil, false
	}
	return o.Registrar, true
}

// HasRegistrar returns a boolean if a field has been set.
func (o *CreateAssetDNSRequest) HasRegistrar() bool {
	if o != nil && !IsNil(o.Registrar) {
		return true
	}

	return false
}

// SetRegistrar gets a reference to the given string and assigns it to the Registrar field.
func (o *CreateAssetDNSRequest) SetRegistrar(v string) {
	o.Registrar = &v
}

func (o CreateAssetDNSRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAssetDNSRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_class"] = o.AssetClass
	toSerialize["asset_type"] = o.AssetType
	toSerialize["address"] = o.Address
	if !IsNil(o.Favicon) {
		toSerialize["favicon"] = o.Favicon
	}
	if !IsNil(o.OpenPorts) {
		toSerialize["open_ports"] = o.OpenPorts
	}
	if !IsNil(o.WizProviderId) {
		toSerialize["wiz_provider_id"] = o.WizProviderId
	}
	if !IsNil(o.WizCloudPlatform) {
		toSerialize["wiz_cloud_platform"] = o.WizCloudPlatform
	}
	if !IsNil(o.PortsInsights) {
		toSerialize["ports_insights"] = o.PortsInsights
	}
	if !IsNil(o.PathsInsights) {
		toSerialize["paths_insights"] = o.PathsInsights
	}
	if !IsNil(o.DnsRecords) {
		toSerialize["dns_records"] = o.DnsRecords
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	if !IsNil(o.RegionCountryCodes) {
		toSerialize["region_country_codes"] = o.RegionCountryCodes
	}
	if !IsNil(o.Registrar) {
		toSerialize["registrar"] = o.Registrar
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateAssetDNSRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_class",
		"asset_type",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAssetDNSRequest := _CreateAssetDNSRequest{}

	err = json.Unmarshal(data, &varCreateAssetDNSRequest)

	if err != nil {
		return err
	}

	*o = CreateAssetDNSRequest(varCreateAssetDNSRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_class")
		delete(additionalProperties, "asset_type")
		delete(additionalProperties, "address")
		delete(additionalProperties, "favicon")
		delete(additionalProperties, "open_ports")
		delete(additionalProperties, "wiz_provider_id")
		delete(additionalProperties, "wiz_cloud_platform")
		delete(additionalProperties, "ports_insights")
		delete(additionalProperties, "paths_insights")
		delete(additionalProperties, "dns_records")
		delete(additionalProperties, "ips")
		delete(additionalProperties, "region_country_codes")
		delete(additionalProperties, "registrar")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateAssetDNSRequest struct {
	value *CreateAssetDNSRequest
	isSet bool
}

func (v NullableCreateAssetDNSRequest) Get() *CreateAssetDNSRequest {
	return v.value
}

func (v *NullableCreateAssetDNSRequest) Set(val *CreateAssetDNSRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssetDNSRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssetDNSRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssetDNSRequest(val *CreateAssetDNSRequest) *NullableCreateAssetDNSRequest {
	return &NullableCreateAssetDNSRequest{value: val, isSet: true}
}

func (v NullableCreateAssetDNSRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssetDNSRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


