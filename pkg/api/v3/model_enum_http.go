/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumHTTP the model 'EnumHTTP'
type EnumHTTP string

// List of Enum_HTTP
const (
	ENUMHTTP_HTTP EnumHTTP = "http"
)

// All allowed values of EnumHTTP enum
var AllowedEnumHTTPEnumValues = []EnumHTTP{
	"http",
}

func (v *EnumHTTP) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumHTTP(value)
	for _, existing := range AllowedEnumHTTPEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumHTTP", value)
}

// NewEnumHTTPFromValue returns a pointer to a valid EnumHTTP
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumHTTPFromValue(v string) (*EnumHTTP, error) {
	ev := EnumHTTP(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumHTTP: valid values are %v", v, AllowedEnumHTTPEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumHTTP) IsValid() bool {
	for _, existing := range AllowedEnumHTTPEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_HTTP value
func (v EnumHTTP) Ptr() *EnumHTTP {
	return &v
}

type NullableEnumHTTP struct {
	value *EnumHTTP
	isSet bool
}

func (v NullableEnumHTTP) Get() *EnumHTTP {
	return v.value
}

func (v *NullableEnumHTTP) Set(val *EnumHTTP) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumHTTP) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumHTTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumHTTP(val *EnumHTTP) *NullableEnumHTTP {
	return &NullableEnumHTTP{value: val, isSet: true}
}

func (v NullableEnumHTTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumHTTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

