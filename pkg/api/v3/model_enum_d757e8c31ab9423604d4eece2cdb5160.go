/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumD757e8c31ab9423604d4eece2cdb5160 the model 'EnumD757e8c31ab9423604d4eece2cdb5160'
type EnumD757e8c31ab9423604d4eece2cdb5160 string

// List of Enum_d757e8c31ab9423604d4eece2cdb5160
const (
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_5 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-5"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_21 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-21"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_32 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-32"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_94 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-94"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_95 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-95"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_96 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-96"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_97 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-97"
	ENUMD757E8C31AB9423604D4EECE2CDB5160_ARTICLE_98 EnumD757e8c31ab9423604d4eece2cdb5160 = "Article-98"
)

// All allowed values of EnumD757e8c31ab9423604d4eece2cdb5160 enum
var AllowedEnumD757e8c31ab9423604d4eece2cdb5160EnumValues = []EnumD757e8c31ab9423604d4eece2cdb5160{
	"Article-5",
	"Article-21",
	"Article-32",
	"Article-94",
	"Article-95",
	"Article-96",
	"Article-97",
	"Article-98",
}

func (v *EnumD757e8c31ab9423604d4eece2cdb5160) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumD757e8c31ab9423604d4eece2cdb5160(value)
	for _, existing := range AllowedEnumD757e8c31ab9423604d4eece2cdb5160EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumD757e8c31ab9423604d4eece2cdb5160", value)
}

// NewEnumD757e8c31ab9423604d4eece2cdb5160FromValue returns a pointer to a valid EnumD757e8c31ab9423604d4eece2cdb5160
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumD757e8c31ab9423604d4eece2cdb5160FromValue(v string) (*EnumD757e8c31ab9423604d4eece2cdb5160, error) {
	ev := EnumD757e8c31ab9423604d4eece2cdb5160(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumD757e8c31ab9423604d4eece2cdb5160: valid values are %v", v, AllowedEnumD757e8c31ab9423604d4eece2cdb5160EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumD757e8c31ab9423604d4eece2cdb5160) IsValid() bool {
	for _, existing := range AllowedEnumD757e8c31ab9423604d4eece2cdb5160EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_d757e8c31ab9423604d4eece2cdb5160 value
func (v EnumD757e8c31ab9423604d4eece2cdb5160) Ptr() *EnumD757e8c31ab9423604d4eece2cdb5160 {
	return &v
}

type NullableEnumD757e8c31ab9423604d4eece2cdb5160 struct {
	value *EnumD757e8c31ab9423604d4eece2cdb5160
	isSet bool
}

func (v NullableEnumD757e8c31ab9423604d4eece2cdb5160) Get() *EnumD757e8c31ab9423604d4eece2cdb5160 {
	return v.value
}

func (v *NullableEnumD757e8c31ab9423604d4eece2cdb5160) Set(val *EnumD757e8c31ab9423604d4eece2cdb5160) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumD757e8c31ab9423604d4eece2cdb5160) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumD757e8c31ab9423604d4eece2cdb5160) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumD757e8c31ab9423604d4eece2cdb5160(val *EnumD757e8c31ab9423604d4eece2cdb5160) *NullableEnumD757e8c31ab9423604d4eece2cdb5160 {
	return &NullableEnumD757e8c31ab9423604d4eece2cdb5160{value: val, isSet: true}
}

func (v NullableEnumD757e8c31ab9423604d4eece2cdb5160) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumD757e8c31ab9423604d4eece2cdb5160) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

