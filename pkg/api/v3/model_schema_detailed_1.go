/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the SchemaDetailed1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaDetailed1{}

// SchemaDetailed1 Detailed information about a schema
type SchemaDetailed1 struct {
	// The id of the schema
	Id string `json:"id"`
	// The url of the schema
	Url *string `json:"url,omitempty"`
	// Whether the schema is generated
	Generated bool `json:"generated"`
	AdditionalProperties map[string]interface{}
}

type _SchemaDetailed1 SchemaDetailed1

// NewSchemaDetailed1 instantiates a new SchemaDetailed1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDetailed1(id string, generated bool) *SchemaDetailed1 {
	this := SchemaDetailed1{}
	this.Id = id
	this.Generated = generated
	return &this
}

// NewSchemaDetailed1WithDefaults instantiates a new SchemaDetailed1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDetailed1WithDefaults() *SchemaDetailed1 {
	this := SchemaDetailed1{}
	return &this
}

// GetId returns the Id field value
func (o *SchemaDetailed1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SchemaDetailed1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SchemaDetailed1) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SchemaDetailed1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDetailed1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SchemaDetailed1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SchemaDetailed1) SetUrl(v string) {
	o.Url = &v
}

// GetGenerated returns the Generated field value
func (o *SchemaDetailed1) GetGenerated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Generated
}

// GetGeneratedOk returns a tuple with the Generated field value
// and a boolean to check if the value has been set.
func (o *SchemaDetailed1) GetGeneratedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Generated, true
}

// SetGenerated sets field value
func (o *SchemaDetailed1) SetGenerated(v bool) {
	o.Generated = v
}

func (o SchemaDetailed1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaDetailed1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["generated"] = o.Generated

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchemaDetailed1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"generated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemaDetailed1 := _SchemaDetailed1{}

	err = json.Unmarshal(data, &varSchemaDetailed1)

	if err != nil {
		return err
	}

	*o = SchemaDetailed1(varSchemaDetailed1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "generated")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchemaDetailed1 struct {
	value *SchemaDetailed1
	isSet bool
}

func (v NullableSchemaDetailed1) Get() *SchemaDetailed1 {
	return v.value
}

func (v *NullableSchemaDetailed1) Set(val *SchemaDetailed1) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDetailed1) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDetailed1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDetailed1(val *SchemaDetailed1) *NullableSchemaDetailed1 {
	return &NullableSchemaDetailed1{value: val, isSet: true}
}

func (v NullableSchemaDetailed1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDetailed1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


