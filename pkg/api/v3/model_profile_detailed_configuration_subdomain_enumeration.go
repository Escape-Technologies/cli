/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationSubdomainEnumeration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationSubdomainEnumeration{}

// ProfileDetailedConfigurationSubdomainEnumeration struct for ProfileDetailedConfigurationSubdomainEnumeration
type ProfileDetailedConfigurationSubdomainEnumeration struct {
	Blocklist []string `json:"blocklist,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationSubdomainEnumeration ProfileDetailedConfigurationSubdomainEnumeration

// NewProfileDetailedConfigurationSubdomainEnumeration instantiates a new ProfileDetailedConfigurationSubdomainEnumeration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationSubdomainEnumeration() *ProfileDetailedConfigurationSubdomainEnumeration {
	this := ProfileDetailedConfigurationSubdomainEnumeration{}
	return &this
}

// NewProfileDetailedConfigurationSubdomainEnumerationWithDefaults instantiates a new ProfileDetailedConfigurationSubdomainEnumeration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationSubdomainEnumerationWithDefaults() *ProfileDetailedConfigurationSubdomainEnumeration {
	this := ProfileDetailedConfigurationSubdomainEnumeration{}
	return &this
}

// GetBlocklist returns the Blocklist field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationSubdomainEnumeration) GetBlocklist() []string {
	if o == nil || IsNil(o.Blocklist) {
		var ret []string
		return ret
	}
	return o.Blocklist
}

// GetBlocklistOk returns a tuple with the Blocklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSubdomainEnumeration) GetBlocklistOk() ([]string, bool) {
	if o == nil || IsNil(o.Blocklist) {
		return nil, false
	}
	return o.Blocklist, true
}

// HasBlocklist returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationSubdomainEnumeration) HasBlocklist() bool {
	if o != nil && !IsNil(o.Blocklist) {
		return true
	}

	return false
}

// SetBlocklist gets a reference to the given []string and assigns it to the Blocklist field.
func (o *ProfileDetailedConfigurationSubdomainEnumeration) SetBlocklist(v []string) {
	o.Blocklist = v
}

func (o ProfileDetailedConfigurationSubdomainEnumeration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationSubdomainEnumeration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocklist) {
		toSerialize["blocklist"] = o.Blocklist
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationSubdomainEnumeration) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationSubdomainEnumeration := _ProfileDetailedConfigurationSubdomainEnumeration{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationSubdomainEnumeration)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationSubdomainEnumeration(varProfileDetailedConfigurationSubdomainEnumeration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "blocklist")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationSubdomainEnumeration struct {
	value *ProfileDetailedConfigurationSubdomainEnumeration
	isSet bool
}

func (v NullableProfileDetailedConfigurationSubdomainEnumeration) Get() *ProfileDetailedConfigurationSubdomainEnumeration {
	return v.value
}

func (v *NullableProfileDetailedConfigurationSubdomainEnumeration) Set(val *ProfileDetailedConfigurationSubdomainEnumeration) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationSubdomainEnumeration) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationSubdomainEnumeration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationSubdomainEnumeration(val *ProfileDetailedConfigurationSubdomainEnumeration) *NullableProfileDetailedConfigurationSubdomainEnumeration {
	return &NullableProfileDetailedConfigurationSubdomainEnumeration{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationSubdomainEnumeration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationSubdomainEnumeration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


