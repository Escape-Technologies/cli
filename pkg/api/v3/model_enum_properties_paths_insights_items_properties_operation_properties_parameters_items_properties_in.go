/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN the model 'ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN'
type ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN string

// List of ENUM_PROPERTIES_PATHS_INSIGHTS_ITEMS_PROPERTIES_OPERATION_PROPERTIES_PARAMETERS_ITEMS_PROPERTIES_IN
const (
	ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN_COOKIE ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN = "cookie"
	ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN_HEADER ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN = "header"
	ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN_PATH ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN = "path"
	ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN_QUERY ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN = "query"
)

// All allowed values of ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN enum
var AllowedENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINEnumValues = []ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN{
	"cookie",
	"header",
	"path",
	"query",
}

func (v *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN(value)
	for _, existing := range AllowedENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN", value)
}

// NewENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINFromValue returns a pointer to a valid ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINFromValue(v string) (*ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN, error) {
	ev := ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN: valid values are %v", v, AllowedENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESINEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_PATHS_INSIGHTS_ITEMS_PROPERTIES_OPERATION_PROPERTIES_PARAMETERS_ITEMS_PROPERTIES_IN value
func (v ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) Ptr() *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN {
	return &v
}

type NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN struct {
	value *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN
	isSet bool
}

func (v NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) Get() *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN {
	return v.value
}

func (v *NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) Set(val *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN(val *ENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) *NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN {
	return &NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESPATHSINSIGHTSITEMSPROPERTIESOPERATIONPROPERTIESPARAMETERSITEMSPROPERTIESIN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

