/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ListRoles200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListRoles200Response{}

// ListRoles200Response struct for ListRoles200Response
type ListRoles200Response struct {
	// The id of the role
	Id string `json:"id"`
	// The name of the role
	Name string `json:"name"`
	// The permissions of the role
	Permissions []ENUMPROPERTIESPERMISSIONSITEMS `json:"permissions"`
	// The date and time the role was created
	CreatedAt time.Time `json:"createdAt"`
	// The bindings of the role
	Bindings []ListProjects200ResponseDataInnerBindingsInner `json:"bindings"`
	AdditionalProperties map[string]interface{}
}

type _ListRoles200Response ListRoles200Response

// NewListRoles200Response instantiates a new ListRoles200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListRoles200Response(id string, name string, permissions []ENUMPROPERTIESPERMISSIONSITEMS, createdAt time.Time, bindings []ListProjects200ResponseDataInnerBindingsInner) *ListRoles200Response {
	this := ListRoles200Response{}
	this.Id = id
	this.Name = name
	this.Permissions = permissions
	this.CreatedAt = createdAt
	this.Bindings = bindings
	return &this
}

// NewListRoles200ResponseWithDefaults instantiates a new ListRoles200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListRoles200ResponseWithDefaults() *ListRoles200Response {
	this := ListRoles200Response{}
	return &this
}

// GetId returns the Id field value
func (o *ListRoles200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListRoles200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListRoles200Response) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ListRoles200Response) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListRoles200Response) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListRoles200Response) SetName(v string) {
	o.Name = v
}

// GetPermissions returns the Permissions field value
func (o *ListRoles200Response) GetPermissions() []ENUMPROPERTIESPERMISSIONSITEMS {
	if o == nil {
		var ret []ENUMPROPERTIESPERMISSIONSITEMS
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *ListRoles200Response) GetPermissionsOk() ([]ENUMPROPERTIESPERMISSIONSITEMS, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *ListRoles200Response) SetPermissions(v []ENUMPROPERTIESPERMISSIONSITEMS) {
	o.Permissions = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ListRoles200Response) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ListRoles200Response) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ListRoles200Response) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetBindings returns the Bindings field value
func (o *ListRoles200Response) GetBindings() []ListProjects200ResponseDataInnerBindingsInner {
	if o == nil {
		var ret []ListProjects200ResponseDataInnerBindingsInner
		return ret
	}

	return o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value
// and a boolean to check if the value has been set.
func (o *ListRoles200Response) GetBindingsOk() ([]ListProjects200ResponseDataInnerBindingsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bindings, true
}

// SetBindings sets field value
func (o *ListRoles200Response) SetBindings(v []ListProjects200ResponseDataInnerBindingsInner) {
	o.Bindings = v
}

func (o ListRoles200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListRoles200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["permissions"] = o.Permissions
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["bindings"] = o.Bindings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListRoles200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"permissions",
		"createdAt",
		"bindings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListRoles200Response := _ListRoles200Response{}

	err = json.Unmarshal(data, &varListRoles200Response)

	if err != nil {
		return err
	}

	*o = ListRoles200Response(varListRoles200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "bindings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListRoles200Response struct {
	value *ListRoles200Response
	isSet bool
}

func (v NullableListRoles200Response) Get() *ListRoles200Response {
	return v.value
}

func (v *NullableListRoles200Response) Set(val *ListRoles200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListRoles200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListRoles200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListRoles200Response(val *ListRoles200Response) *NullableListRoles200Response {
	return &NullableListRoles200Response{value: val, isSet: true}
}

func (v NullableListRoles200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListRoles200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


