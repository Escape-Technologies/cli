/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateCustomRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCustomRuleRequest{}

// CreateCustomRuleRequest struct for CreateCustomRuleRequest
type CreateCustomRuleRequest struct {
	Content CreateCustomRuleRequestContent `json:"content"`
	// Whether the custom rule is enabled for DAST
	DastEnabled *bool `json:"dastEnabled,omitempty"`
	// Whether the custom rule is enabled for Inventory
	InventoryEnabled *bool `json:"inventoryEnabled,omitempty"`
	// The tags of the custom rule
	TagIds []string `json:"tagIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateCustomRuleRequest CreateCustomRuleRequest

// NewCreateCustomRuleRequest instantiates a new CreateCustomRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCustomRuleRequest(content CreateCustomRuleRequestContent) *CreateCustomRuleRequest {
	this := CreateCustomRuleRequest{}
	this.Content = content
	return &this
}

// NewCreateCustomRuleRequestWithDefaults instantiates a new CreateCustomRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCustomRuleRequestWithDefaults() *CreateCustomRuleRequest {
	this := CreateCustomRuleRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *CreateCustomRuleRequest) GetContent() CreateCustomRuleRequestContent {
	if o == nil {
		var ret CreateCustomRuleRequestContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateCustomRuleRequest) GetContentOk() (*CreateCustomRuleRequestContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateCustomRuleRequest) SetContent(v CreateCustomRuleRequestContent) {
	o.Content = v
}

// GetDastEnabled returns the DastEnabled field value if set, zero value otherwise.
func (o *CreateCustomRuleRequest) GetDastEnabled() bool {
	if o == nil || IsNil(o.DastEnabled) {
		var ret bool
		return ret
	}
	return *o.DastEnabled
}

// GetDastEnabledOk returns a tuple with the DastEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomRuleRequest) GetDastEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DastEnabled) {
		return nil, false
	}
	return o.DastEnabled, true
}

// HasDastEnabled returns a boolean if a field has been set.
func (o *CreateCustomRuleRequest) HasDastEnabled() bool {
	if o != nil && !IsNil(o.DastEnabled) {
		return true
	}

	return false
}

// SetDastEnabled gets a reference to the given bool and assigns it to the DastEnabled field.
func (o *CreateCustomRuleRequest) SetDastEnabled(v bool) {
	o.DastEnabled = &v
}

// GetInventoryEnabled returns the InventoryEnabled field value if set, zero value otherwise.
func (o *CreateCustomRuleRequest) GetInventoryEnabled() bool {
	if o == nil || IsNil(o.InventoryEnabled) {
		var ret bool
		return ret
	}
	return *o.InventoryEnabled
}

// GetInventoryEnabledOk returns a tuple with the InventoryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomRuleRequest) GetInventoryEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InventoryEnabled) {
		return nil, false
	}
	return o.InventoryEnabled, true
}

// HasInventoryEnabled returns a boolean if a field has been set.
func (o *CreateCustomRuleRequest) HasInventoryEnabled() bool {
	if o != nil && !IsNil(o.InventoryEnabled) {
		return true
	}

	return false
}

// SetInventoryEnabled gets a reference to the given bool and assigns it to the InventoryEnabled field.
func (o *CreateCustomRuleRequest) SetInventoryEnabled(v bool) {
	o.InventoryEnabled = &v
}

// GetTagIds returns the TagIds field value if set, zero value otherwise.
func (o *CreateCustomRuleRequest) GetTagIds() []string {
	if o == nil || IsNil(o.TagIds) {
		var ret []string
		return ret
	}
	return o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCustomRuleRequest) GetTagIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TagIds) {
		return nil, false
	}
	return o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *CreateCustomRuleRequest) HasTagIds() bool {
	if o != nil && !IsNil(o.TagIds) {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *CreateCustomRuleRequest) SetTagIds(v []string) {
	o.TagIds = v
}

func (o CreateCustomRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCustomRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	if !IsNil(o.DastEnabled) {
		toSerialize["dastEnabled"] = o.DastEnabled
	}
	if !IsNil(o.InventoryEnabled) {
		toSerialize["inventoryEnabled"] = o.InventoryEnabled
	}
	if !IsNil(o.TagIds) {
		toSerialize["tagIds"] = o.TagIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateCustomRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCustomRuleRequest := _CreateCustomRuleRequest{}

	err = json.Unmarshal(data, &varCreateCustomRuleRequest)

	if err != nil {
		return err
	}

	*o = CreateCustomRuleRequest(varCreateCustomRuleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "dastEnabled")
		delete(additionalProperties, "inventoryEnabled")
		delete(additionalProperties, "tagIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateCustomRuleRequest struct {
	value *CreateCustomRuleRequest
	isSet bool
}

func (v NullableCreateCustomRuleRequest) Get() *CreateCustomRuleRequest {
	return v.value
}

func (v *NullableCreateCustomRuleRequest) Set(val *CreateCustomRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCustomRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCustomRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCustomRuleRequest(val *CreateCustomRuleRequest) *NullableCreateCustomRuleRequest {
	return &NullableCreateCustomRuleRequest{value: val, isSet: true}
}

func (v NullableCreateCustomRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCustomRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


