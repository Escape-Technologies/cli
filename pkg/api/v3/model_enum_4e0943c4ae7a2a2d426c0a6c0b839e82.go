/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum4e0943c4ae7a2a2d426c0a6c0b839e82 the model 'Enum4e0943c4ae7a2a2d426c0a6c0b839e82'
type Enum4e0943c4ae7a2a2d426c0a6c0b839e82 string

// List of Enum_4e0943c4ae7a2a2d426c0a6c0b839e82
const (
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_CONNECT Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "CONNECT"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_DELETE Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "DELETE"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_GET Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "GET"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_HEAD Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "HEAD"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_OPTIONS Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "OPTIONS"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_PATCH Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "PATCH"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_POST Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "POST"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_PUT Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "PUT"
	ENUM4E0943C4AE7A2A2D426C0A6C0B839E82_TRACE Enum4e0943c4ae7a2a2d426c0a6c0b839e82 = "TRACE"
)

// All allowed values of Enum4e0943c4ae7a2a2d426c0a6c0b839e82 enum
var AllowedEnum4e0943c4ae7a2a2d426c0a6c0b839e82EnumValues = []Enum4e0943c4ae7a2a2d426c0a6c0b839e82{
	"CONNECT",
	"DELETE",
	"GET",
	"HEAD",
	"OPTIONS",
	"PATCH",
	"POST",
	"PUT",
	"TRACE",
}

func (v *Enum4e0943c4ae7a2a2d426c0a6c0b839e82) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum4e0943c4ae7a2a2d426c0a6c0b839e82(value)
	for _, existing := range AllowedEnum4e0943c4ae7a2a2d426c0a6c0b839e82EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum4e0943c4ae7a2a2d426c0a6c0b839e82", value)
}

// NewEnum4e0943c4ae7a2a2d426c0a6c0b839e82FromValue returns a pointer to a valid Enum4e0943c4ae7a2a2d426c0a6c0b839e82
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum4e0943c4ae7a2a2d426c0a6c0b839e82FromValue(v string) (*Enum4e0943c4ae7a2a2d426c0a6c0b839e82, error) {
	ev := Enum4e0943c4ae7a2a2d426c0a6c0b839e82(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum4e0943c4ae7a2a2d426c0a6c0b839e82: valid values are %v", v, AllowedEnum4e0943c4ae7a2a2d426c0a6c0b839e82EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum4e0943c4ae7a2a2d426c0a6c0b839e82) IsValid() bool {
	for _, existing := range AllowedEnum4e0943c4ae7a2a2d426c0a6c0b839e82EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_4e0943c4ae7a2a2d426c0a6c0b839e82 value
func (v Enum4e0943c4ae7a2a2d426c0a6c0b839e82) Ptr() *Enum4e0943c4ae7a2a2d426c0a6c0b839e82 {
	return &v
}

type NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82 struct {
	value *Enum4e0943c4ae7a2a2d426c0a6c0b839e82
	isSet bool
}

func (v NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) Get() *Enum4e0943c4ae7a2a2d426c0a6c0b839e82 {
	return v.value
}

func (v *NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) Set(val *Enum4e0943c4ae7a2a2d426c0a6c0b839e82) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82(val *Enum4e0943c4ae7a2a2d426c0a6c0b839e82) *NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82 {
	return &NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82{value: val, isSet: true}
}

func (v NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum4e0943c4ae7a2a2d426c0a6c0b839e82) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

