/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMITEMSPROPERTIESKIND the model 'ENUMITEMSPROPERTIESKIND'
type ENUMITEMSPROPERTIESKIND string

// List of ENUM_ITEMS_PROPERTIES_KIND
const (
	ENUMITEMSPROPERTIESKIND_ASSET_FOUND ENUMITEMSPROPERTIESKIND = "ASSET_FOUND"
	ENUMITEMSPROPERTIESKIND_ASSET_IGNORED ENUMITEMSPROPERTIESKIND = "ASSET_IGNORED"
	ENUMITEMSPROPERTIESKIND_ASSET_UPDATED ENUMITEMSPROPERTIESKIND = "ASSET_UPDATED"
	ENUMITEMSPROPERTIESKIND_COMMENT ENUMITEMSPROPERTIESKIND = "COMMENT"
	ENUMITEMSPROPERTIESKIND_ISSUE_FOUND ENUMITEMSPROPERTIESKIND = "ISSUE_FOUND"
	ENUMITEMSPROPERTIESKIND_ISSUE_STATUS_CHANGED ENUMITEMSPROPERTIESKIND = "ISSUE_STATUS_CHANGED"
	ENUMITEMSPROPERTIESKIND_OWNERS_NOTIFIED ENUMITEMSPROPERTIESKIND = "OWNERS_NOTIFIED"
)

// All allowed values of ENUMITEMSPROPERTIESKIND enum
var AllowedENUMITEMSPROPERTIESKINDEnumValues = []ENUMITEMSPROPERTIESKIND{
	"ASSET_FOUND",
	"ASSET_IGNORED",
	"ASSET_UPDATED",
	"COMMENT",
	"ISSUE_FOUND",
	"ISSUE_STATUS_CHANGED",
	"OWNERS_NOTIFIED",
}

func (v *ENUMITEMSPROPERTIESKIND) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMITEMSPROPERTIESKIND(value)
	for _, existing := range AllowedENUMITEMSPROPERTIESKINDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMITEMSPROPERTIESKIND", value)
}

// NewENUMITEMSPROPERTIESKINDFromValue returns a pointer to a valid ENUMITEMSPROPERTIESKIND
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMITEMSPROPERTIESKINDFromValue(v string) (*ENUMITEMSPROPERTIESKIND, error) {
	ev := ENUMITEMSPROPERTIESKIND(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMITEMSPROPERTIESKIND: valid values are %v", v, AllowedENUMITEMSPROPERTIESKINDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMITEMSPROPERTIESKIND) IsValid() bool {
	for _, existing := range AllowedENUMITEMSPROPERTIESKINDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_ITEMS_PROPERTIES_KIND value
func (v ENUMITEMSPROPERTIESKIND) Ptr() *ENUMITEMSPROPERTIESKIND {
	return &v
}

type NullableENUMITEMSPROPERTIESKIND struct {
	value *ENUMITEMSPROPERTIESKIND
	isSet bool
}

func (v NullableENUMITEMSPROPERTIESKIND) Get() *ENUMITEMSPROPERTIESKIND {
	return v.value
}

func (v *NullableENUMITEMSPROPERTIESKIND) Set(val *ENUMITEMSPROPERTIESKIND) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMITEMSPROPERTIESKIND) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMITEMSPROPERTIESKIND) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMITEMSPROPERTIESKIND(val *ENUMITEMSPROPERTIESKIND) *NullableENUMITEMSPROPERTIESKIND {
	return &NullableENUMITEMSPROPERTIESKIND{value: val, isSet: true}
}

func (v NullableENUMITEMSPROPERTIESKIND) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMITEMSPROPERTIESKIND) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

