/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumFILL the model 'EnumFILL'
type EnumFILL string

// List of Enum_FILL
const (
	ENUMFILL_FILL EnumFILL = "fill"
)

// All allowed values of EnumFILL enum
var AllowedEnumFILLEnumValues = []EnumFILL{
	"fill",
}

func (v *EnumFILL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFILL(value)
	for _, existing := range AllowedEnumFILLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFILL", value)
}

// NewEnumFILLFromValue returns a pointer to a valid EnumFILL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFILLFromValue(v string) (*EnumFILL, error) {
	ev := EnumFILL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFILL: valid values are %v", v, AllowedEnumFILLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFILL) IsValid() bool {
	for _, existing := range AllowedEnumFILLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_FILL value
func (v EnumFILL) Ptr() *EnumFILL {
	return &v
}

type NullableEnumFILL struct {
	value *EnumFILL
	isSet bool
}

func (v NullableEnumFILL) Get() *EnumFILL {
	return v.value
}

func (v *NullableEnumFILL) Set(val *EnumFILL) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFILL) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFILL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFILL(val *EnumFILL) *NullableEnumFILL {
	return &NullableEnumFILL{value: val, isSet: true}
}

func (v NullableEnumFILL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFILL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

