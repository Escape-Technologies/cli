/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomRuleRuleOneOf1DetectInnerOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomRuleRuleOneOf1DetectInnerOneOf2{}

// CustomRuleRuleOneOf1DetectInnerOneOf2 struct for CustomRuleRuleOneOf1DetectInnerOneOf2
type CustomRuleRuleOneOf1DetectInnerOneOf2 struct {
	Contains *string `json:"contains,omitempty"`
	If ENUMPAGETEXT `json:"if"`
	AdditionalProperties map[string]interface{}
}

type _CustomRuleRuleOneOf1DetectInnerOneOf2 CustomRuleRuleOneOf1DetectInnerOneOf2

// NewCustomRuleRuleOneOf1DetectInnerOneOf2 instantiates a new CustomRuleRuleOneOf1DetectInnerOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomRuleRuleOneOf1DetectInnerOneOf2(if_ ENUMPAGETEXT) *CustomRuleRuleOneOf1DetectInnerOneOf2 {
	this := CustomRuleRuleOneOf1DetectInnerOneOf2{}
	this.If = if_
	return &this
}

// NewCustomRuleRuleOneOf1DetectInnerOneOf2WithDefaults instantiates a new CustomRuleRuleOneOf1DetectInnerOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomRuleRuleOneOf1DetectInnerOneOf2WithDefaults() *CustomRuleRuleOneOf1DetectInnerOneOf2 {
	this := CustomRuleRuleOneOf1DetectInnerOneOf2{}
	return &this
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) GetContains() string {
	if o == nil || IsNil(o.Contains) {
		var ret string
		return ret
	}
	return *o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) GetContainsOk() (*string, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given string and assigns it to the Contains field.
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) SetContains(v string) {
	o.Contains = &v
}

// GetIf returns the If field value
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) GetIf() ENUMPAGETEXT {
	if o == nil {
		var ret ENUMPAGETEXT
		return ret
	}

	return o.If
}

// GetIfOk returns a tuple with the If field value
// and a boolean to check if the value has been set.
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) GetIfOk() (*ENUMPAGETEXT, bool) {
	if o == nil {
		return nil, false
	}
	return &o.If, true
}

// SetIf sets field value
func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) SetIf(v ENUMPAGETEXT) {
	o.If = v
}

func (o CustomRuleRuleOneOf1DetectInnerOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomRuleRuleOneOf1DetectInnerOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	toSerialize["if"] = o.If

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomRuleRuleOneOf1DetectInnerOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"if",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomRuleRuleOneOf1DetectInnerOneOf2 := _CustomRuleRuleOneOf1DetectInnerOneOf2{}

	err = json.Unmarshal(data, &varCustomRuleRuleOneOf1DetectInnerOneOf2)

	if err != nil {
		return err
	}

	*o = CustomRuleRuleOneOf1DetectInnerOneOf2(varCustomRuleRuleOneOf1DetectInnerOneOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "contains")
		delete(additionalProperties, "if")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomRuleRuleOneOf1DetectInnerOneOf2 struct {
	value *CustomRuleRuleOneOf1DetectInnerOneOf2
	isSet bool
}

func (v NullableCustomRuleRuleOneOf1DetectInnerOneOf2) Get() *CustomRuleRuleOneOf1DetectInnerOneOf2 {
	return v.value
}

func (v *NullableCustomRuleRuleOneOf1DetectInnerOneOf2) Set(val *CustomRuleRuleOneOf1DetectInnerOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomRuleRuleOneOf1DetectInnerOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomRuleRuleOneOf1DetectInnerOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomRuleRuleOneOf1DetectInnerOneOf2(val *CustomRuleRuleOneOf1DetectInnerOneOf2) *NullableCustomRuleRuleOneOf1DetectInnerOneOf2 {
	return &NullableCustomRuleRuleOneOf1DetectInnerOneOf2{value: val, isSet: true}
}

func (v NullableCustomRuleRuleOneOf1DetectInnerOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomRuleRuleOneOf1DetectInnerOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


