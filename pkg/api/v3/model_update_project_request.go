/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateProjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectRequest{}

// UpdateProjectRequest struct for UpdateProjectRequest
type UpdateProjectRequest struct {
	Project UpdateProjectRequestProject `json:"project"`
	// The slug of the project
	Slug *string `json:"slug,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProjectRequest UpdateProjectRequest

// NewUpdateProjectRequest instantiates a new UpdateProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectRequest(project UpdateProjectRequestProject) *UpdateProjectRequest {
	this := UpdateProjectRequest{}
	this.Project = project
	return &this
}

// NewUpdateProjectRequestWithDefaults instantiates a new UpdateProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectRequestWithDefaults() *UpdateProjectRequest {
	this := UpdateProjectRequest{}
	return &this
}

// GetProject returns the Project field value
func (o *UpdateProjectRequest) GetProject() UpdateProjectRequestProject {
	if o == nil {
		var ret UpdateProjectRequestProject
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *UpdateProjectRequest) GetProjectOk() (*UpdateProjectRequestProject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *UpdateProjectRequest) SetProject(v UpdateProjectRequestProject) {
	o.Project = v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *UpdateProjectRequest) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectRequest) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *UpdateProjectRequest) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *UpdateProjectRequest) SetSlug(v string) {
	o.Slug = &v
}

func (o UpdateProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProjectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProjectRequest := _UpdateProjectRequest{}

	err = json.Unmarshal(data, &varUpdateProjectRequest)

	if err != nil {
		return err
	}

	*o = UpdateProjectRequest(varUpdateProjectRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "project")
		delete(additionalProperties, "slug")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProjectRequest struct {
	value *UpdateProjectRequest
	isSet bool
}

func (v NullableUpdateProjectRequest) Get() *UpdateProjectRequest {
	return v.value
}

func (v *NullableUpdateProjectRequest) Set(val *UpdateProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectRequest(val *UpdateProjectRequest) *NullableUpdateProjectRequest {
	return &NullableUpdateProjectRequest{value: val, isSet: true}
}

func (v NullableUpdateProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


