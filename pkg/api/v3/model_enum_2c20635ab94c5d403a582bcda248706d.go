/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// Enum2c20635ab94c5d403a582bcda248706d The initiator of the scan
type Enum2c20635ab94c5d403a582bcda248706d string

// List of Enum_2c20635ab94c5d403a582bcda248706d
const (
	ENUM2C20635AB94C5D403A582BCDA248706D_APPLICATION_CREATION Enum2c20635ab94c5d403a582bcda248706d = "APPLICATION_CREATION"
	ENUM2C20635AB94C5D403A582BCDA248706D_CI Enum2c20635ab94c5d403a582bcda248706d = "CI"
	ENUM2C20635AB94C5D403A582BCDA248706D_INVENTORY Enum2c20635ab94c5d403a582bcda248706d = "INVENTORY"
	ENUM2C20635AB94C5D403A582BCDA248706D_MANUAL Enum2c20635ab94c5d403a582bcda248706d = "MANUAL"
	ENUM2C20635AB94C5D403A582BCDA248706D_SCHEDULED Enum2c20635ab94c5d403a582bcda248706d = "SCHEDULED"
	ENUM2C20635AB94C5D403A582BCDA248706D_UNKNOWN Enum2c20635ab94c5d403a582bcda248706d = "UNKNOWN"
)

// All allowed values of Enum2c20635ab94c5d403a582bcda248706d enum
var AllowedEnum2c20635ab94c5d403a582bcda248706dEnumValues = []Enum2c20635ab94c5d403a582bcda248706d{
	"APPLICATION_CREATION",
	"CI",
	"INVENTORY",
	"MANUAL",
	"SCHEDULED",
	"UNKNOWN",
}

func (v *Enum2c20635ab94c5d403a582bcda248706d) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum2c20635ab94c5d403a582bcda248706d(value)
	for _, existing := range AllowedEnum2c20635ab94c5d403a582bcda248706dEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum2c20635ab94c5d403a582bcda248706d", value)
}

// NewEnum2c20635ab94c5d403a582bcda248706dFromValue returns a pointer to a valid Enum2c20635ab94c5d403a582bcda248706d
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum2c20635ab94c5d403a582bcda248706dFromValue(v string) (*Enum2c20635ab94c5d403a582bcda248706d, error) {
	ev := Enum2c20635ab94c5d403a582bcda248706d(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum2c20635ab94c5d403a582bcda248706d: valid values are %v", v, AllowedEnum2c20635ab94c5d403a582bcda248706dEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum2c20635ab94c5d403a582bcda248706d) IsValid() bool {
	for _, existing := range AllowedEnum2c20635ab94c5d403a582bcda248706dEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_2c20635ab94c5d403a582bcda248706d value
func (v Enum2c20635ab94c5d403a582bcda248706d) Ptr() *Enum2c20635ab94c5d403a582bcda248706d {
	return &v
}

type NullableEnum2c20635ab94c5d403a582bcda248706d struct {
	value *Enum2c20635ab94c5d403a582bcda248706d
	isSet bool
}

func (v NullableEnum2c20635ab94c5d403a582bcda248706d) Get() *Enum2c20635ab94c5d403a582bcda248706d {
	return v.value
}

func (v *NullableEnum2c20635ab94c5d403a582bcda248706d) Set(val *Enum2c20635ab94c5d403a582bcda248706d) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum2c20635ab94c5d403a582bcda248706d) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum2c20635ab94c5d403a582bcda248706d) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum2c20635ab94c5d403a582bcda248706d(val *Enum2c20635ab94c5d403a582bcda248706d) *NullableEnum2c20635ab94c5d403a582bcda248706d {
	return &NullableEnum2c20635ab94c5d403a582bcda248706d{value: val, isSet: true}
}

func (v NullableEnum2c20635ab94c5d403a582bcda248706d) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum2c20635ab94c5d403a582bcda248706d) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

