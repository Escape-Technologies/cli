/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// EnumIPV4 the model 'EnumIPV4'
type EnumIPV4 string

// List of Enum_IPV4
const (
	ENUMIPV4_IPV4 EnumIPV4 = "IPV4"
)

// All allowed values of EnumIPV4 enum
var AllowedEnumIPV4EnumValues = []EnumIPV4{
	"IPV4",
}

func (v *EnumIPV4) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIPV4(value)
	for _, existing := range AllowedEnumIPV4EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumIPV4", value)
}

// NewEnumIPV4FromValue returns a pointer to a valid EnumIPV4
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIPV4FromValue(v string) (*EnumIPV4, error) {
	ev := EnumIPV4(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIPV4: valid values are %v", v, AllowedEnumIPV4EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIPV4) IsValid() bool {
	for _, existing := range AllowedEnumIPV4EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_IPV4 value
func (v EnumIPV4) Ptr() *EnumIPV4 {
	return &v
}

type NullableEnumIPV4 struct {
	value *EnumIPV4
	isSet bool
}

func (v NullableEnumIPV4) Get() *EnumIPV4 {
	return v.value
}

func (v *NullableEnumIPV4) Set(val *EnumIPV4) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIPV4) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIPV4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIPV4(val *EnumIPV4) *NullableEnumIPV4 {
	return &NullableEnumIPV4{value: val, isSet: true}
}

func (v NullableEnumIPV4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIPV4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

