/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRoleBindingsRequestBindingsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRoleBindingsRequestBindingsInner{}

// CreateRoleBindingsRequestBindingsInner struct for CreateRoleBindingsRequestBindingsInner
type CreateRoleBindingsRequestBindingsInner struct {
	// The role ID
	RoleId string `json:"roleId"`
	// The project ID
	ProjectId *string `json:"projectId,omitempty"`
	// The user ID
	UserId string `json:"userId"`
	AdditionalProperties map[string]interface{}
}

type _CreateRoleBindingsRequestBindingsInner CreateRoleBindingsRequestBindingsInner

// NewCreateRoleBindingsRequestBindingsInner instantiates a new CreateRoleBindingsRequestBindingsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRoleBindingsRequestBindingsInner(roleId string, userId string) *CreateRoleBindingsRequestBindingsInner {
	this := CreateRoleBindingsRequestBindingsInner{}
	this.RoleId = roleId
	this.UserId = userId
	return &this
}

// NewCreateRoleBindingsRequestBindingsInnerWithDefaults instantiates a new CreateRoleBindingsRequestBindingsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRoleBindingsRequestBindingsInnerWithDefaults() *CreateRoleBindingsRequestBindingsInner {
	this := CreateRoleBindingsRequestBindingsInner{}
	return &this
}

// GetRoleId returns the RoleId field value
func (o *CreateRoleBindingsRequestBindingsInner) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *CreateRoleBindingsRequestBindingsInner) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *CreateRoleBindingsRequestBindingsInner) SetRoleId(v string) {
	o.RoleId = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CreateRoleBindingsRequestBindingsInner) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleBindingsRequestBindingsInner) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CreateRoleBindingsRequestBindingsInner) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *CreateRoleBindingsRequestBindingsInner) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetUserId returns the UserId field value
func (o *CreateRoleBindingsRequestBindingsInner) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateRoleBindingsRequestBindingsInner) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateRoleBindingsRequestBindingsInner) SetUserId(v string) {
	o.UserId = v
}

func (o CreateRoleBindingsRequestBindingsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRoleBindingsRequestBindingsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleId"] = o.RoleId
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["userId"] = o.UserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRoleBindingsRequestBindingsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleId",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRoleBindingsRequestBindingsInner := _CreateRoleBindingsRequestBindingsInner{}

	err = json.Unmarshal(data, &varCreateRoleBindingsRequestBindingsInner)

	if err != nil {
		return err
	}

	*o = CreateRoleBindingsRequestBindingsInner(varCreateRoleBindingsRequestBindingsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "roleId")
		delete(additionalProperties, "projectId")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRoleBindingsRequestBindingsInner struct {
	value *CreateRoleBindingsRequestBindingsInner
	isSet bool
}

func (v NullableCreateRoleBindingsRequestBindingsInner) Get() *CreateRoleBindingsRequestBindingsInner {
	return v.value
}

func (v *NullableCreateRoleBindingsRequestBindingsInner) Set(val *CreateRoleBindingsRequestBindingsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoleBindingsRequestBindingsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoleBindingsRequestBindingsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoleBindingsRequestBindingsInner(val *CreateRoleBindingsRequestBindingsInner) *NullableCreateRoleBindingsRequestBindingsInner {
	return &NullableCreateRoleBindingsRequestBindingsInner{value: val, isSet: true}
}

func (v NullableCreateRoleBindingsRequestBindingsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoleBindingsRequestBindingsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


