/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL The level of the event
type ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL string

// List of ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_LEVEL
const (
	ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL_DEBUG ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL = "DEBUG"
	ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL_ERROR ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL = "ERROR"
	ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL_INFO ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL = "INFO"
	ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL_WARNING ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL = "WARNING"
)

// All allowed values of ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL enum
var AllowedENUMPROPERTIESDATAITEMSPROPERTIESLEVELEnumValues = []ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL{
	"DEBUG",
	"ERROR",
	"INFO",
	"WARNING",
}

func (v *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL(value)
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESLEVELEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL", value)
}

// NewENUMPROPERTIESDATAITEMSPROPERTIESLEVELFromValue returns a pointer to a valid ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMPROPERTIESDATAITEMSPROPERTIESLEVELFromValue(v string) (*ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL, error) {
	ev := ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL: valid values are %v", v, AllowedENUMPROPERTIESDATAITEMSPROPERTIESLEVELEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) IsValid() bool {
	for _, existing := range AllowedENUMPROPERTIESDATAITEMSPROPERTIESLEVELEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_PROPERTIES_DATA_ITEMS_PROPERTIES_LEVEL value
func (v ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) Ptr() *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL {
	return &v
}

type NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL struct {
	value *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL
	isSet bool
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) Get() *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL {
	return v.value
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) Set(val *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL(val *ENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) *NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL {
	return &NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL{value: val, isSet: true}
}

func (v NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMPROPERTIESDATAITEMSPROPERTIESLEVEL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

