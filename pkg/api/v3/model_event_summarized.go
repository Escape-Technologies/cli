/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the EventSummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSummarized{}

// EventSummarized Summarized information about an event
type EventSummarized struct {
	// The id of the event
	Id string `json:"id"`
	// The date and time the event was created
	CreatedAt string `json:"createdAt"`
	// The title of the event
	Title string `json:"title"`
	// The level of the event
	Level string `json:"level"`
	// The stage of the event
	Stage string `json:"stage"`
	AdditionalProperties map[string]interface{}
}

type _EventSummarized EventSummarized

// NewEventSummarized instantiates a new EventSummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSummarized(id string, createdAt string, title string, level string, stage string) *EventSummarized {
	this := EventSummarized{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Title = title
	this.Level = level
	this.Stage = stage
	return &this
}

// NewEventSummarizedWithDefaults instantiates a new EventSummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSummarizedWithDefaults() *EventSummarized {
	this := EventSummarized{}
	return &this
}

// GetId returns the Id field value
func (o *EventSummarized) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventSummarized) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventSummarized) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EventSummarized) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EventSummarized) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EventSummarized) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetTitle returns the Title field value
func (o *EventSummarized) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EventSummarized) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EventSummarized) SetTitle(v string) {
	o.Title = v
}

// GetLevel returns the Level field value
func (o *EventSummarized) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *EventSummarized) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *EventSummarized) SetLevel(v string) {
	o.Level = v
}

// GetStage returns the Stage field value
func (o *EventSummarized) GetStage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *EventSummarized) GetStageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *EventSummarized) SetStage(v string) {
	o.Stage = v
}

func (o EventSummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["title"] = o.Title
	toSerialize["level"] = o.Level
	toSerialize["stage"] = o.Stage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventSummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"title",
		"level",
		"stage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventSummarized := _EventSummarized{}

	err = json.Unmarshal(data, &varEventSummarized)

	if err != nil {
		return err
	}

	*o = EventSummarized(varEventSummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "title")
		delete(additionalProperties, "level")
		delete(additionalProperties, "stage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventSummarized struct {
	value *EventSummarized
	isSet bool
}

func (v NullableEventSummarized) Get() *EventSummarized {
	return v.value
}

func (v *NullableEventSummarized) Set(val *EventSummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSummarized(val *EventSummarized) *NullableEventSummarized {
	return &NullableEventSummarized{value: val, isSet: true}
}

func (v NullableEventSummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


