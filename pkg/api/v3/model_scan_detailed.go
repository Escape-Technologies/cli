/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ScanDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanDetailed{}

// ScanDetailed Detailed information about a scan
type ScanDetailed struct {
	// The id of the scan
	Id string `json:"id"`
	// The status of the scan
	Status string `json:"status"`
	// The date and time the scan was created
	CreatedAt string `json:"createdAt"`
	// The date and time the scan was updated
	UpdatedAt string `json:"updatedAt"`
	// The date and time the scan was finished
	FinishedAt *string `json:"finishedAt,omitempty"`
	// The score of the scan
	Score *float32 `json:"score,omitempty"`
	// The duration of the scan
	Duration float32 `json:"duration"`
	// The progress ratio of the scan
	ProgressRatio float32 `json:"progressRatio"`
	// The initiator of the scan
	Initiator string `json:"initiator"`
	// The kind of the scan
	Kind string `json:"kind"`
	// The id of the profile of the scan
	ProfileId string `json:"profileId"`
	// The id of the organization of the scan
	OrganizationId string `json:"organizationId"`
	CommitHash *string `json:"commitHash,omitempty"`
	CommitBranch *string `json:"commitBranch,omitempty"`
	CommitAuthor *string `json:"commitAuthor,omitempty"`
	CommitLink *string `json:"commitLink,omitempty"`
	CommitAuthorProfilePictureLink *string `json:"commitAuthorProfilePictureLink,omitempty"`
	Links ScanDetailedLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _ScanDetailed ScanDetailed

// NewScanDetailed instantiates a new ScanDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanDetailed(id string, status string, createdAt string, updatedAt string, duration float32, progressRatio float32, initiator string, kind string, profileId string, organizationId string, links ScanDetailedLinks) *ScanDetailed {
	this := ScanDetailed{}
	this.Id = id
	this.Status = status
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Duration = duration
	this.ProgressRatio = progressRatio
	this.Initiator = initiator
	this.Kind = kind
	this.ProfileId = profileId
	this.OrganizationId = organizationId
	this.Links = links
	return &this
}

// NewScanDetailedWithDefaults instantiates a new ScanDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanDetailedWithDefaults() *ScanDetailed {
	this := ScanDetailed{}
	return &this
}

// GetId returns the Id field value
func (o *ScanDetailed) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScanDetailed) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *ScanDetailed) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ScanDetailed) SetStatus(v string) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ScanDetailed) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ScanDetailed) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ScanDetailed) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ScanDetailed) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *ScanDetailed) GetFinishedAt() string {
	if o == nil || IsNil(o.FinishedAt) {
		var ret string
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetFinishedAtOk() (*string, bool) {
	if o == nil || IsNil(o.FinishedAt) {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *ScanDetailed) HasFinishedAt() bool {
	if o != nil && !IsNil(o.FinishedAt) {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given string and assigns it to the FinishedAt field.
func (o *ScanDetailed) SetFinishedAt(v string) {
	o.FinishedAt = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *ScanDetailed) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *ScanDetailed) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *ScanDetailed) SetScore(v float32) {
	o.Score = &v
}

// GetDuration returns the Duration field value
func (o *ScanDetailed) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetDurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *ScanDetailed) SetDuration(v float32) {
	o.Duration = v
}

// GetProgressRatio returns the ProgressRatio field value
func (o *ScanDetailed) GetProgressRatio() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProgressRatio
}

// GetProgressRatioOk returns a tuple with the ProgressRatio field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetProgressRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgressRatio, true
}

// SetProgressRatio sets field value
func (o *ScanDetailed) SetProgressRatio(v float32) {
	o.ProgressRatio = v
}

// GetInitiator returns the Initiator field value
func (o *ScanDetailed) GetInitiator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetInitiatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Initiator, true
}

// SetInitiator sets field value
func (o *ScanDetailed) SetInitiator(v string) {
	o.Initiator = v
}

// GetKind returns the Kind field value
func (o *ScanDetailed) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ScanDetailed) SetKind(v string) {
	o.Kind = v
}

// GetProfileId returns the ProfileId field value
func (o *ScanDetailed) GetProfileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *ScanDetailed) SetProfileId(v string) {
	o.ProfileId = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ScanDetailed) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ScanDetailed) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ScanDetailed) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ScanDetailed) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ScanDetailed) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetCommitBranch returns the CommitBranch field value if set, zero value otherwise.
func (o *ScanDetailed) GetCommitBranch() string {
	if o == nil || IsNil(o.CommitBranch) {
		var ret string
		return ret
	}
	return *o.CommitBranch
}

// GetCommitBranchOk returns a tuple with the CommitBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCommitBranchOk() (*string, bool) {
	if o == nil || IsNil(o.CommitBranch) {
		return nil, false
	}
	return o.CommitBranch, true
}

// HasCommitBranch returns a boolean if a field has been set.
func (o *ScanDetailed) HasCommitBranch() bool {
	if o != nil && !IsNil(o.CommitBranch) {
		return true
	}

	return false
}

// SetCommitBranch gets a reference to the given string and assigns it to the CommitBranch field.
func (o *ScanDetailed) SetCommitBranch(v string) {
	o.CommitBranch = &v
}

// GetCommitAuthor returns the CommitAuthor field value if set, zero value otherwise.
func (o *ScanDetailed) GetCommitAuthor() string {
	if o == nil || IsNil(o.CommitAuthor) {
		var ret string
		return ret
	}
	return *o.CommitAuthor
}

// GetCommitAuthorOk returns a tuple with the CommitAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCommitAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.CommitAuthor) {
		return nil, false
	}
	return o.CommitAuthor, true
}

// HasCommitAuthor returns a boolean if a field has been set.
func (o *ScanDetailed) HasCommitAuthor() bool {
	if o != nil && !IsNil(o.CommitAuthor) {
		return true
	}

	return false
}

// SetCommitAuthor gets a reference to the given string and assigns it to the CommitAuthor field.
func (o *ScanDetailed) SetCommitAuthor(v string) {
	o.CommitAuthor = &v
}

// GetCommitLink returns the CommitLink field value if set, zero value otherwise.
func (o *ScanDetailed) GetCommitLink() string {
	if o == nil || IsNil(o.CommitLink) {
		var ret string
		return ret
	}
	return *o.CommitLink
}

// GetCommitLinkOk returns a tuple with the CommitLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCommitLinkOk() (*string, bool) {
	if o == nil || IsNil(o.CommitLink) {
		return nil, false
	}
	return o.CommitLink, true
}

// HasCommitLink returns a boolean if a field has been set.
func (o *ScanDetailed) HasCommitLink() bool {
	if o != nil && !IsNil(o.CommitLink) {
		return true
	}

	return false
}

// SetCommitLink gets a reference to the given string and assigns it to the CommitLink field.
func (o *ScanDetailed) SetCommitLink(v string) {
	o.CommitLink = &v
}

// GetCommitAuthorProfilePictureLink returns the CommitAuthorProfilePictureLink field value if set, zero value otherwise.
func (o *ScanDetailed) GetCommitAuthorProfilePictureLink() string {
	if o == nil || IsNil(o.CommitAuthorProfilePictureLink) {
		var ret string
		return ret
	}
	return *o.CommitAuthorProfilePictureLink
}

// GetCommitAuthorProfilePictureLinkOk returns a tuple with the CommitAuthorProfilePictureLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetCommitAuthorProfilePictureLinkOk() (*string, bool) {
	if o == nil || IsNil(o.CommitAuthorProfilePictureLink) {
		return nil, false
	}
	return o.CommitAuthorProfilePictureLink, true
}

// HasCommitAuthorProfilePictureLink returns a boolean if a field has been set.
func (o *ScanDetailed) HasCommitAuthorProfilePictureLink() bool {
	if o != nil && !IsNil(o.CommitAuthorProfilePictureLink) {
		return true
	}

	return false
}

// SetCommitAuthorProfilePictureLink gets a reference to the given string and assigns it to the CommitAuthorProfilePictureLink field.
func (o *ScanDetailed) SetCommitAuthorProfilePictureLink(v string) {
	o.CommitAuthorProfilePictureLink = &v
}

// GetLinks returns the Links field value
func (o *ScanDetailed) GetLinks() ScanDetailedLinks {
	if o == nil {
		var ret ScanDetailedLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ScanDetailed) GetLinksOk() (*ScanDetailedLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ScanDetailed) SetLinks(v ScanDetailedLinks) {
	o.Links = v
}

func (o ScanDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.FinishedAt) {
		toSerialize["finishedAt"] = o.FinishedAt
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	toSerialize["duration"] = o.Duration
	toSerialize["progressRatio"] = o.ProgressRatio
	toSerialize["initiator"] = o.Initiator
	toSerialize["kind"] = o.Kind
	toSerialize["profileId"] = o.ProfileId
	toSerialize["organizationId"] = o.OrganizationId
	if !IsNil(o.CommitHash) {
		toSerialize["commitHash"] = o.CommitHash
	}
	if !IsNil(o.CommitBranch) {
		toSerialize["commitBranch"] = o.CommitBranch
	}
	if !IsNil(o.CommitAuthor) {
		toSerialize["commitAuthor"] = o.CommitAuthor
	}
	if !IsNil(o.CommitLink) {
		toSerialize["commitLink"] = o.CommitLink
	}
	if !IsNil(o.CommitAuthorProfilePictureLink) {
		toSerialize["commitAuthorProfilePictureLink"] = o.CommitAuthorProfilePictureLink
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScanDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"createdAt",
		"updatedAt",
		"duration",
		"progressRatio",
		"initiator",
		"kind",
		"profileId",
		"organizationId",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScanDetailed := _ScanDetailed{}

	err = json.Unmarshal(data, &varScanDetailed)

	if err != nil {
		return err
	}

	*o = ScanDetailed(varScanDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "finishedAt")
		delete(additionalProperties, "score")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "progressRatio")
		delete(additionalProperties, "initiator")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "profileId")
		delete(additionalProperties, "organizationId")
		delete(additionalProperties, "commitHash")
		delete(additionalProperties, "commitBranch")
		delete(additionalProperties, "commitAuthor")
		delete(additionalProperties, "commitLink")
		delete(additionalProperties, "commitAuthorProfilePictureLink")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScanDetailed struct {
	value *ScanDetailed
	isSet bool
}

func (v NullableScanDetailed) Get() *ScanDetailed {
	return v.value
}

func (v *NullableScanDetailed) Set(val *ScanDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableScanDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableScanDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanDetailed(val *ScanDetailed) *NullableScanDetailed {
	return &NullableScanDetailed{value: val, isSet: true}
}

func (v NullableScanDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


