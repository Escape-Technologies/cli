/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// ENUMREQUESTBODYJSON the model 'ENUMREQUESTBODYJSON'
type ENUMREQUESTBODYJSON string

// List of ENUM_REQUEST_BODY_JSON
const (
	ENUMREQUESTBODYJSON_REQUEST_BODY_JSON ENUMREQUESTBODYJSON = "request.body.json"
)

// All allowed values of ENUMREQUESTBODYJSON enum
var AllowedENUMREQUESTBODYJSONEnumValues = []ENUMREQUESTBODYJSON{
	"request.body.json",
}

func (v *ENUMREQUESTBODYJSON) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ENUMREQUESTBODYJSON(value)
	for _, existing := range AllowedENUMREQUESTBODYJSONEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ENUMREQUESTBODYJSON", value)
}

// NewENUMREQUESTBODYJSONFromValue returns a pointer to a valid ENUMREQUESTBODYJSON
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewENUMREQUESTBODYJSONFromValue(v string) (*ENUMREQUESTBODYJSON, error) {
	ev := ENUMREQUESTBODYJSON(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ENUMREQUESTBODYJSON: valid values are %v", v, AllowedENUMREQUESTBODYJSONEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ENUMREQUESTBODYJSON) IsValid() bool {
	for _, existing := range AllowedENUMREQUESTBODYJSONEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ENUM_REQUEST_BODY_JSON value
func (v ENUMREQUESTBODYJSON) Ptr() *ENUMREQUESTBODYJSON {
	return &v
}

type NullableENUMREQUESTBODYJSON struct {
	value *ENUMREQUESTBODYJSON
	isSet bool
}

func (v NullableENUMREQUESTBODYJSON) Get() *ENUMREQUESTBODYJSON {
	return v.value
}

func (v *NullableENUMREQUESTBODYJSON) Set(val *ENUMREQUESTBODYJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableENUMREQUESTBODYJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableENUMREQUESTBODYJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableENUMREQUESTBODYJSON(val *ENUMREQUESTBODYJSON) *NullableENUMREQUESTBODYJSON {
	return &NullableENUMREQUESTBODYJSON{value: val, isSet: true}
}

func (v NullableENUMREQUESTBODYJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableENUMREQUESTBODYJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

