/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers{}

// ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers struct for ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers
type ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers struct {
	Detect []interface{} `json:"detect"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers

// NewProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers instantiates a new ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers(detect []interface{}) *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers {
	this := ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers{}
	this.Detect = detect
	return &this
}

// NewProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsersWithDefaults instantiates a new ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsersWithDefaults() *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers {
	this := ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers{}
	return &this
}

// GetDetect returns the Detect field value
func (o *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) GetDetect() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Detect
}

// GetDetectOk returns a tuple with the Detect field value
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) GetDetectOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detect, true
}

// SetDetect sets field value
func (o *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) SetDetect(v []interface{}) {
	o.Detect = v
}

func (o ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["detect"] = o.Detect

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detect",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers := _ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers(varProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detect")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers struct {
	value *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers
	isSet bool
}

func (v NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) Get() *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers {
	return v.value
}

func (v *NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) Set(val *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers(val *ProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) *NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers {
	return &NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationSecurityTestsTenantIsolationOtherUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


