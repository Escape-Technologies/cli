/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ProfileDetailedConfigurationInferenceScalarsValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDetailedConfigurationInferenceScalarsValue{}

// ProfileDetailedConfigurationInferenceScalarsValue struct for ProfileDetailedConfigurationInferenceScalarsValue
type ProfileDetailedConfigurationInferenceScalarsValue struct {
	Names []string `json:"names,omitempty"`
	IgnoredNames []string `json:"ignored_names,omitempty"`
	Description *string `json:"description,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	IgnoredPattern *string `json:"ignored_pattern,omitempty"`
	Examples []string `json:"examples,omitempty"`
	Parents []ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS `json:"parents,omitempty"`
	Sensitivity *ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY `json:"sensitivity,omitempty"`
	Strategy *ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY `json:"strategy,omitempty"`
	RaiseOnCommit *bool `json:"raise_on_commit,omitempty"`
	RaiseOnExposure *bool `json:"raise_on_exposure,omitempty"`
	IsSourceable *bool `json:"is_sourceable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProfileDetailedConfigurationInferenceScalarsValue ProfileDetailedConfigurationInferenceScalarsValue

// NewProfileDetailedConfigurationInferenceScalarsValue instantiates a new ProfileDetailedConfigurationInferenceScalarsValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDetailedConfigurationInferenceScalarsValue() *ProfileDetailedConfigurationInferenceScalarsValue {
	this := ProfileDetailedConfigurationInferenceScalarsValue{}
	return &this
}

// NewProfileDetailedConfigurationInferenceScalarsValueWithDefaults instantiates a new ProfileDetailedConfigurationInferenceScalarsValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDetailedConfigurationInferenceScalarsValueWithDefaults() *ProfileDetailedConfigurationInferenceScalarsValue {
	this := ProfileDetailedConfigurationInferenceScalarsValue{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetNames(v []string) {
	o.Names = v
}

// GetIgnoredNames returns the IgnoredNames field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIgnoredNames() []string {
	if o == nil || IsNil(o.IgnoredNames) {
		var ret []string
		return ret
	}
	return o.IgnoredNames
}

// GetIgnoredNamesOk returns a tuple with the IgnoredNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIgnoredNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredNames) {
		return nil, false
	}
	return o.IgnoredNames, true
}

// HasIgnoredNames returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasIgnoredNames() bool {
	if o != nil && !IsNil(o.IgnoredNames) {
		return true
	}

	return false
}

// SetIgnoredNames gets a reference to the given []string and assigns it to the IgnoredNames field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetIgnoredNames(v []string) {
	o.IgnoredNames = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetDescription(v string) {
	o.Description = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetPattern() string {
	if o == nil || IsNil(o.Pattern) {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetPatternOk() (*string, bool) {
	if o == nil || IsNil(o.Pattern) {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasPattern() bool {
	if o != nil && !IsNil(o.Pattern) {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetPattern(v string) {
	o.Pattern = &v
}

// GetIgnoredPattern returns the IgnoredPattern field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIgnoredPattern() string {
	if o == nil || IsNil(o.IgnoredPattern) {
		var ret string
		return ret
	}
	return *o.IgnoredPattern
}

// GetIgnoredPatternOk returns a tuple with the IgnoredPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIgnoredPatternOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoredPattern) {
		return nil, false
	}
	return o.IgnoredPattern, true
}

// HasIgnoredPattern returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasIgnoredPattern() bool {
	if o != nil && !IsNil(o.IgnoredPattern) {
		return true
	}

	return false
}

// SetIgnoredPattern gets a reference to the given string and assigns it to the IgnoredPattern field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetIgnoredPattern(v string) {
	o.IgnoredPattern = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetExamples() []string {
	if o == nil || IsNil(o.Examples) {
		var ret []string
		return ret
	}
	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetExamplesOk() ([]string, bool) {
	if o == nil || IsNil(o.Examples) {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasExamples() bool {
	if o != nil && !IsNil(o.Examples) {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []string and assigns it to the Examples field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetExamples(v []string) {
	o.Examples = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetParents() []ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS {
	if o == nil || IsNil(o.Parents) {
		var ret []ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetParentsOk() ([]ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS and assigns it to the Parents field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetParents(v []ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESPARENTSITEMS) {
	o.Parents = v
}

// GetSensitivity returns the Sensitivity field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetSensitivity() ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY {
	if o == nil || IsNil(o.Sensitivity) {
		var ret ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY
		return ret
	}
	return *o.Sensitivity
}

// GetSensitivityOk returns a tuple with the Sensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetSensitivityOk() (*ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY, bool) {
	if o == nil || IsNil(o.Sensitivity) {
		return nil, false
	}
	return o.Sensitivity, true
}

// HasSensitivity returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasSensitivity() bool {
	if o != nil && !IsNil(o.Sensitivity) {
		return true
	}

	return false
}

// SetSensitivity gets a reference to the given ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY and assigns it to the Sensitivity field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetSensitivity(v ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSENSITIVITY) {
	o.Sensitivity = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetStrategy() ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY {
	if o == nil || IsNil(o.Strategy) {
		var ret ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetStrategyOk() (*ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY and assigns it to the Strategy field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetStrategy(v ENUMPROPERTIESCONFIGURATIONPROPERTIESINFERENCEPROPERTIESSCALARSADDITIONALPROPERTIESPROPERTIESSTRATEGY) {
	o.Strategy = &v
}

// GetRaiseOnCommit returns the RaiseOnCommit field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetRaiseOnCommit() bool {
	if o == nil || IsNil(o.RaiseOnCommit) {
		var ret bool
		return ret
	}
	return *o.RaiseOnCommit
}

// GetRaiseOnCommitOk returns a tuple with the RaiseOnCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetRaiseOnCommitOk() (*bool, bool) {
	if o == nil || IsNil(o.RaiseOnCommit) {
		return nil, false
	}
	return o.RaiseOnCommit, true
}

// HasRaiseOnCommit returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasRaiseOnCommit() bool {
	if o != nil && !IsNil(o.RaiseOnCommit) {
		return true
	}

	return false
}

// SetRaiseOnCommit gets a reference to the given bool and assigns it to the RaiseOnCommit field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetRaiseOnCommit(v bool) {
	o.RaiseOnCommit = &v
}

// GetRaiseOnExposure returns the RaiseOnExposure field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetRaiseOnExposure() bool {
	if o == nil || IsNil(o.RaiseOnExposure) {
		var ret bool
		return ret
	}
	return *o.RaiseOnExposure
}

// GetRaiseOnExposureOk returns a tuple with the RaiseOnExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetRaiseOnExposureOk() (*bool, bool) {
	if o == nil || IsNil(o.RaiseOnExposure) {
		return nil, false
	}
	return o.RaiseOnExposure, true
}

// HasRaiseOnExposure returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasRaiseOnExposure() bool {
	if o != nil && !IsNil(o.RaiseOnExposure) {
		return true
	}

	return false
}

// SetRaiseOnExposure gets a reference to the given bool and assigns it to the RaiseOnExposure field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetRaiseOnExposure(v bool) {
	o.RaiseOnExposure = &v
}

// GetIsSourceable returns the IsSourceable field value if set, zero value otherwise.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIsSourceable() bool {
	if o == nil || IsNil(o.IsSourceable) {
		var ret bool
		return ret
	}
	return *o.IsSourceable
}

// GetIsSourceableOk returns a tuple with the IsSourceable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) GetIsSourceableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSourceable) {
		return nil, false
	}
	return o.IsSourceable, true
}

// HasIsSourceable returns a boolean if a field has been set.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) HasIsSourceable() bool {
	if o != nil && !IsNil(o.IsSourceable) {
		return true
	}

	return false
}

// SetIsSourceable gets a reference to the given bool and assigns it to the IsSourceable field.
func (o *ProfileDetailedConfigurationInferenceScalarsValue) SetIsSourceable(v bool) {
	o.IsSourceable = &v
}

func (o ProfileDetailedConfigurationInferenceScalarsValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDetailedConfigurationInferenceScalarsValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.IgnoredNames) {
		toSerialize["ignored_names"] = o.IgnoredNames
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Pattern) {
		toSerialize["pattern"] = o.Pattern
	}
	if !IsNil(o.IgnoredPattern) {
		toSerialize["ignored_pattern"] = o.IgnoredPattern
	}
	if !IsNil(o.Examples) {
		toSerialize["examples"] = o.Examples
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.Sensitivity) {
		toSerialize["sensitivity"] = o.Sensitivity
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	if !IsNil(o.RaiseOnCommit) {
		toSerialize["raise_on_commit"] = o.RaiseOnCommit
	}
	if !IsNil(o.RaiseOnExposure) {
		toSerialize["raise_on_exposure"] = o.RaiseOnExposure
	}
	if !IsNil(o.IsSourceable) {
		toSerialize["is_sourceable"] = o.IsSourceable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileDetailedConfigurationInferenceScalarsValue) UnmarshalJSON(data []byte) (err error) {
	varProfileDetailedConfigurationInferenceScalarsValue := _ProfileDetailedConfigurationInferenceScalarsValue{}

	err = json.Unmarshal(data, &varProfileDetailedConfigurationInferenceScalarsValue)

	if err != nil {
		return err
	}

	*o = ProfileDetailedConfigurationInferenceScalarsValue(varProfileDetailedConfigurationInferenceScalarsValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "names")
		delete(additionalProperties, "ignored_names")
		delete(additionalProperties, "description")
		delete(additionalProperties, "pattern")
		delete(additionalProperties, "ignored_pattern")
		delete(additionalProperties, "examples")
		delete(additionalProperties, "parents")
		delete(additionalProperties, "sensitivity")
		delete(additionalProperties, "strategy")
		delete(additionalProperties, "raise_on_commit")
		delete(additionalProperties, "raise_on_exposure")
		delete(additionalProperties, "is_sourceable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileDetailedConfigurationInferenceScalarsValue struct {
	value *ProfileDetailedConfigurationInferenceScalarsValue
	isSet bool
}

func (v NullableProfileDetailedConfigurationInferenceScalarsValue) Get() *ProfileDetailedConfigurationInferenceScalarsValue {
	return v.value
}

func (v *NullableProfileDetailedConfigurationInferenceScalarsValue) Set(val *ProfileDetailedConfigurationInferenceScalarsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDetailedConfigurationInferenceScalarsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDetailedConfigurationInferenceScalarsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDetailedConfigurationInferenceScalarsValue(val *ProfileDetailedConfigurationInferenceScalarsValue) *NullableProfileDetailedConfigurationInferenceScalarsValue {
	return &NullableProfileDetailedConfigurationInferenceScalarsValue{value: val, isSet: true}
}

func (v NullableProfileDetailedConfigurationInferenceScalarsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDetailedConfigurationInferenceScalarsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


