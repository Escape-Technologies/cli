/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the TargetDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDetailed{}

// TargetDetailed Detailed information about a target
type TargetDetailed struct {
	// The date and time the target was created
	CreatedAt string `json:"createdAt"`
	ApiRoute *ApiRouteDetailed `json:"apiRoute,omitempty"`
	CodeFile *CodeFileDetailed `json:"codeFile,omitempty"`
	GraphqlResolver *GraphqlResolverDetailed `json:"graphqlResolver,omitempty"`
	// The id of the target
	Id string `json:"id"`
	Port *PortDetailed `json:"port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TargetDetailed TargetDetailed

// NewTargetDetailed instantiates a new TargetDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDetailed(createdAt string, id string) *TargetDetailed {
	this := TargetDetailed{}
	this.CreatedAt = createdAt
	this.Id = id
	return &this
}

// NewTargetDetailedWithDefaults instantiates a new TargetDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDetailedWithDefaults() *TargetDetailed {
	this := TargetDetailed{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *TargetDetailed) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TargetDetailed) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetApiRoute returns the ApiRoute field value if set, zero value otherwise.
func (o *TargetDetailed) GetApiRoute() ApiRouteDetailed {
	if o == nil || IsNil(o.ApiRoute) {
		var ret ApiRouteDetailed
		return ret
	}
	return *o.ApiRoute
}

// GetApiRouteOk returns a tuple with the ApiRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetApiRouteOk() (*ApiRouteDetailed, bool) {
	if o == nil || IsNil(o.ApiRoute) {
		return nil, false
	}
	return o.ApiRoute, true
}

// HasApiRoute returns a boolean if a field has been set.
func (o *TargetDetailed) HasApiRoute() bool {
	if o != nil && !IsNil(o.ApiRoute) {
		return true
	}

	return false
}

// SetApiRoute gets a reference to the given ApiRouteDetailed and assigns it to the ApiRoute field.
func (o *TargetDetailed) SetApiRoute(v ApiRouteDetailed) {
	o.ApiRoute = &v
}

// GetCodeFile returns the CodeFile field value if set, zero value otherwise.
func (o *TargetDetailed) GetCodeFile() CodeFileDetailed {
	if o == nil || IsNil(o.CodeFile) {
		var ret CodeFileDetailed
		return ret
	}
	return *o.CodeFile
}

// GetCodeFileOk returns a tuple with the CodeFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetCodeFileOk() (*CodeFileDetailed, bool) {
	if o == nil || IsNil(o.CodeFile) {
		return nil, false
	}
	return o.CodeFile, true
}

// HasCodeFile returns a boolean if a field has been set.
func (o *TargetDetailed) HasCodeFile() bool {
	if o != nil && !IsNil(o.CodeFile) {
		return true
	}

	return false
}

// SetCodeFile gets a reference to the given CodeFileDetailed and assigns it to the CodeFile field.
func (o *TargetDetailed) SetCodeFile(v CodeFileDetailed) {
	o.CodeFile = &v
}

// GetGraphqlResolver returns the GraphqlResolver field value if set, zero value otherwise.
func (o *TargetDetailed) GetGraphqlResolver() GraphqlResolverDetailed {
	if o == nil || IsNil(o.GraphqlResolver) {
		var ret GraphqlResolverDetailed
		return ret
	}
	return *o.GraphqlResolver
}

// GetGraphqlResolverOk returns a tuple with the GraphqlResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetGraphqlResolverOk() (*GraphqlResolverDetailed, bool) {
	if o == nil || IsNil(o.GraphqlResolver) {
		return nil, false
	}
	return o.GraphqlResolver, true
}

// HasGraphqlResolver returns a boolean if a field has been set.
func (o *TargetDetailed) HasGraphqlResolver() bool {
	if o != nil && !IsNil(o.GraphqlResolver) {
		return true
	}

	return false
}

// SetGraphqlResolver gets a reference to the given GraphqlResolverDetailed and assigns it to the GraphqlResolver field.
func (o *TargetDetailed) SetGraphqlResolver(v GraphqlResolverDetailed) {
	o.GraphqlResolver = &v
}

// GetId returns the Id field value
func (o *TargetDetailed) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TargetDetailed) SetId(v string) {
	o.Id = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *TargetDetailed) GetPort() PortDetailed {
	if o == nil || IsNil(o.Port) {
		var ret PortDetailed
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDetailed) GetPortOk() (*PortDetailed, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *TargetDetailed) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given PortDetailed and assigns it to the Port field.
func (o *TargetDetailed) SetPort(v PortDetailed) {
	o.Port = &v
}

func (o TargetDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.ApiRoute) {
		toSerialize["apiRoute"] = o.ApiRoute
	}
	if !IsNil(o.CodeFile) {
		toSerialize["codeFile"] = o.CodeFile
	}
	if !IsNil(o.GraphqlResolver) {
		toSerialize["graphqlResolver"] = o.GraphqlResolver
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TargetDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetDetailed := _TargetDetailed{}

	err = json.Unmarshal(data, &varTargetDetailed)

	if err != nil {
		return err
	}

	*o = TargetDetailed(varTargetDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "apiRoute")
		delete(additionalProperties, "codeFile")
		delete(additionalProperties, "graphqlResolver")
		delete(additionalProperties, "id")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTargetDetailed struct {
	value *TargetDetailed
	isSet bool
}

func (v NullableTargetDetailed) Get() *TargetDetailed {
	return v.value
}

func (v *NullableTargetDetailed) Set(val *TargetDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDetailed(val *TargetDetailed) *NullableTargetDetailed {
	return &NullableTargetDetailed{value: val, isSet: true}
}

func (v NullableTargetDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


