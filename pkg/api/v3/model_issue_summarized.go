/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the IssueSummarized type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueSummarized{}

// IssueSummarized Summarized information about an issue
type IssueSummarized struct {
	// The id of the issue
	Id string `json:"id"`
	// The name of the issue
	Name string `json:"name"`
	Category ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY `json:"category"`
	Severity ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY `json:"severity"`
	Status ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS `json:"status"`
	// The context of the issue
	Context string `json:"context"`
	// Array of risk types associated with the issue
	Risks []ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS `json:"risks"`
	// Unique identifier for the alert
	AlertUid string `json:"alertUid"`
	// When the issue was first created
	CreatedAt string `json:"createdAt"`
	Asset AssetSummarized `json:"asset"`
	// ID of the last scan where this issue was seen
	LastSeenScanId *string `json:"lastSeenScanId,omitempty"`
	// ID of the first scan where this issue was seen
	FirstSeenScanId *string `json:"firstSeenScanId,omitempty"`
	// ID of the custom rule if this is a custom issue
	CustomRuleId *string `json:"customRuleId,omitempty"`
	// URL to the associated Jira ticket if exists
	TicketUrl *string `json:"ticketUrl,omitempty"`
	Links IssueSummarizedLinks `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _IssueSummarized IssueSummarized

// NewIssueSummarized instantiates a new IssueSummarized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueSummarized(id string, name string, category ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY, severity ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY, status ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS, context string, risks []ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS, alertUid string, createdAt string, asset AssetSummarized, links IssueSummarizedLinks) *IssueSummarized {
	this := IssueSummarized{}
	this.Id = id
	this.Name = name
	this.Category = category
	this.Severity = severity
	this.Status = status
	this.Context = context
	this.Risks = risks
	this.AlertUid = alertUid
	this.CreatedAt = createdAt
	this.Asset = asset
	this.Links = links
	return &this
}

// NewIssueSummarizedWithDefaults instantiates a new IssueSummarized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueSummarizedWithDefaults() *IssueSummarized {
	this := IssueSummarized{}
	return &this
}

// GetId returns the Id field value
func (o *IssueSummarized) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IssueSummarized) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *IssueSummarized) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IssueSummarized) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *IssueSummarized) GetCategory() ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY {
	if o == nil {
		var ret ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetCategoryOk() (*ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *IssueSummarized) SetCategory(v ENUMPROPERTIESDATAITEMSPROPERTIESCATEGORY) {
	o.Category = v
}

// GetSeverity returns the Severity field value
func (o *IssueSummarized) GetSeverity() ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY {
	if o == nil {
		var ret ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetSeverityOk() (*ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *IssueSummarized) SetSeverity(v ENUMPROPERTIESDATAITEMSPROPERTIESSEVERITY) {
	o.Severity = v
}

// GetStatus returns the Status field value
func (o *IssueSummarized) GetStatus() ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS {
	if o == nil {
		var ret ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetStatusOk() (*ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *IssueSummarized) SetStatus(v ENUMPROPERTIESDATAITEMSPROPERTIESSTATUS) {
	o.Status = v
}

// GetContext returns the Context field value
func (o *IssueSummarized) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *IssueSummarized) SetContext(v string) {
	o.Context = v
}

// GetRisks returns the Risks field value
func (o *IssueSummarized) GetRisks() []ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS {
	if o == nil {
		var ret []ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS
		return ret
	}

	return o.Risks
}

// GetRisksOk returns a tuple with the Risks field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetRisksOk() ([]ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS, bool) {
	if o == nil {
		return nil, false
	}
	return o.Risks, true
}

// SetRisks sets field value
func (o *IssueSummarized) SetRisks(v []ENUMPROPERTIESDATAITEMSPROPERTIESASSETPROPERTIESRISKSITEMS) {
	o.Risks = v
}

// GetAlertUid returns the AlertUid field value
func (o *IssueSummarized) GetAlertUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertUid
}

// GetAlertUidOk returns a tuple with the AlertUid field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetAlertUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertUid, true
}

// SetAlertUid sets field value
func (o *IssueSummarized) SetAlertUid(v string) {
	o.AlertUid = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IssueSummarized) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IssueSummarized) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetAsset returns the Asset field value
func (o *IssueSummarized) GetAsset() AssetSummarized {
	if o == nil {
		var ret AssetSummarized
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetAssetOk() (*AssetSummarized, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *IssueSummarized) SetAsset(v AssetSummarized) {
	o.Asset = v
}

// GetLastSeenScanId returns the LastSeenScanId field value if set, zero value otherwise.
func (o *IssueSummarized) GetLastSeenScanId() string {
	if o == nil || IsNil(o.LastSeenScanId) {
		var ret string
		return ret
	}
	return *o.LastSeenScanId
}

// GetLastSeenScanIdOk returns a tuple with the LastSeenScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetLastSeenScanIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastSeenScanId) {
		return nil, false
	}
	return o.LastSeenScanId, true
}

// HasLastSeenScanId returns a boolean if a field has been set.
func (o *IssueSummarized) HasLastSeenScanId() bool {
	if o != nil && !IsNil(o.LastSeenScanId) {
		return true
	}

	return false
}

// SetLastSeenScanId gets a reference to the given string and assigns it to the LastSeenScanId field.
func (o *IssueSummarized) SetLastSeenScanId(v string) {
	o.LastSeenScanId = &v
}

// GetFirstSeenScanId returns the FirstSeenScanId field value if set, zero value otherwise.
func (o *IssueSummarized) GetFirstSeenScanId() string {
	if o == nil || IsNil(o.FirstSeenScanId) {
		var ret string
		return ret
	}
	return *o.FirstSeenScanId
}

// GetFirstSeenScanIdOk returns a tuple with the FirstSeenScanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetFirstSeenScanIdOk() (*string, bool) {
	if o == nil || IsNil(o.FirstSeenScanId) {
		return nil, false
	}
	return o.FirstSeenScanId, true
}

// HasFirstSeenScanId returns a boolean if a field has been set.
func (o *IssueSummarized) HasFirstSeenScanId() bool {
	if o != nil && !IsNil(o.FirstSeenScanId) {
		return true
	}

	return false
}

// SetFirstSeenScanId gets a reference to the given string and assigns it to the FirstSeenScanId field.
func (o *IssueSummarized) SetFirstSeenScanId(v string) {
	o.FirstSeenScanId = &v
}

// GetCustomRuleId returns the CustomRuleId field value if set, zero value otherwise.
func (o *IssueSummarized) GetCustomRuleId() string {
	if o == nil || IsNil(o.CustomRuleId) {
		var ret string
		return ret
	}
	return *o.CustomRuleId
}

// GetCustomRuleIdOk returns a tuple with the CustomRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetCustomRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomRuleId) {
		return nil, false
	}
	return o.CustomRuleId, true
}

// HasCustomRuleId returns a boolean if a field has been set.
func (o *IssueSummarized) HasCustomRuleId() bool {
	if o != nil && !IsNil(o.CustomRuleId) {
		return true
	}

	return false
}

// SetCustomRuleId gets a reference to the given string and assigns it to the CustomRuleId field.
func (o *IssueSummarized) SetCustomRuleId(v string) {
	o.CustomRuleId = &v
}

// GetTicketUrl returns the TicketUrl field value if set, zero value otherwise.
func (o *IssueSummarized) GetTicketUrl() string {
	if o == nil || IsNil(o.TicketUrl) {
		var ret string
		return ret
	}
	return *o.TicketUrl
}

// GetTicketUrlOk returns a tuple with the TicketUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetTicketUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TicketUrl) {
		return nil, false
	}
	return o.TicketUrl, true
}

// HasTicketUrl returns a boolean if a field has been set.
func (o *IssueSummarized) HasTicketUrl() bool {
	if o != nil && !IsNil(o.TicketUrl) {
		return true
	}

	return false
}

// SetTicketUrl gets a reference to the given string and assigns it to the TicketUrl field.
func (o *IssueSummarized) SetTicketUrl(v string) {
	o.TicketUrl = &v
}

// GetLinks returns the Links field value
func (o *IssueSummarized) GetLinks() IssueSummarizedLinks {
	if o == nil {
		var ret IssueSummarizedLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *IssueSummarized) GetLinksOk() (*IssueSummarizedLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *IssueSummarized) SetLinks(v IssueSummarizedLinks) {
	o.Links = v
}

func (o IssueSummarized) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueSummarized) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["category"] = o.Category
	toSerialize["severity"] = o.Severity
	toSerialize["status"] = o.Status
	toSerialize["context"] = o.Context
	toSerialize["risks"] = o.Risks
	toSerialize["alertUid"] = o.AlertUid
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["asset"] = o.Asset
	if !IsNil(o.LastSeenScanId) {
		toSerialize["lastSeenScanId"] = o.LastSeenScanId
	}
	if !IsNil(o.FirstSeenScanId) {
		toSerialize["firstSeenScanId"] = o.FirstSeenScanId
	}
	if !IsNil(o.CustomRuleId) {
		toSerialize["customRuleId"] = o.CustomRuleId
	}
	if !IsNil(o.TicketUrl) {
		toSerialize["ticketUrl"] = o.TicketUrl
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IssueSummarized) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"category",
		"severity",
		"status",
		"context",
		"risks",
		"alertUid",
		"createdAt",
		"asset",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueSummarized := _IssueSummarized{}

	err = json.Unmarshal(data, &varIssueSummarized)

	if err != nil {
		return err
	}

	*o = IssueSummarized(varIssueSummarized)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "category")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "status")
		delete(additionalProperties, "context")
		delete(additionalProperties, "risks")
		delete(additionalProperties, "alertUid")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "asset")
		delete(additionalProperties, "lastSeenScanId")
		delete(additionalProperties, "firstSeenScanId")
		delete(additionalProperties, "customRuleId")
		delete(additionalProperties, "ticketUrl")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIssueSummarized struct {
	value *IssueSummarized
	isSet bool
}

func (v NullableIssueSummarized) Get() *IssueSummarized {
	return v.value
}

func (v *NullableIssueSummarized) Set(val *IssueSummarized) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueSummarized) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueSummarized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueSummarized(val *IssueSummarized) *NullableIssueSummarized {
	return &NullableIssueSummarized{value: val, isSet: true}
}

func (v NullableIssueSummarized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueSummarized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


