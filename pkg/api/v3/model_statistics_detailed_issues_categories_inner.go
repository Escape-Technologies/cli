/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `X-ESCAPE-API-KEY` header. For example: `X-ESCAPE-API-KEY: YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the StatisticsDetailedIssuesCategoriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticsDetailedIssuesCategoriesInner{}

// StatisticsDetailedIssuesCategoriesInner struct for StatisticsDetailedIssuesCategoriesInner
type StatisticsDetailedIssuesCategoriesInner struct {
	// The category of the issue
	Category string `json:"category"`
	// The count of the issue
	Count float32 `json:"count"`
	AdditionalProperties map[string]interface{}
}

type _StatisticsDetailedIssuesCategoriesInner StatisticsDetailedIssuesCategoriesInner

// NewStatisticsDetailedIssuesCategoriesInner instantiates a new StatisticsDetailedIssuesCategoriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticsDetailedIssuesCategoriesInner(category string, count float32) *StatisticsDetailedIssuesCategoriesInner {
	this := StatisticsDetailedIssuesCategoriesInner{}
	this.Category = category
	this.Count = count
	return &this
}

// NewStatisticsDetailedIssuesCategoriesInnerWithDefaults instantiates a new StatisticsDetailedIssuesCategoriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsDetailedIssuesCategoriesInnerWithDefaults() *StatisticsDetailedIssuesCategoriesInner {
	this := StatisticsDetailedIssuesCategoriesInner{}
	return &this
}

// GetCategory returns the Category field value
func (o *StatisticsDetailedIssuesCategoriesInner) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *StatisticsDetailedIssuesCategoriesInner) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *StatisticsDetailedIssuesCategoriesInner) SetCategory(v string) {
	o.Category = v
}

// GetCount returns the Count field value
func (o *StatisticsDetailedIssuesCategoriesInner) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StatisticsDetailedIssuesCategoriesInner) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StatisticsDetailedIssuesCategoriesInner) SetCount(v float32) {
	o.Count = v
}

func (o StatisticsDetailedIssuesCategoriesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticsDetailedIssuesCategoriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["count"] = o.Count

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatisticsDetailedIssuesCategoriesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatisticsDetailedIssuesCategoriesInner := _StatisticsDetailedIssuesCategoriesInner{}

	err = json.Unmarshal(data, &varStatisticsDetailedIssuesCategoriesInner)

	if err != nil {
		return err
	}

	*o = StatisticsDetailedIssuesCategoriesInner(varStatisticsDetailedIssuesCategoriesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category")
		delete(additionalProperties, "count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatisticsDetailedIssuesCategoriesInner struct {
	value *StatisticsDetailedIssuesCategoriesInner
	isSet bool
}

func (v NullableStatisticsDetailedIssuesCategoriesInner) Get() *StatisticsDetailedIssuesCategoriesInner {
	return v.value
}

func (v *NullableStatisticsDetailedIssuesCategoriesInner) Set(val *StatisticsDetailedIssuesCategoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsDetailedIssuesCategoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsDetailedIssuesCategoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsDetailedIssuesCategoriesInner(val *StatisticsDetailedIssuesCategoriesInner) *NullableStatisticsDetailedIssuesCategoriesInner {
	return &NullableStatisticsDetailedIssuesCategoriesInner{value: val, isSet: true}
}

func (v NullableStatisticsDetailedIssuesCategoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsDetailedIssuesCategoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


