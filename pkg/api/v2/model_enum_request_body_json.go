/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumREQUESTBODYJSON the model 'EnumREQUESTBODYJSON'
type EnumREQUESTBODYJSON string

// List of Enum_REQUEST_BODY_JSON
const (
	ENUMREQUESTBODYJSON_REQUEST_BODY_JSON EnumREQUESTBODYJSON = "request.body.json"
)

// All allowed values of EnumREQUESTBODYJSON enum
var AllowedEnumREQUESTBODYJSONEnumValues = []EnumREQUESTBODYJSON{
	"request.body.json",
}

func (v *EnumREQUESTBODYJSON) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumREQUESTBODYJSON(value)
	for _, existing := range AllowedEnumREQUESTBODYJSONEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumREQUESTBODYJSON", value)
}

// NewEnumREQUESTBODYJSONFromValue returns a pointer to a valid EnumREQUESTBODYJSON
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumREQUESTBODYJSONFromValue(v string) (*EnumREQUESTBODYJSON, error) {
	ev := EnumREQUESTBODYJSON(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumREQUESTBODYJSON: valid values are %v", v, AllowedEnumREQUESTBODYJSONEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumREQUESTBODYJSON) IsValid() bool {
	for _, existing := range AllowedEnumREQUESTBODYJSONEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_REQUEST_BODY_JSON value
func (v EnumREQUESTBODYJSON) Ptr() *EnumREQUESTBODYJSON {
	return &v
}

type NullableEnumREQUESTBODYJSON struct {
	value *EnumREQUESTBODYJSON
	isSet bool
}

func (v NullableEnumREQUESTBODYJSON) Get() *EnumREQUESTBODYJSON {
	return v.value
}

func (v *NullableEnumREQUESTBODYJSON) Set(val *EnumREQUESTBODYJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumREQUESTBODYJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumREQUESTBODYJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumREQUESTBODYJSON(val *EnumREQUESTBODYJSON) *NullableEnumREQUESTBODYJSON {
	return &NullableEnumREQUESTBODYJSON{value: val, isSet: true}
}

func (v NullableEnumREQUESTBODYJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumREQUESTBODYJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

