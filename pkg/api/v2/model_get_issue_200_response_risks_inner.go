/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetIssue200ResponseRisksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIssue200ResponseRisksInner{}

// GetIssue200ResponseRisksInner struct for GetIssue200ResponseRisksInner
type GetIssue200ResponseRisksInner struct {
	Id string `json:"id"`
	Kind Enum1ea54cdf1f4480ebf83fc671185f5693 `json:"kind"`
}

type _GetIssue200ResponseRisksInner GetIssue200ResponseRisksInner

// NewGetIssue200ResponseRisksInner instantiates a new GetIssue200ResponseRisksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIssue200ResponseRisksInner(id string, kind Enum1ea54cdf1f4480ebf83fc671185f5693) *GetIssue200ResponseRisksInner {
	this := GetIssue200ResponseRisksInner{}
	this.Id = id
	this.Kind = kind
	return &this
}

// NewGetIssue200ResponseRisksInnerWithDefaults instantiates a new GetIssue200ResponseRisksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIssue200ResponseRisksInnerWithDefaults() *GetIssue200ResponseRisksInner {
	this := GetIssue200ResponseRisksInner{}
	return &this
}

// GetId returns the Id field value
func (o *GetIssue200ResponseRisksInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseRisksInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetIssue200ResponseRisksInner) SetId(v string) {
	o.Id = v
}

// GetKind returns the Kind field value
func (o *GetIssue200ResponseRisksInner) GetKind() Enum1ea54cdf1f4480ebf83fc671185f5693 {
	if o == nil {
		var ret Enum1ea54cdf1f4480ebf83fc671185f5693
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseRisksInner) GetKindOk() (*Enum1ea54cdf1f4480ebf83fc671185f5693, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *GetIssue200ResponseRisksInner) SetKind(v Enum1ea54cdf1f4480ebf83fc671185f5693) {
	o.Kind = v
}

func (o GetIssue200ResponseRisksInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIssue200ResponseRisksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["kind"] = o.Kind
	return toSerialize, nil
}

func (o *GetIssue200ResponseRisksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetIssue200ResponseRisksInner := _GetIssue200ResponseRisksInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetIssue200ResponseRisksInner)

	if err != nil {
		return err
	}

	*o = GetIssue200ResponseRisksInner(varGetIssue200ResponseRisksInner)

	return err
}

type NullableGetIssue200ResponseRisksInner struct {
	value *GetIssue200ResponseRisksInner
	isSet bool
}

func (v NullableGetIssue200ResponseRisksInner) Get() *GetIssue200ResponseRisksInner {
	return v.value
}

func (v *NullableGetIssue200ResponseRisksInner) Set(val *GetIssue200ResponseRisksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssue200ResponseRisksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssue200ResponseRisksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssue200ResponseRisksInner(val *GetIssue200ResponseRisksInner) *NullableGetIssue200ResponseRisksInner {
	return &NullableGetIssue200ResponseRisksInner{value: val, isSet: true}
}

func (v NullableGetIssue200ResponseRisksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssue200ResponseRisksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


