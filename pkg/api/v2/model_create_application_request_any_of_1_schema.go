/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateApplicationRequestAnyOf1Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateApplicationRequestAnyOf1Schema{}

// CreateApplicationRequestAnyOf1Schema struct for CreateApplicationRequestAnyOf1Schema
type CreateApplicationRequestAnyOf1Schema struct {
	// Schema URL if schema is fetchable from the internet
	Url *string `json:"url,omitempty"`
	// Schema blob ID from upload url
	BlobId string `json:"blobId"`
	AdditionalProperties map[string]interface{}
}

type _CreateApplicationRequestAnyOf1Schema CreateApplicationRequestAnyOf1Schema

// NewCreateApplicationRequestAnyOf1Schema instantiates a new CreateApplicationRequestAnyOf1Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApplicationRequestAnyOf1Schema(blobId string) *CreateApplicationRequestAnyOf1Schema {
	this := CreateApplicationRequestAnyOf1Schema{}
	this.BlobId = blobId
	return &this
}

// NewCreateApplicationRequestAnyOf1SchemaWithDefaults instantiates a new CreateApplicationRequestAnyOf1Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApplicationRequestAnyOf1SchemaWithDefaults() *CreateApplicationRequestAnyOf1Schema {
	this := CreateApplicationRequestAnyOf1Schema{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CreateApplicationRequestAnyOf1Schema) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateApplicationRequestAnyOf1Schema) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CreateApplicationRequestAnyOf1Schema) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CreateApplicationRequestAnyOf1Schema) SetUrl(v string) {
	o.Url = &v
}

// GetBlobId returns the BlobId field value
func (o *CreateApplicationRequestAnyOf1Schema) GetBlobId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobId
}

// GetBlobIdOk returns a tuple with the BlobId field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationRequestAnyOf1Schema) GetBlobIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobId, true
}

// SetBlobId sets field value
func (o *CreateApplicationRequestAnyOf1Schema) SetBlobId(v string) {
	o.BlobId = v
}

func (o CreateApplicationRequestAnyOf1Schema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateApplicationRequestAnyOf1Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["blobId"] = o.BlobId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateApplicationRequestAnyOf1Schema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blobId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateApplicationRequestAnyOf1Schema := _CreateApplicationRequestAnyOf1Schema{}

	err = json.Unmarshal(data, &varCreateApplicationRequestAnyOf1Schema)

	if err != nil {
		return err
	}

	*o = CreateApplicationRequestAnyOf1Schema(varCreateApplicationRequestAnyOf1Schema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "blobId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateApplicationRequestAnyOf1Schema struct {
	value *CreateApplicationRequestAnyOf1Schema
	isSet bool
}

func (v NullableCreateApplicationRequestAnyOf1Schema) Get() *CreateApplicationRequestAnyOf1Schema {
	return v.value
}

func (v *NullableCreateApplicationRequestAnyOf1Schema) Set(val *CreateApplicationRequestAnyOf1Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationRequestAnyOf1Schema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationRequestAnyOf1Schema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationRequestAnyOf1Schema(val *CreateApplicationRequestAnyOf1Schema) *NullableCreateApplicationRequestAnyOf1Schema {
	return &NullableCreateApplicationRequestAnyOf1Schema{value: val, isSet: true}
}

func (v NullableCreateApplicationRequestAnyOf1Schema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationRequestAnyOf1Schema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


