/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum1ab0ceef9ae9ece93c01f2d976ec3990 the model 'Enum1ab0ceef9ae9ece93c01f2d976ec3990'
type Enum1ab0ceef9ae9ece93c01f2d976ec3990 string

// List of Enum_1ab0ceef9ae9ece93c01f2d976ec3990
const (
	ENUM1AB0CEEF9AE9ECE93C01F2D976EC3990_GRAPHQL Enum1ab0ceef9ae9ece93c01f2d976ec3990 = "GRAPHQL"
	ENUM1AB0CEEF9AE9ECE93C01F2D976EC3990_REST Enum1ab0ceef9ae9ece93c01f2d976ec3990 = "REST"
)

// All allowed values of Enum1ab0ceef9ae9ece93c01f2d976ec3990 enum
var AllowedEnum1ab0ceef9ae9ece93c01f2d976ec3990EnumValues = []Enum1ab0ceef9ae9ece93c01f2d976ec3990{
	"GRAPHQL",
	"REST",
}

func (v *Enum1ab0ceef9ae9ece93c01f2d976ec3990) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum1ab0ceef9ae9ece93c01f2d976ec3990(value)
	for _, existing := range AllowedEnum1ab0ceef9ae9ece93c01f2d976ec3990EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum1ab0ceef9ae9ece93c01f2d976ec3990", value)
}

// NewEnum1ab0ceef9ae9ece93c01f2d976ec3990FromValue returns a pointer to a valid Enum1ab0ceef9ae9ece93c01f2d976ec3990
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum1ab0ceef9ae9ece93c01f2d976ec3990FromValue(v string) (*Enum1ab0ceef9ae9ece93c01f2d976ec3990, error) {
	ev := Enum1ab0ceef9ae9ece93c01f2d976ec3990(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum1ab0ceef9ae9ece93c01f2d976ec3990: valid values are %v", v, AllowedEnum1ab0ceef9ae9ece93c01f2d976ec3990EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum1ab0ceef9ae9ece93c01f2d976ec3990) IsValid() bool {
	for _, existing := range AllowedEnum1ab0ceef9ae9ece93c01f2d976ec3990EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_1ab0ceef9ae9ece93c01f2d976ec3990 value
func (v Enum1ab0ceef9ae9ece93c01f2d976ec3990) Ptr() *Enum1ab0ceef9ae9ece93c01f2d976ec3990 {
	return &v
}

type NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990 struct {
	value *Enum1ab0ceef9ae9ece93c01f2d976ec3990
	isSet bool
}

func (v NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) Get() *Enum1ab0ceef9ae9ece93c01f2d976ec3990 {
	return v.value
}

func (v *NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) Set(val *Enum1ab0ceef9ae9ece93c01f2d976ec3990) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum1ab0ceef9ae9ece93c01f2d976ec3990(val *Enum1ab0ceef9ae9ece93c01f2d976ec3990) *NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990 {
	return &NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990{value: val, isSet: true}
}

func (v NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum1ab0ceef9ae9ece93c01f2d976ec3990) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

