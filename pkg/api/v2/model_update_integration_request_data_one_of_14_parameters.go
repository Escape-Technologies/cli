/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateIntegrationRequestDataOneOf14Parameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIntegrationRequestDataOneOf14Parameters{}

// UpdateIntegrationRequestDataOneOf14Parameters struct for UpdateIntegrationRequestDataOneOf14Parameters
type UpdateIntegrationRequestDataOneOf14Parameters struct {
	SystemAccountToken string `json:"system_account_token"`
	Region string `json:"region"`
}

type _UpdateIntegrationRequestDataOneOf14Parameters UpdateIntegrationRequestDataOneOf14Parameters

// NewUpdateIntegrationRequestDataOneOf14Parameters instantiates a new UpdateIntegrationRequestDataOneOf14Parameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIntegrationRequestDataOneOf14Parameters(systemAccountToken string, region string) *UpdateIntegrationRequestDataOneOf14Parameters {
	this := UpdateIntegrationRequestDataOneOf14Parameters{}
	this.SystemAccountToken = systemAccountToken
	this.Region = region
	return &this
}

// NewUpdateIntegrationRequestDataOneOf14ParametersWithDefaults instantiates a new UpdateIntegrationRequestDataOneOf14Parameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIntegrationRequestDataOneOf14ParametersWithDefaults() *UpdateIntegrationRequestDataOneOf14Parameters {
	this := UpdateIntegrationRequestDataOneOf14Parameters{}
	return &this
}

// GetSystemAccountToken returns the SystemAccountToken field value
func (o *UpdateIntegrationRequestDataOneOf14Parameters) GetSystemAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SystemAccountToken
}

// GetSystemAccountTokenOk returns a tuple with the SystemAccountToken field value
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationRequestDataOneOf14Parameters) GetSystemAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemAccountToken, true
}

// SetSystemAccountToken sets field value
func (o *UpdateIntegrationRequestDataOneOf14Parameters) SetSystemAccountToken(v string) {
	o.SystemAccountToken = v
}

// GetRegion returns the Region field value
func (o *UpdateIntegrationRequestDataOneOf14Parameters) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *UpdateIntegrationRequestDataOneOf14Parameters) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *UpdateIntegrationRequestDataOneOf14Parameters) SetRegion(v string) {
	o.Region = v
}

func (o UpdateIntegrationRequestDataOneOf14Parameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIntegrationRequestDataOneOf14Parameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["system_account_token"] = o.SystemAccountToken
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *UpdateIntegrationRequestDataOneOf14Parameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"system_account_token",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateIntegrationRequestDataOneOf14Parameters := _UpdateIntegrationRequestDataOneOf14Parameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateIntegrationRequestDataOneOf14Parameters)

	if err != nil {
		return err
	}

	*o = UpdateIntegrationRequestDataOneOf14Parameters(varUpdateIntegrationRequestDataOneOf14Parameters)

	return err
}

type NullableUpdateIntegrationRequestDataOneOf14Parameters struct {
	value *UpdateIntegrationRequestDataOneOf14Parameters
	isSet bool
}

func (v NullableUpdateIntegrationRequestDataOneOf14Parameters) Get() *UpdateIntegrationRequestDataOneOf14Parameters {
	return v.value
}

func (v *NullableUpdateIntegrationRequestDataOneOf14Parameters) Set(val *UpdateIntegrationRequestDataOneOf14Parameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIntegrationRequestDataOneOf14Parameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIntegrationRequestDataOneOf14Parameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIntegrationRequestDataOneOf14Parameters(val *UpdateIntegrationRequestDataOneOf14Parameters) *NullableUpdateIntegrationRequestDataOneOf14Parameters {
	return &NullableUpdateIntegrationRequestDataOneOf14Parameters{value: val, isSet: true}
}

func (v NullableUpdateIntegrationRequestDataOneOf14Parameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIntegrationRequestDataOneOf14Parameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


