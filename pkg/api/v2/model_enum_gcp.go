/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumGCP the model 'EnumGCP'
type EnumGCP string

// List of Enum_GCP
const (
	ENUMGCP_GCP EnumGCP = "GCP"
)

// All allowed values of EnumGCP enum
var AllowedEnumGCPEnumValues = []EnumGCP{
	"GCP",
}

func (v *EnumGCP) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGCP(value)
	for _, existing := range AllowedEnumGCPEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumGCP", value)
}

// NewEnumGCPFromValue returns a pointer to a valid EnumGCP
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGCPFromValue(v string) (*EnumGCP, error) {
	ev := EnumGCP(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGCP: valid values are %v", v, AllowedEnumGCPEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGCP) IsValid() bool {
	for _, existing := range AllowedEnumGCPEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_GCP value
func (v EnumGCP) Ptr() *EnumGCP {
	return &v
}

type NullableEnumGCP struct {
	value *EnumGCP
	isSet bool
}

func (v NullableEnumGCP) Get() *EnumGCP {
	return v.value
}

func (v *NullableEnumGCP) Set(val *EnumGCP) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGCP) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGCP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGCP(val *EnumGCP) *NullableEnumGCP {
	return &NullableEnumGCP{value: val, isSet: true}
}

func (v NullableEnumGCP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGCP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

