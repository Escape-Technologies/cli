/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateLocation409Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLocation409Response{}

// CreateLocation409Response struct for CreateLocation409Response
type CreateLocation409Response struct {
	Message string `json:"message"`
	Field string `json:"field"`
}

type _CreateLocation409Response CreateLocation409Response

// NewCreateLocation409Response instantiates a new CreateLocation409Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLocation409Response(message string, field string) *CreateLocation409Response {
	this := CreateLocation409Response{}
	this.Message = message
	this.Field = field
	return &this
}

// NewCreateLocation409ResponseWithDefaults instantiates a new CreateLocation409Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLocation409ResponseWithDefaults() *CreateLocation409Response {
	this := CreateLocation409Response{}
	return &this
}

// GetMessage returns the Message field value
func (o *CreateLocation409Response) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CreateLocation409Response) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CreateLocation409Response) SetMessage(v string) {
	o.Message = v
}

// GetField returns the Field field value
func (o *CreateLocation409Response) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *CreateLocation409Response) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *CreateLocation409Response) SetField(v string) {
	o.Field = v
}

func (o CreateLocation409Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLocation409Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["field"] = o.Field
	return toSerialize, nil
}

func (o *CreateLocation409Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLocation409Response := _CreateLocation409Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateLocation409Response)

	if err != nil {
		return err
	}

	*o = CreateLocation409Response(varCreateLocation409Response)

	return err
}

type NullableCreateLocation409Response struct {
	value *CreateLocation409Response
	isSet bool
}

func (v NullableCreateLocation409Response) Get() *CreateLocation409Response {
	return v.value
}

func (v *NullableCreateLocation409Response) Set(val *CreateLocation409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLocation409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLocation409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLocation409Response(val *CreateLocation409Response) *NullableCreateLocation409Response {
	return &NullableCreateLocation409Response{value: val, isSet: true}
}

func (v NullableCreateLocation409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLocation409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


