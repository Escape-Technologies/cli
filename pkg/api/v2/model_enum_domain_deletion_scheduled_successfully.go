/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY the model 'EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY'
type EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY string

// List of Enum_DOMAIN_DELETION_SCHEDULED_SUCCESSFULLY
const (
	ENUMDOMAINDELETIONSCHEDULEDSUCCESSFULLY_DOMAIN_DELETION_SCHEDULED_SUCCESSFULLY EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY = "Domain deletion scheduled successfully"
)

// All allowed values of EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY enum
var AllowedEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYEnumValues = []EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY{
	"Domain deletion scheduled successfully",
}

func (v *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY(value)
	for _, existing := range AllowedEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY", value)
}

// NewEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYFromValue returns a pointer to a valid EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYFromValue(v string) (*EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY, error) {
	ev := EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY: valid values are %v", v, AllowedEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) IsValid() bool {
	for _, existing := range AllowedEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_DOMAIN_DELETION_SCHEDULED_SUCCESSFULLY value
func (v EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) Ptr() *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY {
	return &v
}

type NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY struct {
	value *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY
	isSet bool
}

func (v NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) Get() *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY {
	return v.value
}

func (v *NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) Set(val *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY(val *EnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) *NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY {
	return &NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY{value: val, isSet: true}
}

func (v NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumDOMAINDELETIONSCHEDULEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

