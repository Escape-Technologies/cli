/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum15559151725d4598e75cbc5c6c9bd96e the model 'Enum15559151725d4598e75cbc5c6c9bd96e'
type Enum15559151725d4598e75cbc5c6c9bd96e string

// List of Enum_15559151725d4598e75cbc5c6c9bd96e
const (
	ENUM15559151725D4598E75CBC5C6C9BD96E_API Enum15559151725d4598e75cbc5c6c9bd96e = "API"
	ENUM15559151725D4598E75CBC5C6C9BD96E_FRONTEND Enum15559151725d4598e75cbc5c6c9bd96e = "FRONTEND"
	ENUM15559151725D4598E75CBC5C6C9BD96E_SENSITIVE_DATA Enum15559151725d4598e75cbc5c6c9bd96e = "SENSITIVE_DATA"
)

// All allowed values of Enum15559151725d4598e75cbc5c6c9bd96e enum
var AllowedEnum15559151725d4598e75cbc5c6c9bd96eEnumValues = []Enum15559151725d4598e75cbc5c6c9bd96e{
	"API",
	"FRONTEND",
	"SENSITIVE_DATA",
}

func (v *Enum15559151725d4598e75cbc5c6c9bd96e) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum15559151725d4598e75cbc5c6c9bd96e(value)
	for _, existing := range AllowedEnum15559151725d4598e75cbc5c6c9bd96eEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum15559151725d4598e75cbc5c6c9bd96e", value)
}

// NewEnum15559151725d4598e75cbc5c6c9bd96eFromValue returns a pointer to a valid Enum15559151725d4598e75cbc5c6c9bd96e
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum15559151725d4598e75cbc5c6c9bd96eFromValue(v string) (*Enum15559151725d4598e75cbc5c6c9bd96e, error) {
	ev := Enum15559151725d4598e75cbc5c6c9bd96e(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum15559151725d4598e75cbc5c6c9bd96e: valid values are %v", v, AllowedEnum15559151725d4598e75cbc5c6c9bd96eEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum15559151725d4598e75cbc5c6c9bd96e) IsValid() bool {
	for _, existing := range AllowedEnum15559151725d4598e75cbc5c6c9bd96eEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_15559151725d4598e75cbc5c6c9bd96e value
func (v Enum15559151725d4598e75cbc5c6c9bd96e) Ptr() *Enum15559151725d4598e75cbc5c6c9bd96e {
	return &v
}

type NullableEnum15559151725d4598e75cbc5c6c9bd96e struct {
	value *Enum15559151725d4598e75cbc5c6c9bd96e
	isSet bool
}

func (v NullableEnum15559151725d4598e75cbc5c6c9bd96e) Get() *Enum15559151725d4598e75cbc5c6c9bd96e {
	return v.value
}

func (v *NullableEnum15559151725d4598e75cbc5c6c9bd96e) Set(val *Enum15559151725d4598e75cbc5c6c9bd96e) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum15559151725d4598e75cbc5c6c9bd96e) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum15559151725d4598e75cbc5c6c9bd96e) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum15559151725d4598e75cbc5c6c9bd96e(val *Enum15559151725d4598e75cbc5c6c9bd96e) *NullableEnum15559151725d4598e75cbc5c6c9bd96e {
	return &NullableEnum15559151725d4598e75cbc5c6c9bd96e{value: val, isSet: true}
}

func (v NullableEnum15559151725d4598e75cbc5c6c9bd96e) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum15559151725d4598e75cbc5c6c9bd96e) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

