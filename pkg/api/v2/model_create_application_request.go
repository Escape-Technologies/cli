/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)


// CreateApplicationRequest struct for CreateApplicationRequest
type CreateApplicationRequest struct {
	CreateApplicationRequestAnyOf *CreateApplicationRequestAnyOf
	CreateApplicationRequestAnyOf1 *CreateApplicationRequestAnyOf1
	CreateApplicationRequestAnyOf2 *CreateApplicationRequestAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateApplicationRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CreateApplicationRequestAnyOf
	err = json.Unmarshal(data, &dst.CreateApplicationRequestAnyOf);
	if err == nil {
		jsonCreateApplicationRequestAnyOf, _ := json.Marshal(dst.CreateApplicationRequestAnyOf)
		if string(jsonCreateApplicationRequestAnyOf) == "{}" { // empty struct
			dst.CreateApplicationRequestAnyOf = nil
		} else {
			return nil // data stored in dst.CreateApplicationRequestAnyOf, return on the first match
		}
	} else {
		dst.CreateApplicationRequestAnyOf = nil
	}

	// try to unmarshal JSON data into CreateApplicationRequestAnyOf1
	err = json.Unmarshal(data, &dst.CreateApplicationRequestAnyOf1);
	if err == nil {
		jsonCreateApplicationRequestAnyOf1, _ := json.Marshal(dst.CreateApplicationRequestAnyOf1)
		if string(jsonCreateApplicationRequestAnyOf1) == "{}" { // empty struct
			dst.CreateApplicationRequestAnyOf1 = nil
		} else {
			return nil // data stored in dst.CreateApplicationRequestAnyOf1, return on the first match
		}
	} else {
		dst.CreateApplicationRequestAnyOf1 = nil
	}

	// try to unmarshal JSON data into CreateApplicationRequestAnyOf2
	err = json.Unmarshal(data, &dst.CreateApplicationRequestAnyOf2);
	if err == nil {
		jsonCreateApplicationRequestAnyOf2, _ := json.Marshal(dst.CreateApplicationRequestAnyOf2)
		if string(jsonCreateApplicationRequestAnyOf2) == "{}" { // empty struct
			dst.CreateApplicationRequestAnyOf2 = nil
		} else {
			return nil // data stored in dst.CreateApplicationRequestAnyOf2, return on the first match
		}
	} else {
		dst.CreateApplicationRequestAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateApplicationRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateApplicationRequest) MarshalJSON() ([]byte, error) {
	if src.CreateApplicationRequestAnyOf != nil {
		return json.Marshal(&src.CreateApplicationRequestAnyOf)
	}

	if src.CreateApplicationRequestAnyOf1 != nil {
		return json.Marshal(&src.CreateApplicationRequestAnyOf1)
	}

	if src.CreateApplicationRequestAnyOf2 != nil {
		return json.Marshal(&src.CreateApplicationRequestAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateApplicationRequest struct {
	value *CreateApplicationRequest
	isSet bool
}

func (v NullableCreateApplicationRequest) Get() *CreateApplicationRequest {
	return v.value
}

func (v *NullableCreateApplicationRequest) Set(val *CreateApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationRequest(val *CreateApplicationRequest) *NullableCreateApplicationRequest {
	return &NullableCreateApplicationRequest{value: val, isSet: true}
}

func (v NullableCreateApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


