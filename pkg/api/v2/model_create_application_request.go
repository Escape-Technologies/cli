/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)


// CreateApplicationRequest struct for CreateApplicationRequest
type CreateApplicationRequest struct {
	Frontend *Frontend
	GraphQL *GraphQL
	REST *REST
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateApplicationRequest) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Frontend
	err = json.Unmarshal(data, &dst.Frontend);
	if err == nil {
		jsonFrontend, _ := json.Marshal(dst.Frontend)
		if string(jsonFrontend) == "{}" { // empty struct
			dst.Frontend = nil
		} else {
			return nil // data stored in dst.Frontend, return on the first match
		}
	} else {
		dst.Frontend = nil
	}

	// try to unmarshal JSON data into GraphQL
	err = json.Unmarshal(data, &dst.GraphQL);
	if err == nil {
		jsonGraphQL, _ := json.Marshal(dst.GraphQL)
		if string(jsonGraphQL) == "{}" { // empty struct
			dst.GraphQL = nil
		} else {
			return nil // data stored in dst.GraphQL, return on the first match
		}
	} else {
		dst.GraphQL = nil
	}

	// try to unmarshal JSON data into REST
	err = json.Unmarshal(data, &dst.REST);
	if err == nil {
		jsonREST, _ := json.Marshal(dst.REST)
		if string(jsonREST) == "{}" { // empty struct
			dst.REST = nil
		} else {
			return nil // data stored in dst.REST, return on the first match
		}
	} else {
		dst.REST = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateApplicationRequest)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateApplicationRequest) MarshalJSON() ([]byte, error) {
	if src.Frontend != nil {
		return json.Marshal(&src.Frontend)
	}

	if src.GraphQL != nil {
		return json.Marshal(&src.GraphQL)
	}

	if src.REST != nil {
		return json.Marshal(&src.REST)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateApplicationRequest struct {
	value *CreateApplicationRequest
	isSet bool
}

func (v NullableCreateApplicationRequest) Get() *CreateApplicationRequest {
	return v.value
}

func (v *NullableCreateApplicationRequest) Set(val *CreateApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationRequest(val *CreateApplicationRequest) *NullableCreateApplicationRequest {
	return &NullableCreateApplicationRequest{value: val, isSet: true}
}

func (v NullableCreateApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


