/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ListSubdomains200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSubdomains200ResponseDataInner{}

// ListSubdomains200ResponseDataInner struct for ListSubdomains200ResponseDataInner
type ListSubdomains200ResponseDataInner struct {
	// The subdomain ID.
	Id *string `json:"id,omitempty"`
	// The subdomain name.
	Fqdn *string `json:"fqdn,omitempty"`
	// The number of services associated with the subdomain.
	ServicesCount *int `json:"servicesCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListSubdomains200ResponseDataInner ListSubdomains200ResponseDataInner

// NewListSubdomains200ResponseDataInner instantiates a new ListSubdomains200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSubdomains200ResponseDataInner() *ListSubdomains200ResponseDataInner {
	this := ListSubdomains200ResponseDataInner{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var fqdn string = "example.com"
	this.Fqdn = &fqdn
	var servicesCount int = 10
	this.ServicesCount = &servicesCount
	return &this
}

// NewListSubdomains200ResponseDataInnerWithDefaults instantiates a new ListSubdomains200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSubdomains200ResponseDataInnerWithDefaults() *ListSubdomains200ResponseDataInner {
	this := ListSubdomains200ResponseDataInner{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var fqdn string = "example.com"
	this.Fqdn = &fqdn
	var servicesCount int = 10
	this.ServicesCount = &servicesCount
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListSubdomains200ResponseDataInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubdomains200ResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListSubdomains200ResponseDataInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ListSubdomains200ResponseDataInner) SetId(v string) {
	o.Id = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ListSubdomains200ResponseDataInner) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubdomains200ResponseDataInner) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ListSubdomains200ResponseDataInner) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ListSubdomains200ResponseDataInner) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetServicesCount returns the ServicesCount field value if set, zero value otherwise.
func (o *ListSubdomains200ResponseDataInner) GetServicesCount() int {
	if o == nil || IsNil(o.ServicesCount) {
		var ret int
		return ret
	}
	return *o.ServicesCount
}

// GetServicesCountOk returns a tuple with the ServicesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubdomains200ResponseDataInner) GetServicesCountOk() (*int, bool) {
	if o == nil || IsNil(o.ServicesCount) {
		return nil, false
	}
	return o.ServicesCount, true
}

// HasServicesCount returns a boolean if a field has been set.
func (o *ListSubdomains200ResponseDataInner) HasServicesCount() bool {
	if o != nil && !IsNil(o.ServicesCount) {
		return true
	}

	return false
}

// SetServicesCount gets a reference to the given int and assigns it to the ServicesCount field.
func (o *ListSubdomains200ResponseDataInner) SetServicesCount(v int) {
	o.ServicesCount = &v
}

func (o ListSubdomains200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSubdomains200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.ServicesCount) {
		toSerialize["servicesCount"] = o.ServicesCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListSubdomains200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	varListSubdomains200ResponseDataInner := _ListSubdomains200ResponseDataInner{}

	err = json.Unmarshal(data, &varListSubdomains200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = ListSubdomains200ResponseDataInner(varListSubdomains200ResponseDataInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "servicesCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListSubdomains200ResponseDataInner struct {
	value *ListSubdomains200ResponseDataInner
	isSet bool
}

func (v NullableListSubdomains200ResponseDataInner) Get() *ListSubdomains200ResponseDataInner {
	return v.value
}

func (v *NullableListSubdomains200ResponseDataInner) Set(val *ListSubdomains200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListSubdomains200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListSubdomains200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSubdomains200ResponseDataInner(val *ListSubdomains200ResponseDataInner) *NullableListSubdomains200ResponseDataInner {
	return &NullableListSubdomains200ResponseDataInner{value: val, isSet: true}
}

func (v NullableListSubdomains200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSubdomains200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


