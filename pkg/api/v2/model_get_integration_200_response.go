/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// checks if the GetIntegration200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIntegration200Response{}

// GetIntegration200Response struct for GetIntegration200Response
type GetIntegration200Response struct {
	Data GetIntegration200ResponseData `json:"data"`
	// The integration ID.
	Id *string `json:"id,omitempty"`
	// The name of the integration.
	Name *string `json:"name,omitempty"`
	// A location ID to use with this integration.
	LocationId *string `json:"locationId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetIntegration200Response GetIntegration200Response

// NewGetIntegration200Response instantiates a new GetIntegration200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIntegration200Response(data GetIntegration200ResponseData) *GetIntegration200Response {
	this := GetIntegration200Response{}
	this.Data = data
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Integration Name"
	this.Name = &name
	var locationId string = "00000000-0000-0000-0000-000000000000"
	this.LocationId = &locationId
	return &this
}

// NewGetIntegration200ResponseWithDefaults instantiates a new GetIntegration200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIntegration200ResponseWithDefaults() *GetIntegration200Response {
	this := GetIntegration200Response{}
	var id string = "00000000-0000-0000-0000-000000000000"
	this.Id = &id
	var name string = "Integration Name"
	this.Name = &name
	var locationId string = "00000000-0000-0000-0000-000000000000"
	this.LocationId = &locationId
	return &this
}

// GetData returns the Data field value
func (o *GetIntegration200Response) GetData() GetIntegration200ResponseData {
	if o == nil {
		var ret GetIntegration200ResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *GetIntegration200Response) GetDataOk() (*GetIntegration200ResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *GetIntegration200Response) SetData(v GetIntegration200ResponseData) {
	o.Data = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetIntegration200Response) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegration200Response) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetIntegration200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetIntegration200Response) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetIntegration200Response) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegration200Response) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetIntegration200Response) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetIntegration200Response) SetName(v string) {
	o.Name = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *GetIntegration200Response) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIntegration200Response) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *GetIntegration200Response) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *GetIntegration200Response) SetLocationId(v string) {
	o.LocationId = &v
}

func (o GetIntegration200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIntegration200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LocationId) {
		toSerialize["locationId"] = o.LocationId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetIntegration200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetIntegration200Response := _GetIntegration200Response{}

	err = json.Unmarshal(data, &varGetIntegration200Response)

	if err != nil {
		return err
	}

	*o = GetIntegration200Response(varGetIntegration200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "locationId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetIntegration200Response struct {
	value *GetIntegration200Response
	isSet bool
}

func (v NullableGetIntegration200Response) Get() *GetIntegration200Response {
	return v.value
}

func (v *NullableGetIntegration200Response) Set(val *GetIntegration200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIntegration200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIntegration200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIntegration200Response(val *GetIntegration200Response) *NullableGetIntegration200Response {
	return &NullableGetIntegration200Response{value: val, isSet: true}
}

func (v NullableGetIntegration200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIntegration200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


