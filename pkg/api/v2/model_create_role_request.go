/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRoleRequest{}

// CreateRoleRequest struct for CreateRoleRequest
type CreateRoleRequest struct {
	// The name of the role.
	Name string `json:"name"`
	// Set as administrator of the resource.
	ReportingAdministrator *bool `json:"reportingAdministrator,omitempty"`
	// Set as administrator of the resource.
	IntegrationAdministrator *bool `json:"integrationAdministrator,omitempty"`
	// Access Level to the resource.
	ApplicationAccessLevel *string `json:"applicationAccessLevel,omitempty"`
	// Access Level to the resource.
	InventoryAccessLevel *string `json:"inventoryAccessLevel,omitempty"`
	// Access Level to the resource.
	WorkflowsAccessLevel *string `json:"workflowsAccessLevel,omitempty"`
}

type _CreateRoleRequest CreateRoleRequest

// NewCreateRoleRequest instantiates a new CreateRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRoleRequest(name string) *CreateRoleRequest {
	this := CreateRoleRequest{}
	this.Name = name
	var applicationAccessLevel string = "NONE"
	this.ApplicationAccessLevel = &applicationAccessLevel
	var inventoryAccessLevel string = "NONE"
	this.InventoryAccessLevel = &inventoryAccessLevel
	var workflowsAccessLevel string = "NONE"
	this.WorkflowsAccessLevel = &workflowsAccessLevel
	return &this
}

// NewCreateRoleRequestWithDefaults instantiates a new CreateRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRoleRequestWithDefaults() *CreateRoleRequest {
	this := CreateRoleRequest{}
	var applicationAccessLevel string = "NONE"
	this.ApplicationAccessLevel = &applicationAccessLevel
	var inventoryAccessLevel string = "NONE"
	this.InventoryAccessLevel = &inventoryAccessLevel
	var workflowsAccessLevel string = "NONE"
	this.WorkflowsAccessLevel = &workflowsAccessLevel
	return &this
}

// GetName returns the Name field value
func (o *CreateRoleRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateRoleRequest) SetName(v string) {
	o.Name = v
}

// GetReportingAdministrator returns the ReportingAdministrator field value if set, zero value otherwise.
func (o *CreateRoleRequest) GetReportingAdministrator() bool {
	if o == nil || IsNil(o.ReportingAdministrator) {
		var ret bool
		return ret
	}
	return *o.ReportingAdministrator
}

// GetReportingAdministratorOk returns a tuple with the ReportingAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetReportingAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.ReportingAdministrator) {
		return nil, false
	}
	return o.ReportingAdministrator, true
}

// HasReportingAdministrator returns a boolean if a field has been set.
func (o *CreateRoleRequest) HasReportingAdministrator() bool {
	if o != nil && !IsNil(o.ReportingAdministrator) {
		return true
	}

	return false
}

// SetReportingAdministrator gets a reference to the given bool and assigns it to the ReportingAdministrator field.
func (o *CreateRoleRequest) SetReportingAdministrator(v bool) {
	o.ReportingAdministrator = &v
}

// GetIntegrationAdministrator returns the IntegrationAdministrator field value if set, zero value otherwise.
func (o *CreateRoleRequest) GetIntegrationAdministrator() bool {
	if o == nil || IsNil(o.IntegrationAdministrator) {
		var ret bool
		return ret
	}
	return *o.IntegrationAdministrator
}

// GetIntegrationAdministratorOk returns a tuple with the IntegrationAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetIntegrationAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.IntegrationAdministrator) {
		return nil, false
	}
	return o.IntegrationAdministrator, true
}

// HasIntegrationAdministrator returns a boolean if a field has been set.
func (o *CreateRoleRequest) HasIntegrationAdministrator() bool {
	if o != nil && !IsNil(o.IntegrationAdministrator) {
		return true
	}

	return false
}

// SetIntegrationAdministrator gets a reference to the given bool and assigns it to the IntegrationAdministrator field.
func (o *CreateRoleRequest) SetIntegrationAdministrator(v bool) {
	o.IntegrationAdministrator = &v
}

// GetApplicationAccessLevel returns the ApplicationAccessLevel field value if set, zero value otherwise.
func (o *CreateRoleRequest) GetApplicationAccessLevel() string {
	if o == nil || IsNil(o.ApplicationAccessLevel) {
		var ret string
		return ret
	}
	return *o.ApplicationAccessLevel
}

// GetApplicationAccessLevelOk returns a tuple with the ApplicationAccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetApplicationAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationAccessLevel) {
		return nil, false
	}
	return o.ApplicationAccessLevel, true
}

// HasApplicationAccessLevel returns a boolean if a field has been set.
func (o *CreateRoleRequest) HasApplicationAccessLevel() bool {
	if o != nil && !IsNil(o.ApplicationAccessLevel) {
		return true
	}

	return false
}

// SetApplicationAccessLevel gets a reference to the given string and assigns it to the ApplicationAccessLevel field.
func (o *CreateRoleRequest) SetApplicationAccessLevel(v string) {
	o.ApplicationAccessLevel = &v
}

// GetInventoryAccessLevel returns the InventoryAccessLevel field value if set, zero value otherwise.
func (o *CreateRoleRequest) GetInventoryAccessLevel() string {
	if o == nil || IsNil(o.InventoryAccessLevel) {
		var ret string
		return ret
	}
	return *o.InventoryAccessLevel
}

// GetInventoryAccessLevelOk returns a tuple with the InventoryAccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetInventoryAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryAccessLevel) {
		return nil, false
	}
	return o.InventoryAccessLevel, true
}

// HasInventoryAccessLevel returns a boolean if a field has been set.
func (o *CreateRoleRequest) HasInventoryAccessLevel() bool {
	if o != nil && !IsNil(o.InventoryAccessLevel) {
		return true
	}

	return false
}

// SetInventoryAccessLevel gets a reference to the given string and assigns it to the InventoryAccessLevel field.
func (o *CreateRoleRequest) SetInventoryAccessLevel(v string) {
	o.InventoryAccessLevel = &v
}

// GetWorkflowsAccessLevel returns the WorkflowsAccessLevel field value if set, zero value otherwise.
func (o *CreateRoleRequest) GetWorkflowsAccessLevel() string {
	if o == nil || IsNil(o.WorkflowsAccessLevel) {
		var ret string
		return ret
	}
	return *o.WorkflowsAccessLevel
}

// GetWorkflowsAccessLevelOk returns a tuple with the WorkflowsAccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoleRequest) GetWorkflowsAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowsAccessLevel) {
		return nil, false
	}
	return o.WorkflowsAccessLevel, true
}

// HasWorkflowsAccessLevel returns a boolean if a field has been set.
func (o *CreateRoleRequest) HasWorkflowsAccessLevel() bool {
	if o != nil && !IsNil(o.WorkflowsAccessLevel) {
		return true
	}

	return false
}

// SetWorkflowsAccessLevel gets a reference to the given string and assigns it to the WorkflowsAccessLevel field.
func (o *CreateRoleRequest) SetWorkflowsAccessLevel(v string) {
	o.WorkflowsAccessLevel = &v
}

func (o CreateRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ReportingAdministrator) {
		toSerialize["reportingAdministrator"] = o.ReportingAdministrator
	}
	if !IsNil(o.IntegrationAdministrator) {
		toSerialize["integrationAdministrator"] = o.IntegrationAdministrator
	}
	if !IsNil(o.ApplicationAccessLevel) {
		toSerialize["applicationAccessLevel"] = o.ApplicationAccessLevel
	}
	if !IsNil(o.InventoryAccessLevel) {
		toSerialize["inventoryAccessLevel"] = o.InventoryAccessLevel
	}
	if !IsNil(o.WorkflowsAccessLevel) {
		toSerialize["workflowsAccessLevel"] = o.WorkflowsAccessLevel
	}
	return toSerialize, nil
}

func (o *CreateRoleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRoleRequest := _CreateRoleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRoleRequest)

	if err != nil {
		return err
	}

	*o = CreateRoleRequest(varCreateRoleRequest)

	return err
}

type NullableCreateRoleRequest struct {
	value *CreateRoleRequest
	isSet bool
}

func (v NullableCreateRoleRequest) Get() *CreateRoleRequest {
	return v.value
}

func (v *NullableCreateRoleRequest) Set(val *CreateRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoleRequest(val *CreateRoleRequest) *NullableCreateRoleRequest {
	return &NullableCreateRoleRequest{value: val, isSet: true}
}

func (v NullableCreateRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


