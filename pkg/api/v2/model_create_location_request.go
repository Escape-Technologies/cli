/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateLocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLocationRequest{}

// CreateLocationRequest struct for CreateLocationRequest
type CreateLocationRequest struct {
	// The name of the location.
	Name string `json:"name"`
	// The SSH public key to use to connect to the location.
	SshPublicKey string `json:"sshPublicKey"`
}

type _CreateLocationRequest CreateLocationRequest

// NewCreateLocationRequest instantiates a new CreateLocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLocationRequest(name string, sshPublicKey string) *CreateLocationRequest {
	this := CreateLocationRequest{}
	this.Name = name
	this.SshPublicKey = sshPublicKey
	return &this
}

// NewCreateLocationRequestWithDefaults instantiates a new CreateLocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLocationRequestWithDefaults() *CreateLocationRequest {
	this := CreateLocationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateLocationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateLocationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateLocationRequest) SetName(v string) {
	o.Name = v
}

// GetSshPublicKey returns the SshPublicKey field value
func (o *CreateLocationRequest) GetSshPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshPublicKey
}

// GetSshPublicKeyOk returns a tuple with the SshPublicKey field value
// and a boolean to check if the value has been set.
func (o *CreateLocationRequest) GetSshPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshPublicKey, true
}

// SetSshPublicKey sets field value
func (o *CreateLocationRequest) SetSshPublicKey(v string) {
	o.SshPublicKey = v
}

func (o CreateLocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["sshPublicKey"] = o.SshPublicKey
	return toSerialize, nil
}

func (o *CreateLocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sshPublicKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLocationRequest := _CreateLocationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateLocationRequest)

	if err != nil {
		return err
	}

	*o = CreateLocationRequest(varCreateLocationRequest)

	return err
}

type NullableCreateLocationRequest struct {
	value *CreateLocationRequest
	isSet bool
}

func (v NullableCreateLocationRequest) Get() *CreateLocationRequest {
	return v.value
}

func (v *NullableCreateLocationRequest) Set(val *CreateLocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLocationRequest(val *CreateLocationRequest) *NullableCreateLocationRequest {
	return &NullableCreateLocationRequest{value: val, isSet: true}
}

func (v NullableCreateLocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


