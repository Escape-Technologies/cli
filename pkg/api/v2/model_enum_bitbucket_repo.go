/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumBITBUCKETREPO the model 'EnumBITBUCKETREPO'
type EnumBITBUCKETREPO string

// List of Enum_BITBUCKET_REPO
const (
	ENUMBITBUCKETREPO_BITBUCKET_REPO EnumBITBUCKETREPO = "BITBUCKET_REPO"
)

// All allowed values of EnumBITBUCKETREPO enum
var AllowedEnumBITBUCKETREPOEnumValues = []EnumBITBUCKETREPO{
	"BITBUCKET_REPO",
}

func (v *EnumBITBUCKETREPO) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumBITBUCKETREPO(value)
	for _, existing := range AllowedEnumBITBUCKETREPOEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumBITBUCKETREPO", value)
}

// NewEnumBITBUCKETREPOFromValue returns a pointer to a valid EnumBITBUCKETREPO
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumBITBUCKETREPOFromValue(v string) (*EnumBITBUCKETREPO, error) {
	ev := EnumBITBUCKETREPO(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumBITBUCKETREPO: valid values are %v", v, AllowedEnumBITBUCKETREPOEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumBITBUCKETREPO) IsValid() bool {
	for _, existing := range AllowedEnumBITBUCKETREPOEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_BITBUCKET_REPO value
func (v EnumBITBUCKETREPO) Ptr() *EnumBITBUCKETREPO {
	return &v
}

type NullableEnumBITBUCKETREPO struct {
	value *EnumBITBUCKETREPO
	isSet bool
}

func (v NullableEnumBITBUCKETREPO) Get() *EnumBITBUCKETREPO {
	return v.value
}

func (v *NullableEnumBITBUCKETREPO) Set(val *EnumBITBUCKETREPO) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumBITBUCKETREPO) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumBITBUCKETREPO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumBITBUCKETREPO(val *EnumBITBUCKETREPO) *NullableEnumBITBUCKETREPO {
	return &NullableEnumBITBUCKETREPO{value: val, isSet: true}
}

func (v NullableEnumBITBUCKETREPO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumBITBUCKETREPO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

