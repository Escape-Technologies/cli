/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StartApplicationScanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartApplicationScanRequest{}

// StartApplicationScanRequest struct for StartApplicationScanRequest
type StartApplicationScanRequest struct {
	// The ID of the organization to start a scan
	OrganizationId string `json:"organizationId"`
}

type _StartApplicationScanRequest StartApplicationScanRequest

// NewStartApplicationScanRequest instantiates a new StartApplicationScanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartApplicationScanRequest(organizationId string) *StartApplicationScanRequest {
	this := StartApplicationScanRequest{}
	this.OrganizationId = organizationId
	return &this
}

// NewStartApplicationScanRequestWithDefaults instantiates a new StartApplicationScanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartApplicationScanRequestWithDefaults() *StartApplicationScanRequest {
	this := StartApplicationScanRequest{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value
func (o *StartApplicationScanRequest) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *StartApplicationScanRequest) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *StartApplicationScanRequest) SetOrganizationId(v string) {
	o.OrganizationId = v
}

func (o StartApplicationScanRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartApplicationScanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationId"] = o.OrganizationId
	return toSerialize, nil
}

func (o *StartApplicationScanRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartApplicationScanRequest := _StartApplicationScanRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStartApplicationScanRequest)

	if err != nil {
		return err
	}

	*o = StartApplicationScanRequest(varStartApplicationScanRequest)

	return err
}

type NullableStartApplicationScanRequest struct {
	value *StartApplicationScanRequest
	isSet bool
}

func (v NullableStartApplicationScanRequest) Get() *StartApplicationScanRequest {
	return v.value
}

func (v *NullableStartApplicationScanRequest) Set(val *StartApplicationScanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartApplicationScanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartApplicationScanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartApplicationScanRequest(val *StartApplicationScanRequest) *NullableStartApplicationScanRequest {
	return &NullableStartApplicationScanRequest{value: val, isSet: true}
}

func (v NullableStartApplicationScanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartApplicationScanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


