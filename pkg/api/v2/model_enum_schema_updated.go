/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumSCHEMAUPDATED the model 'EnumSCHEMAUPDATED'
type EnumSCHEMAUPDATED string

// List of Enum_SCHEMA_UPDATED
const (
	ENUMSCHEMAUPDATED_SCHEMA_UPDATED EnumSCHEMAUPDATED = "Schema updated"
)

// All allowed values of EnumSCHEMAUPDATED enum
var AllowedEnumSCHEMAUPDATEDEnumValues = []EnumSCHEMAUPDATED{
	"Schema updated",
}

func (v *EnumSCHEMAUPDATED) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSCHEMAUPDATED(value)
	for _, existing := range AllowedEnumSCHEMAUPDATEDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumSCHEMAUPDATED", value)
}

// NewEnumSCHEMAUPDATEDFromValue returns a pointer to a valid EnumSCHEMAUPDATED
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSCHEMAUPDATEDFromValue(v string) (*EnumSCHEMAUPDATED, error) {
	ev := EnumSCHEMAUPDATED(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSCHEMAUPDATED: valid values are %v", v, AllowedEnumSCHEMAUPDATEDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSCHEMAUPDATED) IsValid() bool {
	for _, existing := range AllowedEnumSCHEMAUPDATEDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_SCHEMA_UPDATED value
func (v EnumSCHEMAUPDATED) Ptr() *EnumSCHEMAUPDATED {
	return &v
}

type NullableEnumSCHEMAUPDATED struct {
	value *EnumSCHEMAUPDATED
	isSet bool
}

func (v NullableEnumSCHEMAUPDATED) Get() *EnumSCHEMAUPDATED {
	return v.value
}

func (v *NullableEnumSCHEMAUPDATED) Set(val *EnumSCHEMAUPDATED) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSCHEMAUPDATED) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSCHEMAUPDATED) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSCHEMAUPDATED(val *EnumSCHEMAUPDATED) *NullableEnumSCHEMAUPDATED {
	return &NullableEnumSCHEMAUPDATED{value: val, isSet: true}
}

func (v NullableEnumSCHEMAUPDATED) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSCHEMAUPDATED) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

