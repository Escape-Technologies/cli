/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumCOGNITOUSERPASS the model 'EnumCOGNITOUSERPASS'
type EnumCOGNITOUSERPASS string

// List of Enum_COGNITO_USERPASS
const (
	ENUMCOGNITOUSERPASS_COGNITO_USERPASS EnumCOGNITOUSERPASS = "cognito_userpass"
)

// All allowed values of EnumCOGNITOUSERPASS enum
var AllowedEnumCOGNITOUSERPASSEnumValues = []EnumCOGNITOUSERPASS{
	"cognito_userpass",
}

func (v *EnumCOGNITOUSERPASS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCOGNITOUSERPASS(value)
	for _, existing := range AllowedEnumCOGNITOUSERPASSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumCOGNITOUSERPASS", value)
}

// NewEnumCOGNITOUSERPASSFromValue returns a pointer to a valid EnumCOGNITOUSERPASS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCOGNITOUSERPASSFromValue(v string) (*EnumCOGNITOUSERPASS, error) {
	ev := EnumCOGNITOUSERPASS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCOGNITOUSERPASS: valid values are %v", v, AllowedEnumCOGNITOUSERPASSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCOGNITOUSERPASS) IsValid() bool {
	for _, existing := range AllowedEnumCOGNITOUSERPASSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_COGNITO_USERPASS value
func (v EnumCOGNITOUSERPASS) Ptr() *EnumCOGNITOUSERPASS {
	return &v
}

type NullableEnumCOGNITOUSERPASS struct {
	value *EnumCOGNITOUSERPASS
	isSet bool
}

func (v NullableEnumCOGNITOUSERPASS) Get() *EnumCOGNITOUSERPASS {
	return v.value
}

func (v *NullableEnumCOGNITOUSERPASS) Set(val *EnumCOGNITOUSERPASS) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCOGNITOUSERPASS) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCOGNITOUSERPASS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCOGNITOUSERPASS(val *EnumCOGNITOUSERPASS) *NullableEnumCOGNITOUSERPASS {
	return &NullableEnumCOGNITOUSERPASS{value: val, isSet: true}
}

func (v NullableEnumCOGNITOUSERPASS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCOGNITOUSERPASS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

