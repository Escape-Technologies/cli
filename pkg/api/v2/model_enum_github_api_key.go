/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumGITHUBAPIKEY the model 'EnumGITHUBAPIKEY'
type EnumGITHUBAPIKEY string

// List of Enum_GITHUB_API_KEY
const (
	ENUMGITHUBAPIKEY_GITHUB_API_KEY EnumGITHUBAPIKEY = "GITHUB_API_KEY"
)

// All allowed values of EnumGITHUBAPIKEY enum
var AllowedEnumGITHUBAPIKEYEnumValues = []EnumGITHUBAPIKEY{
	"GITHUB_API_KEY",
}

func (v *EnumGITHUBAPIKEY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGITHUBAPIKEY(value)
	for _, existing := range AllowedEnumGITHUBAPIKEYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumGITHUBAPIKEY", value)
}

// NewEnumGITHUBAPIKEYFromValue returns a pointer to a valid EnumGITHUBAPIKEY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGITHUBAPIKEYFromValue(v string) (*EnumGITHUBAPIKEY, error) {
	ev := EnumGITHUBAPIKEY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGITHUBAPIKEY: valid values are %v", v, AllowedEnumGITHUBAPIKEYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGITHUBAPIKEY) IsValid() bool {
	for _, existing := range AllowedEnumGITHUBAPIKEYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_GITHUB_API_KEY value
func (v EnumGITHUBAPIKEY) Ptr() *EnumGITHUBAPIKEY {
	return &v
}

type NullableEnumGITHUBAPIKEY struct {
	value *EnumGITHUBAPIKEY
	isSet bool
}

func (v NullableEnumGITHUBAPIKEY) Get() *EnumGITHUBAPIKEY {
	return v.value
}

func (v *NullableEnumGITHUBAPIKEY) Set(val *EnumGITHUBAPIKEY) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGITHUBAPIKEY) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGITHUBAPIKEY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGITHUBAPIKEY(val *EnumGITHUBAPIKEY) *NullableEnumGITHUBAPIKEY {
	return &NullableEnumGITHUBAPIKEY{value: val, isSet: true}
}

func (v NullableEnumGITHUBAPIKEY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGITHUBAPIKEY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

