/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)


// CreateApplicationRequestSchema struct for CreateApplicationRequestSchema
type CreateApplicationRequestSchema struct {
	CreateApplicationRequestSchemaAnyOf *CreateApplicationRequestSchemaAnyOf
	CreateApplicationRequestSchemaAnyOf1 *CreateApplicationRequestSchemaAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateApplicationRequestSchema) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CreateApplicationRequestSchemaAnyOf
	err = json.Unmarshal(data, &dst.CreateApplicationRequestSchemaAnyOf);
	if err == nil {
		jsonCreateApplicationRequestSchemaAnyOf, _ := json.Marshal(dst.CreateApplicationRequestSchemaAnyOf)
		if string(jsonCreateApplicationRequestSchemaAnyOf) == "{}" { // empty struct
			dst.CreateApplicationRequestSchemaAnyOf = nil
		} else {
			return nil // data stored in dst.CreateApplicationRequestSchemaAnyOf, return on the first match
		}
	} else {
		dst.CreateApplicationRequestSchemaAnyOf = nil
	}

	// try to unmarshal JSON data into CreateApplicationRequestSchemaAnyOf1
	err = json.Unmarshal(data, &dst.CreateApplicationRequestSchemaAnyOf1);
	if err == nil {
		jsonCreateApplicationRequestSchemaAnyOf1, _ := json.Marshal(dst.CreateApplicationRequestSchemaAnyOf1)
		if string(jsonCreateApplicationRequestSchemaAnyOf1) == "{}" { // empty struct
			dst.CreateApplicationRequestSchemaAnyOf1 = nil
		} else {
			return nil // data stored in dst.CreateApplicationRequestSchemaAnyOf1, return on the first match
		}
	} else {
		dst.CreateApplicationRequestSchemaAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateApplicationRequestSchema)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateApplicationRequestSchema) MarshalJSON() ([]byte, error) {
	if src.CreateApplicationRequestSchemaAnyOf != nil {
		return json.Marshal(&src.CreateApplicationRequestSchemaAnyOf)
	}

	if src.CreateApplicationRequestSchemaAnyOf1 != nil {
		return json.Marshal(&src.CreateApplicationRequestSchemaAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateApplicationRequestSchema struct {
	value *CreateApplicationRequestSchema
	isSet bool
}

func (v NullableCreateApplicationRequestSchema) Get() *CreateApplicationRequestSchema {
	return v.value
}

func (v *NullableCreateApplicationRequestSchema) Set(val *CreateApplicationRequestSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationRequestSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationRequestSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationRequestSchema(val *CreateApplicationRequestSchema) *NullableCreateApplicationRequestSchema {
	return &NullableCreateApplicationRequestSchema{value: val, isSet: true}
}

func (v NullableCreateApplicationRequestSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationRequestSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


