/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumINTEGRATIONDELETEDSUCCESSFULLY the model 'EnumINTEGRATIONDELETEDSUCCESSFULLY'
type EnumINTEGRATIONDELETEDSUCCESSFULLY string

// List of Enum_INTEGRATION_DELETED_SUCCESSFULLY
const (
	ENUMINTEGRATIONDELETEDSUCCESSFULLY_INTEGRATION_DELETED_SUCCESSFULLY EnumINTEGRATIONDELETEDSUCCESSFULLY = "Integration deleted successfully"
)

// All allowed values of EnumINTEGRATIONDELETEDSUCCESSFULLY enum
var AllowedEnumINTEGRATIONDELETEDSUCCESSFULLYEnumValues = []EnumINTEGRATIONDELETEDSUCCESSFULLY{
	"Integration deleted successfully",
}

func (v *EnumINTEGRATIONDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumINTEGRATIONDELETEDSUCCESSFULLY(value)
	for _, existing := range AllowedEnumINTEGRATIONDELETEDSUCCESSFULLYEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumINTEGRATIONDELETEDSUCCESSFULLY", value)
}

// NewEnumINTEGRATIONDELETEDSUCCESSFULLYFromValue returns a pointer to a valid EnumINTEGRATIONDELETEDSUCCESSFULLY
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumINTEGRATIONDELETEDSUCCESSFULLYFromValue(v string) (*EnumINTEGRATIONDELETEDSUCCESSFULLY, error) {
	ev := EnumINTEGRATIONDELETEDSUCCESSFULLY(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumINTEGRATIONDELETEDSUCCESSFULLY: valid values are %v", v, AllowedEnumINTEGRATIONDELETEDSUCCESSFULLYEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumINTEGRATIONDELETEDSUCCESSFULLY) IsValid() bool {
	for _, existing := range AllowedEnumINTEGRATIONDELETEDSUCCESSFULLYEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_INTEGRATION_DELETED_SUCCESSFULLY value
func (v EnumINTEGRATIONDELETEDSUCCESSFULLY) Ptr() *EnumINTEGRATIONDELETEDSUCCESSFULLY {
	return &v
}

type NullableEnumINTEGRATIONDELETEDSUCCESSFULLY struct {
	value *EnumINTEGRATIONDELETEDSUCCESSFULLY
	isSet bool
}

func (v NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) Get() *EnumINTEGRATIONDELETEDSUCCESSFULLY {
	return v.value
}

func (v *NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) Set(val *EnumINTEGRATIONDELETEDSUCCESSFULLY) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumINTEGRATIONDELETEDSUCCESSFULLY(val *EnumINTEGRATIONDELETEDSUCCESSFULLY) *NullableEnumINTEGRATIONDELETEDSUCCESSFULLY {
	return &NullableEnumINTEGRATIONDELETEDSUCCESSFULLY{value: val, isSet: true}
}

func (v NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumINTEGRATIONDELETEDSUCCESSFULLY) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

