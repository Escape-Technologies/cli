/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 the model 'Enum33e76a7bc4c97ff8dbfe29d1d45aaa56'
type Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 string

// List of Enum_33e76a7bc4c97ff8dbfe29d1d45aaa56
const (
	ENUM33E76A7BC4C97FF8DBFE29D1D45AAA56_US Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 = "US"
	ENUM33E76A7BC4C97FF8DBFE29D1D45AAA56_EU Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 = "EU"
	ENUM33E76A7BC4C97FF8DBFE29D1D45AAA56_AU Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 = "AU"
)

// All allowed values of Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 enum
var AllowedEnum33e76a7bc4c97ff8dbfe29d1d45aaa56EnumValues = []Enum33e76a7bc4c97ff8dbfe29d1d45aaa56{
	"US",
	"EU",
	"AU",
}

func (v *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum33e76a7bc4c97ff8dbfe29d1d45aaa56(value)
	for _, existing := range AllowedEnum33e76a7bc4c97ff8dbfe29d1d45aaa56EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum33e76a7bc4c97ff8dbfe29d1d45aaa56", value)
}

// NewEnum33e76a7bc4c97ff8dbfe29d1d45aaa56FromValue returns a pointer to a valid Enum33e76a7bc4c97ff8dbfe29d1d45aaa56
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum33e76a7bc4c97ff8dbfe29d1d45aaa56FromValue(v string) (*Enum33e76a7bc4c97ff8dbfe29d1d45aaa56, error) {
	ev := Enum33e76a7bc4c97ff8dbfe29d1d45aaa56(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum33e76a7bc4c97ff8dbfe29d1d45aaa56: valid values are %v", v, AllowedEnum33e76a7bc4c97ff8dbfe29d1d45aaa56EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum33e76a7bc4c97ff8dbfe29d1d45aaa56) IsValid() bool {
	for _, existing := range AllowedEnum33e76a7bc4c97ff8dbfe29d1d45aaa56EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_33e76a7bc4c97ff8dbfe29d1d45aaa56 value
func (v Enum33e76a7bc4c97ff8dbfe29d1d45aaa56) Ptr() *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 {
	return &v
}

type NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56 struct {
	value *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56
	isSet bool
}

func (v NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) Get() *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56 {
	return v.value
}

func (v *NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) Set(val *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56(val *Enum33e76a7bc4c97ff8dbfe29d1d45aaa56) *NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56 {
	return &NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56{value: val, isSet: true}
}

func (v NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum33e76a7bc4c97ff8dbfe29d1d45aaa56) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

