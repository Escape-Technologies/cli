/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumCLOUDFLARE the model 'EnumCLOUDFLARE'
type EnumCLOUDFLARE string

// List of Enum_CLOUDFLARE
const (
	ENUMCLOUDFLARE_CLOUDFLARE EnumCLOUDFLARE = "CLOUDFLARE"
)

// All allowed values of EnumCLOUDFLARE enum
var AllowedEnumCLOUDFLAREEnumValues = []EnumCLOUDFLARE{
	"CLOUDFLARE",
}

func (v *EnumCLOUDFLARE) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCLOUDFLARE(value)
	for _, existing := range AllowedEnumCLOUDFLAREEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumCLOUDFLARE", value)
}

// NewEnumCLOUDFLAREFromValue returns a pointer to a valid EnumCLOUDFLARE
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCLOUDFLAREFromValue(v string) (*EnumCLOUDFLARE, error) {
	ev := EnumCLOUDFLARE(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCLOUDFLARE: valid values are %v", v, AllowedEnumCLOUDFLAREEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCLOUDFLARE) IsValid() bool {
	for _, existing := range AllowedEnumCLOUDFLAREEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_CLOUDFLARE value
func (v EnumCLOUDFLARE) Ptr() *EnumCLOUDFLARE {
	return &v
}

type NullableEnumCLOUDFLARE struct {
	value *EnumCLOUDFLARE
	isSet bool
}

func (v NullableEnumCLOUDFLARE) Get() *EnumCLOUDFLARE {
	return v.value
}

func (v *NullableEnumCLOUDFLARE) Set(val *EnumCLOUDFLARE) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCLOUDFLARE) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCLOUDFLARE) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCLOUDFLARE(val *EnumCLOUDFLARE) *NullableEnumCLOUDFLARE {
	return &NullableEnumCLOUDFLARE{value: val, isSet: true}
}

func (v NullableEnumCLOUDFLARE) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCLOUDFLARE) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

