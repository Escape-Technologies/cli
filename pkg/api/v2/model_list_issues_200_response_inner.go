/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListIssues200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssues200ResponseInner{}

// ListIssues200ResponseInner struct for ListIssues200ResponseInner
type ListIssues200ResponseInner struct {
	Id string `json:"id"`
	Issues []ListIssues200ResponseInnerIssuesInner `json:"issues"`
	Severity string `json:"severity"`
	Ignored bool `json:"ignored"`
	Test ListIssues200ResponseInnerTest `json:"test"`
}

type _ListIssues200ResponseInner ListIssues200ResponseInner

// NewListIssues200ResponseInner instantiates a new ListIssues200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssues200ResponseInner(id string, issues []ListIssues200ResponseInnerIssuesInner, severity string, ignored bool, test ListIssues200ResponseInnerTest) *ListIssues200ResponseInner {
	this := ListIssues200ResponseInner{}
	this.Id = id
	this.Issues = issues
	this.Severity = severity
	this.Ignored = ignored
	this.Test = test
	return &this
}

// NewListIssues200ResponseInnerWithDefaults instantiates a new ListIssues200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssues200ResponseInnerWithDefaults() *ListIssues200ResponseInner {
	this := ListIssues200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListIssues200ResponseInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListIssues200ResponseInner) SetId(v string) {
	o.Id = v
}

// GetIssues returns the Issues field value
func (o *ListIssues200ResponseInner) GetIssues() []ListIssues200ResponseInnerIssuesInner {
	if o == nil {
		var ret []ListIssues200ResponseInnerIssuesInner
		return ret
	}

	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInner) GetIssuesOk() ([]ListIssues200ResponseInnerIssuesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Issues, true
}

// SetIssues sets field value
func (o *ListIssues200ResponseInner) SetIssues(v []ListIssues200ResponseInnerIssuesInner) {
	o.Issues = v
}

// GetSeverity returns the Severity field value
func (o *ListIssues200ResponseInner) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInner) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *ListIssues200ResponseInner) SetSeverity(v string) {
	o.Severity = v
}

// GetIgnored returns the Ignored field value
func (o *ListIssues200ResponseInner) GetIgnored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInner) GetIgnoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ignored, true
}

// SetIgnored sets field value
func (o *ListIssues200ResponseInner) SetIgnored(v bool) {
	o.Ignored = v
}

// GetTest returns the Test field value
func (o *ListIssues200ResponseInner) GetTest() ListIssues200ResponseInnerTest {
	if o == nil {
		var ret ListIssues200ResponseInnerTest
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInner) GetTestOk() (*ListIssues200ResponseInnerTest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *ListIssues200ResponseInner) SetTest(v ListIssues200ResponseInnerTest) {
	o.Test = v
}

func (o ListIssues200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssues200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["issues"] = o.Issues
	toSerialize["severity"] = o.Severity
	toSerialize["ignored"] = o.Ignored
	toSerialize["test"] = o.Test
	return toSerialize, nil
}

func (o *ListIssues200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"issues",
		"severity",
		"ignored",
		"test",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssues200ResponseInner := _ListIssues200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListIssues200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListIssues200ResponseInner(varListIssues200ResponseInner)

	return err
}

type NullableListIssues200ResponseInner struct {
	value *ListIssues200ResponseInner
	isSet bool
}

func (v NullableListIssues200ResponseInner) Get() *ListIssues200ResponseInner {
	return v.value
}

func (v *NullableListIssues200ResponseInner) Set(val *ListIssues200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssues200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssues200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssues200ResponseInner(val *ListIssues200ResponseInner) *NullableListIssues200ResponseInner {
	return &NullableListIssues200ResponseInner{value: val, isSet: true}
}

func (v NullableListIssues200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssues200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


