/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum041c163680d484c3944c5d3c68a9635b Access level for workflows.
type Enum041c163680d484c3944c5d3c68a9635b string

// List of Enum_041c163680d484c3944c5d3c68a9635b
const (
	ENUM041C163680D484C3944C5D3C68A9635B_ADMIN Enum041c163680d484c3944c5d3c68a9635b = "ADMIN"
	ENUM041C163680D484C3944C5D3C68A9635B_EDITOR Enum041c163680d484c3944c5d3c68a9635b = "EDITOR"
	ENUM041C163680D484C3944C5D3C68A9635B_VIEWER Enum041c163680d484c3944c5d3c68a9635b = "VIEWER"
	ENUM041C163680D484C3944C5D3C68A9635B_NONE Enum041c163680d484c3944c5d3c68a9635b = "NONE"
)

// All allowed values of Enum041c163680d484c3944c5d3c68a9635b enum
var AllowedEnum041c163680d484c3944c5d3c68a9635bEnumValues = []Enum041c163680d484c3944c5d3c68a9635b{
	"ADMIN",
	"EDITOR",
	"VIEWER",
	"NONE",
}

func (v *Enum041c163680d484c3944c5d3c68a9635b) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum041c163680d484c3944c5d3c68a9635b(value)
	for _, existing := range AllowedEnum041c163680d484c3944c5d3c68a9635bEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum041c163680d484c3944c5d3c68a9635b", value)
}

// NewEnum041c163680d484c3944c5d3c68a9635bFromValue returns a pointer to a valid Enum041c163680d484c3944c5d3c68a9635b
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum041c163680d484c3944c5d3c68a9635bFromValue(v string) (*Enum041c163680d484c3944c5d3c68a9635b, error) {
	ev := Enum041c163680d484c3944c5d3c68a9635b(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum041c163680d484c3944c5d3c68a9635b: valid values are %v", v, AllowedEnum041c163680d484c3944c5d3c68a9635bEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum041c163680d484c3944c5d3c68a9635b) IsValid() bool {
	for _, existing := range AllowedEnum041c163680d484c3944c5d3c68a9635bEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_041c163680d484c3944c5d3c68a9635b value
func (v Enum041c163680d484c3944c5d3c68a9635b) Ptr() *Enum041c163680d484c3944c5d3c68a9635b {
	return &v
}

type NullableEnum041c163680d484c3944c5d3c68a9635b struct {
	value *Enum041c163680d484c3944c5d3c68a9635b
	isSet bool
}

func (v NullableEnum041c163680d484c3944c5d3c68a9635b) Get() *Enum041c163680d484c3944c5d3c68a9635b {
	return v.value
}

func (v *NullableEnum041c163680d484c3944c5d3c68a9635b) Set(val *Enum041c163680d484c3944c5d3c68a9635b) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum041c163680d484c3944c5d3c68a9635b) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum041c163680d484c3944c5d3c68a9635b) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum041c163680d484c3944c5d3c68a9635b(val *Enum041c163680d484c3944c5d3c68a9635b) *NullableEnum041c163680d484c3944c5d3c68a9635b {
	return &NullableEnum041c163680d484c3944c5d3c68a9635b{value: val, isSet: true}
}

func (v NullableEnum041c163680d484c3944c5d3c68a9635b) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum041c163680d484c3944c5d3c68a9635b) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

