/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum200018d75ade9e46d41a8d1efb27c511 the model 'Enum200018d75ade9e46d41a8d1efb27c511'
type Enum200018d75ade9e46d41a8d1efb27c511 string

// List of Enum_200018d75ade9e46d41a8d1efb27c511
const (
	ENUM200018D75ADE9E46D41A8D1EFB27C511_STRICT Enum200018d75ade9e46d41a8d1efb27c511 = "Strict"
	ENUM200018D75ADE9E46D41A8D1EFB27C511_LAX Enum200018d75ade9e46d41a8d1efb27c511 = "Lax"
	ENUM200018D75ADE9E46D41A8D1EFB27C511_NONE Enum200018d75ade9e46d41a8d1efb27c511 = "None"
)

// All allowed values of Enum200018d75ade9e46d41a8d1efb27c511 enum
var AllowedEnum200018d75ade9e46d41a8d1efb27c511EnumValues = []Enum200018d75ade9e46d41a8d1efb27c511{
	"Strict",
	"Lax",
	"None",
}

func (v *Enum200018d75ade9e46d41a8d1efb27c511) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum200018d75ade9e46d41a8d1efb27c511(value)
	for _, existing := range AllowedEnum200018d75ade9e46d41a8d1efb27c511EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum200018d75ade9e46d41a8d1efb27c511", value)
}

// NewEnum200018d75ade9e46d41a8d1efb27c511FromValue returns a pointer to a valid Enum200018d75ade9e46d41a8d1efb27c511
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum200018d75ade9e46d41a8d1efb27c511FromValue(v string) (*Enum200018d75ade9e46d41a8d1efb27c511, error) {
	ev := Enum200018d75ade9e46d41a8d1efb27c511(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum200018d75ade9e46d41a8d1efb27c511: valid values are %v", v, AllowedEnum200018d75ade9e46d41a8d1efb27c511EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum200018d75ade9e46d41a8d1efb27c511) IsValid() bool {
	for _, existing := range AllowedEnum200018d75ade9e46d41a8d1efb27c511EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_200018d75ade9e46d41a8d1efb27c511 value
func (v Enum200018d75ade9e46d41a8d1efb27c511) Ptr() *Enum200018d75ade9e46d41a8d1efb27c511 {
	return &v
}

type NullableEnum200018d75ade9e46d41a8d1efb27c511 struct {
	value *Enum200018d75ade9e46d41a8d1efb27c511
	isSet bool
}

func (v NullableEnum200018d75ade9e46d41a8d1efb27c511) Get() *Enum200018d75ade9e46d41a8d1efb27c511 {
	return v.value
}

func (v *NullableEnum200018d75ade9e46d41a8d1efb27c511) Set(val *Enum200018d75ade9e46d41a8d1efb27c511) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum200018d75ade9e46d41a8d1efb27c511) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum200018d75ade9e46d41a8d1efb27c511) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum200018d75ade9e46d41a8d1efb27c511(val *Enum200018d75ade9e46d41a8d1efb27c511) *NullableEnum200018d75ade9e46d41a8d1efb27c511 {
	return &NullableEnum200018d75ade9e46d41a8d1efb27c511{value: val, isSet: true}
}

func (v NullableEnum200018d75ade9e46d41a8d1efb27c511) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum200018d75ade9e46d41a8d1efb27c511) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

