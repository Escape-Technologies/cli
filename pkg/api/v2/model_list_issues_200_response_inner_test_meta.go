/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListIssues200ResponseInnerTestMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssues200ResponseInnerTestMeta{}

// ListIssues200ResponseInnerTestMeta struct for ListIssues200ResponseInnerTestMeta
type ListIssues200ResponseInnerTestMeta struct {
	TitleOnFail string `json:"titleOnFail"`
	Type string `json:"type"`
}

type _ListIssues200ResponseInnerTestMeta ListIssues200ResponseInnerTestMeta

// NewListIssues200ResponseInnerTestMeta instantiates a new ListIssues200ResponseInnerTestMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssues200ResponseInnerTestMeta(titleOnFail string, type_ string) *ListIssues200ResponseInnerTestMeta {
	this := ListIssues200ResponseInnerTestMeta{}
	this.TitleOnFail = titleOnFail
	this.Type = type_
	return &this
}

// NewListIssues200ResponseInnerTestMetaWithDefaults instantiates a new ListIssues200ResponseInnerTestMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssues200ResponseInnerTestMetaWithDefaults() *ListIssues200ResponseInnerTestMeta {
	this := ListIssues200ResponseInnerTestMeta{}
	return &this
}

// GetTitleOnFail returns the TitleOnFail field value
func (o *ListIssues200ResponseInnerTestMeta) GetTitleOnFail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TitleOnFail
}

// GetTitleOnFailOk returns a tuple with the TitleOnFail field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInnerTestMeta) GetTitleOnFailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TitleOnFail, true
}

// SetTitleOnFail sets field value
func (o *ListIssues200ResponseInnerTestMeta) SetTitleOnFail(v string) {
	o.TitleOnFail = v
}

// GetType returns the Type field value
func (o *ListIssues200ResponseInnerTestMeta) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInnerTestMeta) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ListIssues200ResponseInnerTestMeta) SetType(v string) {
	o.Type = v
}

func (o ListIssues200ResponseInnerTestMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssues200ResponseInnerTestMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["titleOnFail"] = o.TitleOnFail
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ListIssues200ResponseInnerTestMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"titleOnFail",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssues200ResponseInnerTestMeta := _ListIssues200ResponseInnerTestMeta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListIssues200ResponseInnerTestMeta)

	if err != nil {
		return err
	}

	*o = ListIssues200ResponseInnerTestMeta(varListIssues200ResponseInnerTestMeta)

	return err
}

type NullableListIssues200ResponseInnerTestMeta struct {
	value *ListIssues200ResponseInnerTestMeta
	isSet bool
}

func (v NullableListIssues200ResponseInnerTestMeta) Get() *ListIssues200ResponseInnerTestMeta {
	return v.value
}

func (v *NullableListIssues200ResponseInnerTestMeta) Set(val *ListIssues200ResponseInnerTestMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssues200ResponseInnerTestMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssues200ResponseInnerTestMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssues200ResponseInnerTestMeta(val *ListIssues200ResponseInnerTestMeta) *NullableListIssues200ResponseInnerTestMeta {
	return &NullableListIssues200ResponseInnerTestMeta{value: val, isSet: true}
}

func (v NullableListIssues200ResponseInnerTestMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssues200ResponseInnerTestMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


