/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum9c1e82c38fa16c4851aece69dc28da0b the model 'Enum9c1e82c38fa16c4851aece69dc28da0b'
type Enum9c1e82c38fa16c4851aece69dc28da0b string

// List of Enum_9c1e82c38fa16c4851aece69dc28da0b
const (
	ENUM9C1E82C38FA16C4851AECE69DC28DA0B_HIGH Enum9c1e82c38fa16c4851aece69dc28da0b = "HIGH"
	ENUM9C1E82C38FA16C4851AECE69DC28DA0B_MEDIUM Enum9c1e82c38fa16c4851aece69dc28da0b = "MEDIUM"
	ENUM9C1E82C38FA16C4851AECE69DC28DA0B_LOW Enum9c1e82c38fa16c4851aece69dc28da0b = "LOW"
	ENUM9C1E82C38FA16C4851AECE69DC28DA0B_INFO Enum9c1e82c38fa16c4851aece69dc28da0b = "INFO"
	ENUM9C1E82C38FA16C4851AECE69DC28DA0B_CRITICAL Enum9c1e82c38fa16c4851aece69dc28da0b = "CRITICAL"
)

// All allowed values of Enum9c1e82c38fa16c4851aece69dc28da0b enum
var AllowedEnum9c1e82c38fa16c4851aece69dc28da0bEnumValues = []Enum9c1e82c38fa16c4851aece69dc28da0b{
	"HIGH",
	"MEDIUM",
	"LOW",
	"INFO",
	"CRITICAL",
}

func (v *Enum9c1e82c38fa16c4851aece69dc28da0b) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum9c1e82c38fa16c4851aece69dc28da0b(value)
	for _, existing := range AllowedEnum9c1e82c38fa16c4851aece69dc28da0bEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum9c1e82c38fa16c4851aece69dc28da0b", value)
}

// NewEnum9c1e82c38fa16c4851aece69dc28da0bFromValue returns a pointer to a valid Enum9c1e82c38fa16c4851aece69dc28da0b
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum9c1e82c38fa16c4851aece69dc28da0bFromValue(v string) (*Enum9c1e82c38fa16c4851aece69dc28da0b, error) {
	ev := Enum9c1e82c38fa16c4851aece69dc28da0b(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum9c1e82c38fa16c4851aece69dc28da0b: valid values are %v", v, AllowedEnum9c1e82c38fa16c4851aece69dc28da0bEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum9c1e82c38fa16c4851aece69dc28da0b) IsValid() bool {
	for _, existing := range AllowedEnum9c1e82c38fa16c4851aece69dc28da0bEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_9c1e82c38fa16c4851aece69dc28da0b value
func (v Enum9c1e82c38fa16c4851aece69dc28da0b) Ptr() *Enum9c1e82c38fa16c4851aece69dc28da0b {
	return &v
}

type NullableEnum9c1e82c38fa16c4851aece69dc28da0b struct {
	value *Enum9c1e82c38fa16c4851aece69dc28da0b
	isSet bool
}

func (v NullableEnum9c1e82c38fa16c4851aece69dc28da0b) Get() *Enum9c1e82c38fa16c4851aece69dc28da0b {
	return v.value
}

func (v *NullableEnum9c1e82c38fa16c4851aece69dc28da0b) Set(val *Enum9c1e82c38fa16c4851aece69dc28da0b) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum9c1e82c38fa16c4851aece69dc28da0b) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum9c1e82c38fa16c4851aece69dc28da0b) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum9c1e82c38fa16c4851aece69dc28da0b(val *Enum9c1e82c38fa16c4851aece69dc28da0b) *NullableEnum9c1e82c38fa16c4851aece69dc28da0b {
	return &NullableEnum9c1e82c38fa16c4851aece69dc28da0b{value: val, isSet: true}
}

func (v NullableEnum9c1e82c38fa16c4851aece69dc28da0b) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum9c1e82c38fa16c4851aece69dc28da0b) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

