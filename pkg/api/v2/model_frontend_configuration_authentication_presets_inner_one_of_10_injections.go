/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)


// FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections struct for FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections
type FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections struct {
	ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner *[]FrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner
	ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1 *[]FrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner
	err = json.Unmarshal(data, &dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner);
	if err == nil {
		jsonArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner, _ := json.Marshal(dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner)
		if string(jsonArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner) == "{}" { // empty struct
			dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner = nil
		} else {
			return nil // data stored in dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner, return on the first match
		}
	} else {
		dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner = nil
	}

	// try to unmarshal JSON data into ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1
	err = json.Unmarshal(data, &dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1);
	if err == nil {
		jsonArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1, _ := json.Marshal(dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1)
		if string(jsonArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1) == "{}" { // empty struct
			dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1 = nil
		} else {
			return nil // data stored in dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1, return on the first match
		}
	} else {
		dst.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) MarshalJSON() ([]byte, error) {
	if src.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner != nil {
		return json.Marshal(&src.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner)
	}

	if src.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1 != nil {
		return json.Marshal(&src.ArrayOfFrontendConfigurationAuthenticationProceduresInnerInjectionsAnyOfInner1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections struct {
	value *FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections
	isSet bool
}

func (v NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) Get() *FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections {
	return v.value
}

func (v *NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) Set(val *FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) {
	v.value = val
	v.isSet = true
}

func (v NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) IsSet() bool {
	return v.isSet
}

func (v *NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections(val *FrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) *NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections {
	return &NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections{value: val, isSet: true}
}

func (v NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrontendConfigurationAuthenticationPresetsInnerOneOf10Injections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


