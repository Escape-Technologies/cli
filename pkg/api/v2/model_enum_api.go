/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumAPI the model 'EnumAPI'
type EnumAPI string

// List of Enum_API
const (
	ENUMAPI_API EnumAPI = "API"
)

// All allowed values of EnumAPI enum
var AllowedEnumAPIEnumValues = []EnumAPI{
	"API",
}

func (v *EnumAPI) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAPI(value)
	for _, existing := range AllowedEnumAPIEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumAPI", value)
}

// NewEnumAPIFromValue returns a pointer to a valid EnumAPI
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAPIFromValue(v string) (*EnumAPI, error) {
	ev := EnumAPI(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAPI: valid values are %v", v, AllowedEnumAPIEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAPI) IsValid() bool {
	for _, existing := range AllowedEnumAPIEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_API value
func (v EnumAPI) Ptr() *EnumAPI {
	return &v
}

type NullableEnumAPI struct {
	value *EnumAPI
	isSet bool
}

func (v NullableEnumAPI) Get() *EnumAPI {
	return v.value
}

func (v *NullableEnumAPI) Set(val *EnumAPI) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAPI) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAPI) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAPI(val *EnumAPI) *NullableEnumAPI {
	return &NullableEnumAPI{value: val, isSet: true}
}

func (v NullableEnumAPI) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAPI) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

