/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum6b715a076de4c8a128eec128b79c270b the model 'Enum6b715a076de4c8a128eec128b79c270b'
type Enum6b715a076de4c8a128eec128b79c270b string

// List of Enum_6b715a076de4c8a128eec128b79c270b
const (
	ENUM6B715A076DE4C8A128EEC128B79C270B_SEVERITY Enum6b715a076de4c8a128eec128b79c270b = "severity"
	ENUM6B715A076DE4C8A128EEC128B79C270B_APPLICATION_NAME Enum6b715a076de4c8a128eec128b79c270b = "applicationName"
	ENUM6B715A076DE4C8A128EEC128B79C270B_CONTEXT Enum6b715a076de4c8a128eec128b79c270b = "context"
	ENUM6B715A076DE4C8A128EEC128B79C270B_TEST_CATEGORY Enum6b715a076de4c8a128eec128b79c270b = "testCategory"
	ENUM6B715A076DE4C8A128EEC128B79C270B_SCAN_ID Enum6b715a076de4c8a128eec128b79c270b = "scanId"
	ENUM6B715A076DE4C8A128EEC128B79C270B_LINK_TO_ESCAPE Enum6b715a076de4c8a128eec128b79c270b = "linkToEscape"
)

// All allowed values of Enum6b715a076de4c8a128eec128b79c270b enum
var AllowedEnum6b715a076de4c8a128eec128b79c270bEnumValues = []Enum6b715a076de4c8a128eec128b79c270b{
	"severity",
	"applicationName",
	"context",
	"testCategory",
	"scanId",
	"linkToEscape",
}

func (v *Enum6b715a076de4c8a128eec128b79c270b) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum6b715a076de4c8a128eec128b79c270b(value)
	for _, existing := range AllowedEnum6b715a076de4c8a128eec128b79c270bEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum6b715a076de4c8a128eec128b79c270b", value)
}

// NewEnum6b715a076de4c8a128eec128b79c270bFromValue returns a pointer to a valid Enum6b715a076de4c8a128eec128b79c270b
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum6b715a076de4c8a128eec128b79c270bFromValue(v string) (*Enum6b715a076de4c8a128eec128b79c270b, error) {
	ev := Enum6b715a076de4c8a128eec128b79c270b(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum6b715a076de4c8a128eec128b79c270b: valid values are %v", v, AllowedEnum6b715a076de4c8a128eec128b79c270bEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum6b715a076de4c8a128eec128b79c270b) IsValid() bool {
	for _, existing := range AllowedEnum6b715a076de4c8a128eec128b79c270bEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_6b715a076de4c8a128eec128b79c270b value
func (v Enum6b715a076de4c8a128eec128b79c270b) Ptr() *Enum6b715a076de4c8a128eec128b79c270b {
	return &v
}

type NullableEnum6b715a076de4c8a128eec128b79c270b struct {
	value *Enum6b715a076de4c8a128eec128b79c270b
	isSet bool
}

func (v NullableEnum6b715a076de4c8a128eec128b79c270b) Get() *Enum6b715a076de4c8a128eec128b79c270b {
	return v.value
}

func (v *NullableEnum6b715a076de4c8a128eec128b79c270b) Set(val *Enum6b715a076de4c8a128eec128b79c270b) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum6b715a076de4c8a128eec128b79c270b) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum6b715a076de4c8a128eec128b79c270b) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum6b715a076de4c8a128eec128b79c270b(val *Enum6b715a076de4c8a128eec128b79c270b) *NullableEnum6b715a076de4c8a128eec128b79c270b {
	return &NullableEnum6b715a076de4c8a128eec128b79c270b{value: val, isSet: true}
}

func (v NullableEnum6b715a076de4c8a128eec128b79c270b) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum6b715a076de4c8a128eec128b79c270b) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

