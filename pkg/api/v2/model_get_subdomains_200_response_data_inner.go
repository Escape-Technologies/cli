/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetSubdomains200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSubdomains200ResponseDataInner{}

// GetSubdomains200ResponseDataInner struct for GetSubdomains200ResponseDataInner
type GetSubdomains200ResponseDataInner struct {
	// The subdomain ID.
	Id string `json:"id"`
	// The subdomain name.
	Fqdn string `json:"fqdn"`
	// The number of services associated with the subdomain.
	ServicesCount int `json:"servicesCount"`
}

type _GetSubdomains200ResponseDataInner GetSubdomains200ResponseDataInner

// NewGetSubdomains200ResponseDataInner instantiates a new GetSubdomains200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSubdomains200ResponseDataInner(id string, fqdn string, servicesCount int) *GetSubdomains200ResponseDataInner {
	this := GetSubdomains200ResponseDataInner{}
	this.Id = id
	this.Fqdn = fqdn
	this.ServicesCount = servicesCount
	return &this
}

// NewGetSubdomains200ResponseDataInnerWithDefaults instantiates a new GetSubdomains200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSubdomains200ResponseDataInnerWithDefaults() *GetSubdomains200ResponseDataInner {
	this := GetSubdomains200ResponseDataInner{}
	return &this
}

// GetId returns the Id field value
func (o *GetSubdomains200ResponseDataInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetSubdomains200ResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetSubdomains200ResponseDataInner) SetId(v string) {
	o.Id = v
}

// GetFqdn returns the Fqdn field value
func (o *GetSubdomains200ResponseDataInner) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *GetSubdomains200ResponseDataInner) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *GetSubdomains200ResponseDataInner) SetFqdn(v string) {
	o.Fqdn = v
}

// GetServicesCount returns the ServicesCount field value
func (o *GetSubdomains200ResponseDataInner) GetServicesCount() int {
	if o == nil {
		var ret int
		return ret
	}

	return o.ServicesCount
}

// GetServicesCountOk returns a tuple with the ServicesCount field value
// and a boolean to check if the value has been set.
func (o *GetSubdomains200ResponseDataInner) GetServicesCountOk() (*int, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServicesCount, true
}

// SetServicesCount sets field value
func (o *GetSubdomains200ResponseDataInner) SetServicesCount(v int) {
	o.ServicesCount = v
}

func (o GetSubdomains200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSubdomains200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["fqdn"] = o.Fqdn
	toSerialize["servicesCount"] = o.ServicesCount
	return toSerialize, nil
}

func (o *GetSubdomains200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"fqdn",
		"servicesCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSubdomains200ResponseDataInner := _GetSubdomains200ResponseDataInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSubdomains200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = GetSubdomains200ResponseDataInner(varGetSubdomains200ResponseDataInner)

	return err
}

type NullableGetSubdomains200ResponseDataInner struct {
	value *GetSubdomains200ResponseDataInner
	isSet bool
}

func (v NullableGetSubdomains200ResponseDataInner) Get() *GetSubdomains200ResponseDataInner {
	return v.value
}

func (v *NullableGetSubdomains200ResponseDataInner) Set(val *GetSubdomains200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSubdomains200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSubdomains200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSubdomains200ResponseDataInner(val *GetSubdomains200ResponseDataInner) *NullableGetSubdomains200ResponseDataInner {
	return &NullableGetSubdomains200ResponseDataInner{value: val, isSet: true}
}

func (v NullableGetSubdomains200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSubdomains200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


