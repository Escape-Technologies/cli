/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumGRAPHQL the model 'EnumGRAPHQL'
type EnumGRAPHQL string

// List of Enum_GRAPHQL
const (
	ENUMGRAPHQL_GRAPHQL EnumGRAPHQL = "graphql"
)

// All allowed values of EnumGRAPHQL enum
var AllowedEnumGRAPHQLEnumValues = []EnumGRAPHQL{
	"graphql",
}

func (v *EnumGRAPHQL) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGRAPHQL(value)
	for _, existing := range AllowedEnumGRAPHQLEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumGRAPHQL", value)
}

// NewEnumGRAPHQLFromValue returns a pointer to a valid EnumGRAPHQL
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGRAPHQLFromValue(v string) (*EnumGRAPHQL, error) {
	ev := EnumGRAPHQL(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGRAPHQL: valid values are %v", v, AllowedEnumGRAPHQLEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGRAPHQL) IsValid() bool {
	for _, existing := range AllowedEnumGRAPHQLEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_GRAPHQL value
func (v EnumGRAPHQL) Ptr() *EnumGRAPHQL {
	return &v
}

type NullableEnumGRAPHQL struct {
	value *EnumGRAPHQL
	isSet bool
}

func (v NullableEnumGRAPHQL) Get() *EnumGRAPHQL {
	return v.value
}

func (v *NullableEnumGRAPHQL) Set(val *EnumGRAPHQL) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGRAPHQL) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGRAPHQL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGRAPHQL(val *EnumGRAPHQL) *NullableEnumGRAPHQL {
	return &NullableEnumGRAPHQL{value: val, isSet: true}
}

func (v NullableEnumGRAPHQL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGRAPHQL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

