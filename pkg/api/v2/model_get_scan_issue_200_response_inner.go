/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetScanIssue200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetScanIssue200ResponseInner{}

// GetScanIssue200ResponseInner struct for GetScanIssue200ResponseInner
type GetScanIssue200ResponseInner struct {
	Id string `json:"id"`
	Ignored bool `json:"ignored"`
	FirstSeenScanId string `json:"firstSeenScanId"`
	LastSeenScanId string `json:"lastSeenScanId"`
	Severity string `json:"severity"`
	Risks []GetScanIssue200ResponseInnerRisksInner `json:"risks"`
}

type _GetScanIssue200ResponseInner GetScanIssue200ResponseInner

// NewGetScanIssue200ResponseInner instantiates a new GetScanIssue200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetScanIssue200ResponseInner(id string, ignored bool, firstSeenScanId string, lastSeenScanId string, severity string, risks []GetScanIssue200ResponseInnerRisksInner) *GetScanIssue200ResponseInner {
	this := GetScanIssue200ResponseInner{}
	this.Id = id
	this.Ignored = ignored
	this.FirstSeenScanId = firstSeenScanId
	this.LastSeenScanId = lastSeenScanId
	this.Severity = severity
	this.Risks = risks
	return &this
}

// NewGetScanIssue200ResponseInnerWithDefaults instantiates a new GetScanIssue200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetScanIssue200ResponseInnerWithDefaults() *GetScanIssue200ResponseInner {
	this := GetScanIssue200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *GetScanIssue200ResponseInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetScanIssue200ResponseInner) SetId(v string) {
	o.Id = v
}

// GetIgnored returns the Ignored field value
func (o *GetScanIssue200ResponseInner) GetIgnored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetIgnoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ignored, true
}

// SetIgnored sets field value
func (o *GetScanIssue200ResponseInner) SetIgnored(v bool) {
	o.Ignored = v
}

// GetFirstSeenScanId returns the FirstSeenScanId field value
func (o *GetScanIssue200ResponseInner) GetFirstSeenScanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstSeenScanId
}

// GetFirstSeenScanIdOk returns a tuple with the FirstSeenScanId field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetFirstSeenScanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstSeenScanId, true
}

// SetFirstSeenScanId sets field value
func (o *GetScanIssue200ResponseInner) SetFirstSeenScanId(v string) {
	o.FirstSeenScanId = v
}

// GetLastSeenScanId returns the LastSeenScanId field value
func (o *GetScanIssue200ResponseInner) GetLastSeenScanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastSeenScanId
}

// GetLastSeenScanIdOk returns a tuple with the LastSeenScanId field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetLastSeenScanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeenScanId, true
}

// SetLastSeenScanId sets field value
func (o *GetScanIssue200ResponseInner) SetLastSeenScanId(v string) {
	o.LastSeenScanId = v
}

// GetSeverity returns the Severity field value
func (o *GetScanIssue200ResponseInner) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *GetScanIssue200ResponseInner) SetSeverity(v string) {
	o.Severity = v
}

// GetRisks returns the Risks field value
func (o *GetScanIssue200ResponseInner) GetRisks() []GetScanIssue200ResponseInnerRisksInner {
	if o == nil {
		var ret []GetScanIssue200ResponseInnerRisksInner
		return ret
	}

	return o.Risks
}

// GetRisksOk returns a tuple with the Risks field value
// and a boolean to check if the value has been set.
func (o *GetScanIssue200ResponseInner) GetRisksOk() ([]GetScanIssue200ResponseInnerRisksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Risks, true
}

// SetRisks sets field value
func (o *GetScanIssue200ResponseInner) SetRisks(v []GetScanIssue200ResponseInnerRisksInner) {
	o.Risks = v
}

func (o GetScanIssue200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetScanIssue200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ignored"] = o.Ignored
	toSerialize["firstSeenScanId"] = o.FirstSeenScanId
	toSerialize["lastSeenScanId"] = o.LastSeenScanId
	toSerialize["severity"] = o.Severity
	toSerialize["risks"] = o.Risks
	return toSerialize, nil
}

func (o *GetScanIssue200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"ignored",
		"firstSeenScanId",
		"lastSeenScanId",
		"severity",
		"risks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetScanIssue200ResponseInner := _GetScanIssue200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetScanIssue200ResponseInner)

	if err != nil {
		return err
	}

	*o = GetScanIssue200ResponseInner(varGetScanIssue200ResponseInner)

	return err
}

type NullableGetScanIssue200ResponseInner struct {
	value *GetScanIssue200ResponseInner
	isSet bool
}

func (v NullableGetScanIssue200ResponseInner) Get() *GetScanIssue200ResponseInner {
	return v.value
}

func (v *NullableGetScanIssue200ResponseInner) Set(val *GetScanIssue200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetScanIssue200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetScanIssue200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetScanIssue200ResponseInner(val *GetScanIssue200ResponseInner) *NullableGetScanIssue200ResponseInner {
	return &NullableGetScanIssue200ResponseInner{value: val, isSet: true}
}

func (v NullableGetScanIssue200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetScanIssue200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


