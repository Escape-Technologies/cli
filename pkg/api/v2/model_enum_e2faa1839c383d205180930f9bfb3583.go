/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumE2faa1839c383d205180930f9bfb3583 Application type
type EnumE2faa1839c383d205180930f9bfb3583 string

// List of Enum_e2faa1839c383d205180930f9bfb3583
const (
	ENUME2FAA1839C383D205180930F9BFB3583_GRAPHQL EnumE2faa1839c383d205180930f9bfb3583 = "GRAPHQL"
	ENUME2FAA1839C383D205180930F9BFB3583_REST EnumE2faa1839c383d205180930f9bfb3583 = "REST"
	ENUME2FAA1839C383D205180930F9BFB3583_FRONTEND EnumE2faa1839c383d205180930f9bfb3583 = "FRONTEND"
)

// All allowed values of EnumE2faa1839c383d205180930f9bfb3583 enum
var AllowedEnumE2faa1839c383d205180930f9bfb3583EnumValues = []EnumE2faa1839c383d205180930f9bfb3583{
	"GRAPHQL",
	"REST",
	"FRONTEND",
}

func (v *EnumE2faa1839c383d205180930f9bfb3583) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumE2faa1839c383d205180930f9bfb3583(value)
	for _, existing := range AllowedEnumE2faa1839c383d205180930f9bfb3583EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumE2faa1839c383d205180930f9bfb3583", value)
}

// NewEnumE2faa1839c383d205180930f9bfb3583FromValue returns a pointer to a valid EnumE2faa1839c383d205180930f9bfb3583
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumE2faa1839c383d205180930f9bfb3583FromValue(v string) (*EnumE2faa1839c383d205180930f9bfb3583, error) {
	ev := EnumE2faa1839c383d205180930f9bfb3583(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumE2faa1839c383d205180930f9bfb3583: valid values are %v", v, AllowedEnumE2faa1839c383d205180930f9bfb3583EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumE2faa1839c383d205180930f9bfb3583) IsValid() bool {
	for _, existing := range AllowedEnumE2faa1839c383d205180930f9bfb3583EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_e2faa1839c383d205180930f9bfb3583 value
func (v EnumE2faa1839c383d205180930f9bfb3583) Ptr() *EnumE2faa1839c383d205180930f9bfb3583 {
	return &v
}

type NullableEnumE2faa1839c383d205180930f9bfb3583 struct {
	value *EnumE2faa1839c383d205180930f9bfb3583
	isSet bool
}

func (v NullableEnumE2faa1839c383d205180930f9bfb3583) Get() *EnumE2faa1839c383d205180930f9bfb3583 {
	return v.value
}

func (v *NullableEnumE2faa1839c383d205180930f9bfb3583) Set(val *EnumE2faa1839c383d205180930f9bfb3583) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumE2faa1839c383d205180930f9bfb3583) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumE2faa1839c383d205180930f9bfb3583) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumE2faa1839c383d205180930f9bfb3583(val *EnumE2faa1839c383d205180930f9bfb3583) *NullableEnumE2faa1839c383d205180930f9bfb3583 {
	return &NullableEnumE2faa1839c383d205180930f9bfb3583{value: val, isSet: true}
}

func (v NullableEnumE2faa1839c383d205180930f9bfb3583) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumE2faa1839c383d205180930f9bfb3583) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

