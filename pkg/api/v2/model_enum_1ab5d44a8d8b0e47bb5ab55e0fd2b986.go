/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 the model 'Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986'
type Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 string

// List of Enum_1ab5d44a8d8b0e47bb5ab55e0fd2b986
const (
	ENUM1AB5D44A8D8B0E47BB5AB55E0FD2B986_API Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 = "API"
	ENUM1AB5D44A8D8B0E47BB5AB55E0FD2B986_FRONTEND Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 = "FRONTEND"
)

// All allowed values of Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 enum
var AllowedEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986EnumValues = []Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986{
	"API",
	"FRONTEND",
}

func (v *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986(value)
	for _, existing := range AllowedEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986", value)
}

// NewEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986FromValue returns a pointer to a valid Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986FromValue(v string) (*Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986, error) {
	ev := Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986: valid values are %v", v, AllowedEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986) IsValid() bool {
	for _, existing := range AllowedEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_1ab5d44a8d8b0e47bb5ab55e0fd2b986 value
func (v Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986) Ptr() *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 {
	return &v
}

type NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986 struct {
	value *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986
	isSet bool
}

func (v NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) Get() *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986 {
	return v.value
}

func (v *NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) Set(val *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986(val *Enum1ab5d44a8d8b0e47bb5ab55e0fd2b986) *NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986 {
	return &NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986{value: val, isSet: true}
}

func (v NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum1ab5d44a8d8b0e47bb5ab55e0fd2b986) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

