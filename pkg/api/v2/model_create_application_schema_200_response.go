/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreateApplicationSchema200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateApplicationSchema200Response{}

// CreateApplicationSchema200Response struct for CreateApplicationSchema200Response
type CreateApplicationSchema200Response struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	SignedUrl string `json:"signedUrl"`
}

type _CreateApplicationSchema200Response CreateApplicationSchema200Response

// NewCreateApplicationSchema200Response instantiates a new CreateApplicationSchema200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApplicationSchema200Response(id string, createdAt time.Time, signedUrl string) *CreateApplicationSchema200Response {
	this := CreateApplicationSchema200Response{}
	this.Id = id
	this.CreatedAt = createdAt
	this.SignedUrl = signedUrl
	return &this
}

// NewCreateApplicationSchema200ResponseWithDefaults instantiates a new CreateApplicationSchema200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApplicationSchema200ResponseWithDefaults() *CreateApplicationSchema200Response {
	this := CreateApplicationSchema200Response{}
	return &this
}

// GetId returns the Id field value
func (o *CreateApplicationSchema200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationSchema200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateApplicationSchema200Response) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CreateApplicationSchema200Response) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationSchema200Response) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CreateApplicationSchema200Response) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSignedUrl returns the SignedUrl field value
func (o *CreateApplicationSchema200Response) GetSignedUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignedUrl
}

// GetSignedUrlOk returns a tuple with the SignedUrl field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationSchema200Response) GetSignedUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignedUrl, true
}

// SetSignedUrl sets field value
func (o *CreateApplicationSchema200Response) SetSignedUrl(v string) {
	o.SignedUrl = v
}

func (o CreateApplicationSchema200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateApplicationSchema200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["signedUrl"] = o.SignedUrl
	return toSerialize, nil
}

func (o *CreateApplicationSchema200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"signedUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateApplicationSchema200Response := _CreateApplicationSchema200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateApplicationSchema200Response)

	if err != nil {
		return err
	}

	*o = CreateApplicationSchema200Response(varCreateApplicationSchema200Response)

	return err
}

type NullableCreateApplicationSchema200Response struct {
	value *CreateApplicationSchema200Response
	isSet bool
}

func (v NullableCreateApplicationSchema200Response) Get() *CreateApplicationSchema200Response {
	return v.value
}

func (v *NullableCreateApplicationSchema200Response) Set(val *CreateApplicationSchema200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationSchema200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationSchema200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationSchema200Response(val *CreateApplicationSchema200Response) *NullableCreateApplicationSchema200Response {
	return &NullableCreateApplicationSchema200Response{value: val, isSet: true}
}

func (v NullableCreateApplicationSchema200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationSchema200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


