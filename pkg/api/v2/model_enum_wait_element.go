/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumWAITELEMENT the model 'EnumWAITELEMENT'
type EnumWAITELEMENT string

// List of Enum_WAIT_ELEMENT
const (
	ENUMWAITELEMENT_WAIT_ELEMENT EnumWAITELEMENT = "wait_element"
)

// All allowed values of EnumWAITELEMENT enum
var AllowedEnumWAITELEMENTEnumValues = []EnumWAITELEMENT{
	"wait_element",
}

func (v *EnumWAITELEMENT) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumWAITELEMENT(value)
	for _, existing := range AllowedEnumWAITELEMENTEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumWAITELEMENT", value)
}

// NewEnumWAITELEMENTFromValue returns a pointer to a valid EnumWAITELEMENT
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumWAITELEMENTFromValue(v string) (*EnumWAITELEMENT, error) {
	ev := EnumWAITELEMENT(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumWAITELEMENT: valid values are %v", v, AllowedEnumWAITELEMENTEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumWAITELEMENT) IsValid() bool {
	for _, existing := range AllowedEnumWAITELEMENTEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_WAIT_ELEMENT value
func (v EnumWAITELEMENT) Ptr() *EnumWAITELEMENT {
	return &v
}

type NullableEnumWAITELEMENT struct {
	value *EnumWAITELEMENT
	isSet bool
}

func (v NullableEnumWAITELEMENT) Get() *EnumWAITELEMENT {
	return v.value
}

func (v *NullableEnumWAITELEMENT) Set(val *EnumWAITELEMENT) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumWAITELEMENT) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumWAITELEMENT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumWAITELEMENT(val *EnumWAITELEMENT) *NullableEnumWAITELEMENT {
	return &NullableEnumWAITELEMENT{value: val, isSet: true}
}

func (v NullableEnumWAITELEMENT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumWAITELEMENT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

