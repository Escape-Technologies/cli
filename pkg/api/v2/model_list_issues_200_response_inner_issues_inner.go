/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListIssues200ResponseInnerIssuesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIssues200ResponseInnerIssuesInner{}

// ListIssues200ResponseInnerIssuesInner struct for ListIssues200ResponseInnerIssuesInner
type ListIssues200ResponseInnerIssuesInner struct {
	Id string `json:"id"`
	Ignored bool `json:"ignored"`
}

type _ListIssues200ResponseInnerIssuesInner ListIssues200ResponseInnerIssuesInner

// NewListIssues200ResponseInnerIssuesInner instantiates a new ListIssues200ResponseInnerIssuesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIssues200ResponseInnerIssuesInner(id string, ignored bool) *ListIssues200ResponseInnerIssuesInner {
	this := ListIssues200ResponseInnerIssuesInner{}
	this.Id = id
	this.Ignored = ignored
	return &this
}

// NewListIssues200ResponseInnerIssuesInnerWithDefaults instantiates a new ListIssues200ResponseInnerIssuesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIssues200ResponseInnerIssuesInnerWithDefaults() *ListIssues200ResponseInnerIssuesInner {
	this := ListIssues200ResponseInnerIssuesInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListIssues200ResponseInnerIssuesInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInnerIssuesInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListIssues200ResponseInnerIssuesInner) SetId(v string) {
	o.Id = v
}

// GetIgnored returns the Ignored field value
func (o *ListIssues200ResponseInnerIssuesInner) GetIgnored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value
// and a boolean to check if the value has been set.
func (o *ListIssues200ResponseInnerIssuesInner) GetIgnoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ignored, true
}

// SetIgnored sets field value
func (o *ListIssues200ResponseInnerIssuesInner) SetIgnored(v bool) {
	o.Ignored = v
}

func (o ListIssues200ResponseInnerIssuesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIssues200ResponseInnerIssuesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ignored"] = o.Ignored
	return toSerialize, nil
}

func (o *ListIssues200ResponseInnerIssuesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"ignored",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListIssues200ResponseInnerIssuesInner := _ListIssues200ResponseInnerIssuesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListIssues200ResponseInnerIssuesInner)

	if err != nil {
		return err
	}

	*o = ListIssues200ResponseInnerIssuesInner(varListIssues200ResponseInnerIssuesInner)

	return err
}

type NullableListIssues200ResponseInnerIssuesInner struct {
	value *ListIssues200ResponseInnerIssuesInner
	isSet bool
}

func (v NullableListIssues200ResponseInnerIssuesInner) Get() *ListIssues200ResponseInnerIssuesInner {
	return v.value
}

func (v *NullableListIssues200ResponseInnerIssuesInner) Set(val *ListIssues200ResponseInnerIssuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListIssues200ResponseInnerIssuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListIssues200ResponseInnerIssuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIssues200ResponseInnerIssuesInner(val *ListIssues200ResponseInnerIssuesInner) *NullableListIssues200ResponseInnerIssuesInner {
	return &NullableListIssues200ResponseInnerIssuesInner{value: val, isSet: true}
}

func (v NullableListIssues200ResponseInnerIssuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIssues200ResponseInnerIssuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


