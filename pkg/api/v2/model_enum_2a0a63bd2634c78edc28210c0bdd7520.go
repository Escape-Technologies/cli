/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// Enum2a0a63bd2634c78edc28210c0bdd7520 the model 'Enum2a0a63bd2634c78edc28210c0bdd7520'
type Enum2a0a63bd2634c78edc28210c0bdd7520 string

// List of Enum_2a0a63bd2634c78edc28210c0bdd7520
const (
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API1_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API1:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API2_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API2:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API3_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API3:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API4_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API4:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API5_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API5:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API6_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API6:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API7_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API7:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API8_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API8:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API9_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API9:2023"
	ENUM2A0A63BD2634C78EDC28210C0BDD7520_API10_2023 Enum2a0a63bd2634c78edc28210c0bdd7520 = "API10:2023"
)

// All allowed values of Enum2a0a63bd2634c78edc28210c0bdd7520 enum
var AllowedEnum2a0a63bd2634c78edc28210c0bdd7520EnumValues = []Enum2a0a63bd2634c78edc28210c0bdd7520{
	"API1:2023",
	"API2:2023",
	"API3:2023",
	"API4:2023",
	"API5:2023",
	"API6:2023",
	"API7:2023",
	"API8:2023",
	"API9:2023",
	"API10:2023",
}

func (v *Enum2a0a63bd2634c78edc28210c0bdd7520) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enum2a0a63bd2634c78edc28210c0bdd7520(value)
	for _, existing := range AllowedEnum2a0a63bd2634c78edc28210c0bdd7520EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enum2a0a63bd2634c78edc28210c0bdd7520", value)
}

// NewEnum2a0a63bd2634c78edc28210c0bdd7520FromValue returns a pointer to a valid Enum2a0a63bd2634c78edc28210c0bdd7520
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnum2a0a63bd2634c78edc28210c0bdd7520FromValue(v string) (*Enum2a0a63bd2634c78edc28210c0bdd7520, error) {
	ev := Enum2a0a63bd2634c78edc28210c0bdd7520(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enum2a0a63bd2634c78edc28210c0bdd7520: valid values are %v", v, AllowedEnum2a0a63bd2634c78edc28210c0bdd7520EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enum2a0a63bd2634c78edc28210c0bdd7520) IsValid() bool {
	for _, existing := range AllowedEnum2a0a63bd2634c78edc28210c0bdd7520EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_2a0a63bd2634c78edc28210c0bdd7520 value
func (v Enum2a0a63bd2634c78edc28210c0bdd7520) Ptr() *Enum2a0a63bd2634c78edc28210c0bdd7520 {
	return &v
}

type NullableEnum2a0a63bd2634c78edc28210c0bdd7520 struct {
	value *Enum2a0a63bd2634c78edc28210c0bdd7520
	isSet bool
}

func (v NullableEnum2a0a63bd2634c78edc28210c0bdd7520) Get() *Enum2a0a63bd2634c78edc28210c0bdd7520 {
	return v.value
}

func (v *NullableEnum2a0a63bd2634c78edc28210c0bdd7520) Set(val *Enum2a0a63bd2634c78edc28210c0bdd7520) {
	v.value = val
	v.isSet = true
}

func (v NullableEnum2a0a63bd2634c78edc28210c0bdd7520) IsSet() bool {
	return v.isSet
}

func (v *NullableEnum2a0a63bd2634c78edc28210c0bdd7520) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnum2a0a63bd2634c78edc28210c0bdd7520(val *Enum2a0a63bd2634c78edc28210c0bdd7520) *NullableEnum2a0a63bd2634c78edc28210c0bdd7520 {
	return &NullableEnum2a0a63bd2634c78edc28210c0bdd7520{value: val, isSet: true}
}

func (v NullableEnum2a0a63bd2634c78edc28210c0bdd7520) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnum2a0a63bd2634c78edc28210c0bdd7520) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

