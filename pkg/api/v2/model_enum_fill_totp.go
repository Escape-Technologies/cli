/*
Escape Public API

This API enables you to operate [Escape](https://escape.tech/) programmatically.  All requests must be authenticated with a valid API key, provided in the `Authorization` header. For example: `Authorization: Key YOUR_API_KEY`.  You can find your API key in the [Escape dashboard](http://app.escape.tech/user/).

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// EnumFILLTOTP the model 'EnumFILLTOTP'
type EnumFILLTOTP string

// List of Enum_FILL_TOTP
const (
	ENUMFILLTOTP_FILL_TOTP EnumFILLTOTP = "fill_totp"
)

// All allowed values of EnumFILLTOTP enum
var AllowedEnumFILLTOTPEnumValues = []EnumFILLTOTP{
	"fill_totp",
}

func (v *EnumFILLTOTP) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFILLTOTP(value)
	for _, existing := range AllowedEnumFILLTOTPEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFILLTOTP", value)
}

// NewEnumFILLTOTPFromValue returns a pointer to a valid EnumFILLTOTP
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFILLTOTPFromValue(v string) (*EnumFILLTOTP, error) {
	ev := EnumFILLTOTP(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFILLTOTP: valid values are %v", v, AllowedEnumFILLTOTPEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFILLTOTP) IsValid() bool {
	for _, existing := range AllowedEnumFILLTOTPEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_FILL_TOTP value
func (v EnumFILLTOTP) Ptr() *EnumFILLTOTP {
	return &v
}

type NullableEnumFILLTOTP struct {
	value *EnumFILLTOTP
	isSet bool
}

func (v NullableEnumFILLTOTP) Get() *EnumFILLTOTP {
	return v.value
}

func (v *NullableEnumFILLTOTP) Set(val *EnumFILLTOTP) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFILLTOTP) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFILLTOTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFILLTOTP(val *EnumFILLTOTP) *NullableEnumFILLTOTP {
	return &NullableEnumFILLTOTP{value: val, isSet: true}
}

func (v NullableEnumFILLTOTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFILLTOTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

